<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Basildon Coder - Russell Gray</title><link href="http://localhost:8000/" rel="alternate"></link><link href="http://localhost:8000/feeds/russell-gray.atom.xml" rel="self"></link><id>http://localhost:8000/</id><updated>2016-04-22T13:24:46+01:00</updated><entry><title>NetBeans 8, Maven, and Project Lombok</title><link href="http://localhost:8000/netbeans-8-maven-lombok.html" rel="alternate"></link><published>2016-04-22T13:24:46+01:00</published><updated>2016-04-22T13:24:46+01:00</updated><author><name>Russell Gray</name></author><id>tag:localhost,2016-04-22:/netbeans-8-maven-lombok.html</id><summary type="html">&lt;p&gt;On a personal project recently I wanted to try using &lt;a href="https://projectlombok.org/"&gt;Project Lombok&lt;/a&gt; to cut down on java boilerplate. I found much of the online documentation for this either incomplete or just wrong, so I'm documenting what I did to get things (mostly) working here in case it helps someone else â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;On a personal project recently I wanted to try using &lt;a href="https://projectlombok.org/"&gt;Project Lombok&lt;/a&gt; to cut down on java boilerplate. I found much of the online documentation for this either incomplete or just wrong, so I'm documenting what I did to get things (mostly) working here in case it helps someone else.&lt;/p&gt;
&lt;p&gt;Some of the common problems I ran into:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The first recommendation in both &lt;a href="https://projectlombok.org/setup/netbeans.html"&gt;lombok's setup page&lt;/a&gt; and &lt;a href="https://netbeans.org/kb/73/java/annotations-lombok.html"&gt;NetBeans' own&lt;/a&gt; is to enable 'Enable Annotation Processing in Editor'. This option isn't available for maven projects, though.&lt;/li&gt;
&lt;li&gt;Working maven instructions such as &lt;a href="https://blogs.oracle.com/geertjan/entry/lombok_maven_and_netbeans"&gt;this blog&lt;/a&gt; are for older versions of lombok, which were missing some features I wanted.&lt;/li&gt;
&lt;li&gt;More up-to-date blogs such as &lt;a href="https://www.illucit.com/blog/2016/03/lombok-1-16-with-netbeans-8-1-maven/"&gt;this one&lt;/a&gt; get close, but involve hacks like having to build your project twice each time you change a lombok-annotated class. Not ideal.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here's what I did:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Add maven dependency for the latest lombok (I've marked it as having provided scope because I don't want &lt;code&gt;lombok.jar&lt;/code&gt; in my uberjar):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.projectlombok&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;lombok&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.16.8&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;provided&lt;span class="nt"&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add the maven compiler plugin for lombok. Note that I disable adding the generated code to the maven build path; the reasons for this will be clear later:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.projectlombok&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;lombok-maven-plugin&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.16.8.0&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;executions&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;execution&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;phase&amp;gt;&lt;/span&gt;generate-sources&lt;span class="nt"&gt;&amp;lt;/phase&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;goals&amp;gt;&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;lt;goal&amp;gt;&lt;/span&gt;delombok&lt;span class="nt"&gt;&amp;lt;/goal&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;/goals&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;lt;sourceDirectory&amp;gt;&lt;/span&gt;src/main/java&lt;span class="nt"&gt;&amp;lt;/sourceDirectory&amp;gt;&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;lt;addOutputDirectory&amp;gt;&lt;/span&gt;false&lt;span class="nt"&gt;&amp;lt;/addOutputDirectory&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/execution&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/executions&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With this in place, lombok should be invoked at compile time and generate classes into &lt;code&gt;target/generated-sources/delombok&lt;/code&gt;. However, those generated classes aren't compiled, because we prevented the directory being added to the build path. Why? Because if we try to compile both &lt;code&gt;src/main/java&lt;/code&gt; &lt;em&gt;and&lt;/em&gt; &lt;code&gt;target/generated-sources/delombok&lt;/code&gt; we get tons of compile errors due to duplicate class definitions (because every single class exists in both locations). We do actually need to build the generated classes though, because they are the ones that have all the generated accessors, builders etc that the rest of the code depends on. It's not as simple as just changing the &lt;code&gt;sourceDirectory&lt;/code&gt; though - if you do that, NetBeans will honour it and only show &lt;code&gt;target/generated-sources/delombok&lt;/code&gt; in the editor, which means you can't edit your original source!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We solve this with maven profiles. The idea is that we have one profile with &lt;code&gt;sourceDirectory&lt;/code&gt; set to &lt;code&gt;src/main/java&lt;/code&gt;, and tell NetBeans to use this profile when coding. Then, we have another profile with &lt;code&gt;sourceDirectory&lt;/code&gt; set to &lt;code&gt;target/generated-sources/delombok&lt;/code&gt;, and use that when compiling. Here's how.&lt;/p&gt;
&lt;p&gt;First set a property to contain the desired source location:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;properties&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- set default source location --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;src.dir&amp;gt;&lt;/span&gt;src/main/java&lt;span class="nt"&gt;&amp;lt;/src.dir&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/properties&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then create a profile that switches the location:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;profiles&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;profile&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;id&amp;gt;&lt;/span&gt;lombok-build&lt;span class="nt"&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;properties&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;src.dir&amp;gt;&lt;/span&gt;${project.build.directory}/generated-sources/delombok&lt;span class="nt"&gt;&amp;lt;/src.dir&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/properties&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/profile&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/profiles&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, set the &lt;code&gt;sourceDirectory&lt;/code&gt; based on this property:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;sourceDirectory&amp;gt;&lt;/span&gt;${src.dir}&lt;span class="nt"&gt;&amp;lt;/sourceDirectory&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;
        ...
    &lt;span class="nt"&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we have &lt;code&gt;src/main/java&lt;/code&gt; as the default location, so NetBeans will allow you to edit your source properly. Then, specify lombok-build as the active profile for various actions (build, debug etc) under Project Properties-&amp;gt;Actions-&amp;gt;Activate Profiles. When you build within NetBeans, it will run delombok and then compile the generated source rather than the original source.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This works pretty well for me. It's not &lt;em&gt;quite&lt;/em&gt; perfect - you have to remember to use the correct profile for builds outside NetBeans, e.g. from the command line or a CI server - but it's pretty close. I'm very much enjoying not having builders clogging up my code, or having to write endless toString methods. Lombok is fun!&lt;/p&gt;</content></entry><entry><title>Yesterday I Was Crap</title><link href="http://localhost:8000/yesterday-i-was-crap.html" rel="alternate"></link><published>2015-07-07T12:22:19+01:00</published><updated>2015-07-07T12:22:19+01:00</updated><author><name>Russell Gray</name></author><id>tag:localhost,2015-07-07:/yesterday-i-was-crap.html</id><summary type="html">&lt;p&gt;There's a very common meme in the tech world which has always struck me as the programmer equivalent of telling your classmates how easy you found that exam you all just took. It's stupid bravado and serves no purpose other than trying to make people feel bad. You'll recognise it â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;There's a very common meme in the tech world which has always struck me as the programmer equivalent of telling your classmates how easy you found that exam you all just took. It's stupid bravado and serves no purpose other than trying to make people feel bad. You'll recognise it as a variation on the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you look at the code you wrote 6 months ago and don't think it's crap, you're not growing as a programmer. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It's bullshit, and I'm calling it out. Sure, you should improve over time. Sure, you might look at code you wrote 6 months ago and realise there are better ways to do it, but don't feel bad if you don't think it's crap. When I look back at old code I may see ways I could improve it, but it normally holds up OK given the older version of the language I was using, the now-obsolete libraries I depended on, the time constraints I was under. Give your younger self a break, not everything they did sucked. &lt;/p&gt;</content><category term="coding"></category><category term="rants"></category></entry><entry><title>Logging Connections With firewalld</title><link href="http://localhost:8000/logging-connections-with-firewalld.html" rel="alternate"></link><published>2015-04-09T14:59:03+01:00</published><updated>2015-04-09T14:59:03+01:00</updated><author><name>Russell Gray</name></author><id>tag:localhost,2015-04-09:/logging-connections-with-firewalld.html</id><summary type="html">&lt;p&gt;I was recently trying to diagnose a production connectivity issue on a CentOS 7 box and found it a bit non-obvious how to get the firewall to log connection attempts. It is in fact documented in &lt;a href="https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Security_Guide/sec-Using_Firewalls.html#Configuring_Complex_Firewall_Rules_with_the_Rich-Language_Syntax"&gt;section 4.5.15.4.3&lt;/a&gt; (how about that for a document subsection?!) but â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;I was recently trying to diagnose a production connectivity issue on a CentOS 7 box and found it a bit non-obvious how to get the firewall to log connection attempts. It is in fact documented in &lt;a href="https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Security_Guide/sec-Using_Firewalls.html#Configuring_Complex_Firewall_Rules_with_the_Rich-Language_Syntax"&gt;section 4.5.15.4.3&lt;/a&gt; (how about that for a document subsection?!) but for ease of reference I'm putting it here.&lt;/p&gt;
&lt;p&gt;Basically, add a rich rule that includes log level details. For example, to open port 10000 for IP address 198.51.100.0, use the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo firewall-cmd --zone&lt;span class="o"&gt;=&lt;/span&gt;public --add-rich-rule&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;rule family=&amp;quot;&lt;/span&gt;ipv4&lt;span class="s2"&gt;&amp;quot; source address=&amp;quot;&lt;/span&gt;&lt;span class="m"&gt;198&lt;/span&gt;.51.100.0/32&lt;span class="s2"&gt;&amp;quot; port protocol=&amp;quot;&lt;/span&gt;tcp&lt;span class="s2"&gt;&amp;quot; port=&amp;quot;&lt;/span&gt;&lt;span class="m"&gt;10000&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; log prefix=&amp;quot;&lt;/span&gt;test-firewalld-log&lt;span class="s2"&gt;&amp;quot; level=&amp;quot;&lt;/span&gt;info&lt;span class="s2"&gt;&amp;quot; accept&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Connection attempts from that IP address will then be logged in /var/log/messages:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo tail -f /var/log/messages &lt;span class="p"&gt;|&lt;/span&gt;grep test-firewalld-log
&lt;/pre&gt;&lt;/div&gt;</content><category term="firewalld"></category><category term="centos"></category></entry><entry><title>PostgreSQL, JDBC, and Client Certificates</title><link href="http://localhost:8000/postgresql-jdbc-client-certificates.html" rel="alternate"></link><published>2015-03-30T16:12:56+01:00</published><updated>2015-03-30T16:12:56+01:00</updated><author><name>Russell Gray</name></author><id>tag:localhost,2015-03-30:/postgresql-jdbc-client-certificates.html</id><summary type="html">&lt;p&gt;There is a distressing lack of info out there about configuring the postgresql JDBC driver to present a client certificate to a database server when using SSL. It appears that checking the &lt;em&gt;server&lt;/em&gt; certificate works out of the box, but not the client certificate.&lt;/p&gt;
&lt;p&gt;In this post I am using â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;There is a distressing lack of info out there about configuring the postgresql JDBC driver to present a client certificate to a database server when using SSL. It appears that checking the &lt;em&gt;server&lt;/em&gt; certificate works out of the box, but not the client certificate.&lt;/p&gt;
&lt;p&gt;In this post I am using the following software versions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PostgreSQL 8.1 (yes, old, I know)&lt;/li&gt;
&lt;li&gt;postgresql-9.4-1200-jdbc41&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are using different versions then results may vary, but this should be fairly widely-applicable.&lt;/p&gt;
&lt;p&gt;The postgres &lt;a href="https://jdbc.postgresql.org/documentation/81/ssl-factory.html"&gt;JDBC docs&lt;/a&gt; hint that a custom SSLSocketFactory is required in order to establish an SSLContext instance that uses your client cert, but rather unhelpfully goes on to say they don't know how to do it:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Java SSL API is not very well known to the JDBC driver developers and we
would be interested in any interesting and generally useful extensions that
you have implemented using this mechanism. Specifically it would be nice to
be able to provide client certificates to be validated by the server&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Yes, it would be nice. And indeed, someone already has - but it seems to be woefully undocumented. In the org.postgresql.ssl.jdbc4 package we find the &lt;a href="https://github.com/pgjdbc/pgjdbc/blob/master/org/postgresql/ssl/jdbc4/LibPQFactory.java"&gt;LibPQFactory&lt;/a&gt; class, which handles everything we need - and, in what I personally consider a bonus, works with .crt files directly rather than mucking about with keystores and the perenially stupid keytool.&lt;/p&gt;
&lt;p&gt;By default, this class looks in &lt;code&gt;~/.postgresql/&lt;/code&gt; for the files it needs to work, though you can override the location. You need a &lt;code&gt;root.crt&lt;/code&gt; containing the CA for the server certificate, plus your client certificate (&lt;code&gt;postgresql.crt&lt;/code&gt;) and private key (&lt;code&gt;postgresql.pk8&lt;/code&gt;). &lt;/p&gt;
&lt;p&gt;Assuming you are using the default locations, you can test the basic connection using psql:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;psql &lt;span class="s2"&gt;&amp;quot;sslmode=verify-full host=&amp;lt;hostname&amp;gt; dbname=postgres user=&amp;lt;username&amp;gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If all is well, you will be prompted for your password and a connection will be established. If not, things to look at include your postgres config (is there a &lt;code&gt;hostssl&lt;/code&gt; line in &lt;code&gt;pg_hba.config&lt;/code&gt; for your client host?) and your firewall.&lt;/p&gt;
&lt;p&gt;Although psql has no trouble, the JDBC driver has format restrictions. The private key must be PKCS8 and stored in DER format, whereas the certificate is fine in PEM format (because of course it is). If your key is in PEM format (i.e. starts with something like &lt;code&gt;-----BEGIN PRIVATE KEY-----&lt;/code&gt;) you can convert it with openssl:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; openssl pkcs8 -topk8 -inform PEM -outform DER -in postgresql.key -out postgresql.pk8 -nocrypt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that this creates an unencrypted key file; leave off the &lt;code&gt;-nocrypt&lt;/code&gt; parameter if you want it encrypted, and specify the password at runtime.&lt;/p&gt;
&lt;p&gt;Then, finally, specify your connection string like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;jdbc&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;postgresql&lt;/span&gt;&lt;span class="o"&gt;://&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;hostname&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;/&lt;/span&gt;&lt;span class="n"&gt;postgres&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="n"&gt;ssl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;sslfactory&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;postgresql&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ssl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;jdbc4&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;LibPQFactory&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;sslmode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;verify&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;full&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note the &lt;code&gt;sslmode&lt;/code&gt; parameter - this is one of a number of parameters that control behaviour of the factory. The full list is in the source; the interesting ones include &lt;code&gt;sslcert&lt;/code&gt;, &lt;code&gt;sslkey&lt;/code&gt;, and &lt;code&gt;sslrootcert&lt;/code&gt; (overrides the location/name of &lt;code&gt;root.crt&lt;/code&gt;, &lt;code&gt;postgresql.crt&lt;/code&gt; and &lt;code&gt;postgresql.pk8&lt;/code&gt;); and &lt;code&gt;sslpassword&lt;/code&gt; (decryption password if you encrypted your private key).&lt;/p&gt;</content><category term="coding"></category><category term="java"></category><category term="postgres"></category><category term="security"></category></entry><entry><title>A Handy Settings Pattern</title><link href="http://localhost:8000/a-handy-settings-pattern.html" rel="alternate"></link><published>2015-02-20T11:44:20+00:00</published><updated>2015-02-20T11:44:20+00:00</updated><author><name>Russell Gray</name></author><id>tag:localhost,2015-02-20:/a-handy-settings-pattern.html</id><summary type="html">&lt;p&gt;.Net has a fairly nice &lt;a href="http://bit.ly/1DC4tKk"&gt;strongly-typed settings file&lt;/a&gt;, but unfortunately
the most common pattern of access is the big fat static accessor
&lt;code&gt;Settings.Default&lt;/code&gt;. Whilst refactoring some old code recently to use
dependency injection, I found myself struggling a bit to manage settings
nicely so that this static wart worked â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;.Net has a fairly nice &lt;a href="http://bit.ly/1DC4tKk"&gt;strongly-typed settings file&lt;/a&gt;, but unfortunately
the most common pattern of access is the big fat static accessor
&lt;code&gt;Settings.Default&lt;/code&gt;. Whilst refactoring some old code recently to use
dependency injection, I found myself struggling a bit to manage settings
nicely so that this static wart worked correctly. I came up with the following
little pattern which, so far, works well for me so I thought I'd share it.&lt;/p&gt;
&lt;p&gt;Firstly, in any project that needs runtime configuration, define an interface
that contains readonly properties for the data it needs.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;MyClassLibraryProject&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="n"&gt;ISettings&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;MyStringSetting&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;SomeFlag&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then in any class that depends on the settings, make sure the constructor
accepts that interface (the DI container will inject it).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;MyClassLibraryProject&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyConfigurableClass&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IMyConfigurableClass&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;ISettings&lt;/span&gt; &lt;span class="n"&gt;_settings&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;MyConfigurableClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ISettings&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;_settings&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, in whatever project builds your actual executable (e.g. a Console app,
Windows Service, or even just your unit tests) define your Settings.settings
file as normal, making sure that it contains settings names that match the
properties you defined. This will generate a &lt;code&gt;Settings&lt;/code&gt; class for you with the
properties needed to implement the interface defined by your class library.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;MyExecutableProject.Properties&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;


&lt;span class="na"&gt;    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]&lt;/span&gt;
&lt;span class="na"&gt;    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(&lt;/span&gt;
&lt;span class="na"&gt;        &amp;quot;Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator&amp;quot;,&lt;/span&gt;
&lt;span class="na"&gt;        &amp;quot;12.0.0.0&amp;quot;)]&lt;/span&gt;
    &lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="k"&gt;sealed&lt;/span&gt; &lt;span class="k"&gt;partial&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Settings&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;global&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Configuration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ApplicationSettingsBase&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Settings&lt;/span&gt; &lt;span class="n"&gt;defaultInstance&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;Settings&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;global&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Configuration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ApplicationSettingsBase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Synchronized&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Settings&lt;/span&gt;&lt;span class="p"&gt;())));&lt;/span&gt;

        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Settings&lt;/span&gt; &lt;span class="n"&gt;Default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;get&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;defaultInstance&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="na"&gt;        [global::System.Configuration.ApplicationScopedSettingAttribute()]&lt;/span&gt;
&lt;span class="na"&gt;        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]&lt;/span&gt;
&lt;span class="na"&gt;        [global::System.Configuration.DefaultSettingValueAttribute(&lt;/span&gt;
&lt;span class="na"&gt;            &amp;quot;some string value&amp;quot;)]&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;MyStringSetting&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;get&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;MyStringSetting&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]));&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="na"&gt;        [global::System.Configuration.ApplicationScopedSettingAttribute()]&lt;/span&gt;
&lt;span class="na"&gt;        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]&lt;/span&gt;
&lt;span class="na"&gt;        [global::System.Configuration.DefaultSettingValueAttribute(&amp;quot;False&amp;quot;)]&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;SomeFlag&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;get&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;SomeFlag&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]));&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Importantly, this generated class is &lt;code&gt;partial&lt;/code&gt;, so you can extend it. The
extension doesn't need to do anything other that declare that it implements
the settings interface.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// ReSharper disable once CheckNamespace&lt;/span&gt;
&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;MyExecutableProject.Properties&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="k"&gt;partial&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Settings&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;MyClassLibraryProject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ISettings&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, in your composition root map the static accessor for this Settings
class to the interface. In this example I'm using &lt;a href="https://simpleinjector.org/"&gt;SimpleInjector&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Container&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RegisterSingle&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MyClassLibraryProject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ISettings&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;Settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Default&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Register&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MyClassLibraryProject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IMyConfigurableClass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;MyClassLibraryProject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MyConfigurableClass&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;SimpleInjector will now automatically inject &lt;code&gt;Settings.Default&lt;/code&gt; into every
instance of &lt;code&gt;MyConfigurableClass&lt;/code&gt;, behind the &lt;code&gt;ISettings&lt;/code&gt; interface. This of
course makes it trivial to mock settings in tests to check configurable
behaviour without having to muck around with a settings file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="na"&gt;[Test]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;TestSomething&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Of&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ISettings&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MyStringSetting&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;test with this value&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;sut&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MyConfigurableClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsTrue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sut&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DoesTheRightThing&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As a bonus, because this is all strongly-typed, automated renames work as you
expect. Rename a property on the interface and it will rename the property on
the Settings class automatically (at least, Resharper does - not sure about
vanilla Visual Studio).&lt;/p&gt;</content><category term="coding"></category><category term=".net"></category><category term="patterns"></category></entry><entry><title>Windows Debugging Armoury</title><link href="http://localhost:8000/windows-debugging-armoury.html" rel="alternate"></link><published>2015-02-11T11:12:56+00:00</published><updated>2015-02-11T11:12:56+00:00</updated><author><name>Russell Gray</name></author><id>tag:localhost,2015-02-11:/windows-debugging-armoury.html</id><summary type="html">&lt;p&gt;Searching around the web will reveal a number of debugging setup guides. There
are lots of little tips and tricks that you pick up through a career of
figuring out why your production code is misbehaving, and it's helpful to jot
it all down in one place.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is my â€¦&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;Searching around the web will reveal a number of debugging setup guides. There
are lots of little tips and tricks that you pick up through a career of
figuring out why your production code is misbehaving, and it's helpful to jot
it all down in one place.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is my toolkit. There are many like it, but this one is mine.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;More specifically, this is for dealing with .Net applications on Windows. I
might create something similar for dealing with java on Linux at some point.&lt;/p&gt;
&lt;h1 id="install-list"&gt;Install List&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://msdn.microsoft.com/en-us/windows/hardware/gg454513.aspx"&gt;Windows Driver Kit 8.1&lt;/a&gt; (requires VS2013). WDK 8 is no longer supported.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.stevestechspot.com/SOSEXV40NowAvailable.aspx"&gt;SOSEX 4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.microsoft.com/en-gb/download/details.aspx?id=21255"&gt;Psscor4 Managed-Code Debugging Extension for WinDbg&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Alternatively, you can download &lt;a href="https://www.dropbox.com/s/15a26wbldqrke3y/debugging-toolkit.zip"&gt;my zip file&lt;/a&gt; of these tools. No installation needed, just copy it where you need it. Of course, if you don't trust me, get everything from source. And get permission from your friendly sysadmin before putting this stuff on a production box.&lt;/p&gt;
&lt;h1 id="set-up-symbols"&gt;Set-up Symbols&lt;/h1&gt;
&lt;p&gt;Create directories on a disk with a couple of gigabytes free space:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir C:\Symbols
mkdir C:\SymbolCache
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Create the following environment variables:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;_NT_SYMBOL_PATH=SRV*C:\Symbols*http://msdl.microsoft.com/download/symbols
_NT_SYMCACHE_PATH=C:\SymbolCache
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Add any local/app symbols. For instance if you have an application and
associated PDB files in &lt;code&gt;C:\temp\PDB&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;C:\&amp;gt; &amp;quot;C:\Program Files (x86)\Windows Kits\8.0\Debuggers\x86\symstore&amp;quot; add /f &amp;quot;C:\temp\PDB\*.*&amp;quot; /s c:\Symbols /t &amp;quot;Debuggable Server&amp;quot;
C:\&amp;gt; &amp;quot;C:\Program Files (x86)\Windows Kits\8.0\Debuggers\x86\symstore&amp;quot;Â query /s c:\Symbols /f C:\temp\PDB\Server.exe
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;AddÂ &lt;code&gt;C:\Program Files (x86)\Windows Kits\8.0\Debuggers\x86&lt;/code&gt; to your path if
you expect to use &lt;code&gt;symstore&lt;/code&gt; frequently.&lt;/p&gt;
&lt;p&gt;For more information on symstore, check out the &lt;a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms681417"&gt;symstore docs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Also see &lt;a href="http://kejser.org/setting-yourself-up-for-debugging/"&gt;Setting Yourself up for Debugging&lt;/a&gt; at Thomas Kejser's Database
Blog.&lt;/p&gt;
&lt;h1 id="etw-profiling"&gt;ETW Profiling&lt;/h1&gt;
&lt;p&gt;Event Tracing for Windows is a low-level, low-impact form of system tracing that lies dormant until activated with either xperf or Windows Performance Recorder. It is analogous to dtrace on *nix systems.&lt;/p&gt;
&lt;h2 id="wprwpa"&gt;WPR/WPA&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://msdn.microsoft.com/en-us/library/windows/hardware/hh448205.aspx"&gt;Windows Performance Recorder&lt;/a&gt; in conjunction with Windows Performance
Analyzer is an insanely powerful way of profiling performance of .Net
applications running in production, without the overhead of more traditional
code profilers.&lt;/p&gt;
&lt;p&gt;To look at kernel context switches (indicative of blocking calls and lock
contention), open &lt;code&gt;Computation -&amp;gt; CPU Usage (Precise) -&amp;gt; Context Switch Count
by Process, Thread&lt;/code&gt;. Rearrange the columns so that &lt;code&gt;NewProcessName&lt;/code&gt;,
&lt;code&gt;NewThreadStack&lt;/code&gt;, &lt;code&gt;ReadyingProcess&lt;/code&gt;, and &lt;code&gt;ReadyThreadStack&lt;/code&gt; are to the left of
the thick yellow line. Sort descending by &lt;code&gt;Waits (us)&lt;/code&gt; on the right. Select
&lt;code&gt;Load Symbols&lt;/code&gt; from the Trace menu. This will take a while, but once done you
can drill down into your code and see exactly where threads are being switched
back in and what happened to allow them to continue (e.g. which line of code
was blocking, and which line of code unblocked it).&lt;/p&gt;
&lt;p&gt;With a bit of practice, this is like having the &lt;em&gt;Eye of freakin' Sauron&lt;/em&gt;
glaring at your code for you. Coarse-grained locks deep in the .Net framework
itself are dragged kicking and screaming into the sunlight. Awful connection
pool management in your database driver is held up for all to see. No-one
escapes. &lt;/p&gt;
&lt;h2 id="flame-graphs"&gt;Flame Graphs&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.brendangregg.com/FlameGraphs/cpuflamegraphs.html"&gt;Flame graphs&lt;/a&gt; are a very useful visualisation of CPU usage broken down by stack trace. They were originally designed to process dtrace profiles, but &lt;a href="http://randomascii.wordpress.com/2013/03/26/summarizing-xperf-cpu-usage-with-flame-graphs/"&gt;Bruce Dawson wrote a pre-processor&lt;/a&gt; that converts xperf/WPR traces to a compatible format. Check out the linked blog posts for details. Note that you probably want to use WPA first to pin down short intervals of interest, as trying to generate a flamegraph of, say, 5 seconds duration on software doing 30k requests per second is a bit of a system killer to say the least.&lt;/p&gt;
&lt;h1 id="debugging"&gt;Debugging&lt;/h1&gt;
&lt;p&gt;Production debugging is a tricky beast. If you have a route through the
network and some off-peak time, you can connect with Visual Studio's remote
debugger. This can kill performance though. For memory problems, you can just
as usefully grab a process dump and debug it on your own workstation at your
leisure.&lt;/p&gt;
&lt;h2 id="start-windbg"&gt;Start WinDbg&lt;/h2&gt;
&lt;p&gt;Open crash dump file (Ctrl-D)&lt;/p&gt;
&lt;p&gt;Load sos.dll:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="na"&gt;.loadby&lt;/span&gt; &lt;span class="no"&gt;sos&lt;/span&gt; &lt;span class="no"&gt;clr&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Try running a SOS command, e.g. &lt;code&gt;!threads&lt;/code&gt;. If it fails with a 'load data
access DLL' error, it's probably the wrong version of SOS (even the revision
numbers have to match). Follow the instructions and runÂ &lt;code&gt;.cordll -ve -u -l&lt;/code&gt; to
check, and if necessary grab SOS.dll from the dump machine (typical path
&lt;code&gt;C:\Windows\Microsoft.NET\Framework64\v4.0.30319&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;Load psscor4:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="na"&gt;.load&lt;/span&gt; &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="no"&gt;PATH_TO_PSSCOR4.DLL&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Load sosex.dll:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="na"&gt;.load&lt;/span&gt; &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="no"&gt;PATH_TO_SOSEX.DLL&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Set up symbol path. If you have a local symstore (as above), use:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="na"&gt;.sympath&lt;/span&gt; &lt;span class="no"&gt;srv&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="no"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="no"&gt;symbols&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="no"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="no"&gt;msdl.microsoft.com&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="no"&gt;download&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="no"&gt;symbols&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you just have an app directory containing PDBs, use:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="na"&gt;.sympath&lt;/span&gt; &lt;span class="no"&gt;srv&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="no"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="no"&gt;msdl.microsoft.com&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="no"&gt;download&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="no"&gt;symbols&lt;/span&gt;
&lt;span class="na"&gt;.sympath&lt;/span&gt;&lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;C:\Program Files\DeployedServer&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Reload modules:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="na"&gt;.reload&lt;/span&gt; &lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="no"&gt;f&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Toggle debug info with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sx"&gt;!sym noisy&lt;/span&gt;
&lt;span class="sx"&gt;!sym quiet&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Enable DML (hyperlinks symbols so you can navigate the object graph with the mouse):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="na"&gt;.prefer_dml&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="http://www.windowstipspage.com/symbol-server-path-windbg-debugging/"&gt;Further symbol path info&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="using-windbg"&gt;Using WinDbg&lt;/h2&gt;
&lt;p&gt;WinDbg is not what you'd call beginner-friendly. The following pages have some
useful lists of commands in addition to those I've covered below.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://windbg.info/doc/1-common-cmds.html"&gt;Common WinDbg Commands (Thematically Grouped)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://msdn.microsoft.com/en-us/library/bb190764.aspx"&gt;SOS.dll (SOS Debugging Extension)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://theartofdev.wordpress.com/windbg-cheat-sheet/"&gt;WinDbg cheat sheet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="info"&gt;Info&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;x&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;display symbols&lt;/td&gt;
&lt;td&gt;&lt;code&gt;x clr!Thread::*&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="threadsexecution"&gt;Threads/Execution&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;!threads&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Display all threads&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;.shell -ci "!threads" findstr 15&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;pipes output of &lt;code&gt;!threads&lt;/code&gt; into &lt;code&gt;findstr&lt;/code&gt;, useful for e.g. looking up a managed thread ID (OSID) to find the thread ID that can be used with &lt;code&gt;~s&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;~22s&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;switch debugger to thread ordinal 22&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;~~[12AB]s&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;switch to managed thread ID 0x12AB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;!pe&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;dump exception on current thread&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;!clrstack&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;dump managed stack&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;!mk&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;dump managed and native stack&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;!do&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;dump object&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;!sosex.dlk&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;search for deadlocks&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;!sosex.mlocks&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;search for threads holding locks&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;!sosex.mwaits&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;search for threads waiting on locks&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;!psscor4.syncblk&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;run command for all threads&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;!eestack -short -EE&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;todo&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;~*e!\&amp;lt;command\&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;run command for all threads&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;!psscor4.dumpallexceptions&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;dumps every &lt;code&gt;System.Exception&lt;/code&gt; or subclass on the heap&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;!sosex.mframe&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;set current frame for &lt;code&gt;!mdv&lt;/code&gt;. Use &lt;code&gt;!mk&lt;/code&gt; to identify frames&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;!sosex.mdv&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;display arguments and parameters for current stack frame&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="memory"&gt;Memory&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;!dumpheap stat&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;heap stats&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;!dumpheap type MyAssembly.MyClass statistics&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;heap for given type&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content><category term="coding"></category><category term=".net"></category></entry><entry><title>Visual Studio Logs</title><link href="http://localhost:8000/visual-studio-logs.html" rel="alternate"></link><published>2014-12-08T16:17:24+00:00</published><updated>2014-12-08T16:17:24+00:00</updated><author><name>Russell Gray</name></author><id>tag:localhost,2014-12-08:/visual-studio-logs.html</id><summary type="html">&lt;p&gt;Suffering from the accursed slow Visual Studio startup problem (which really shouldn't happen on the beefy i7 with 16GB RAM and SSD I use at work), I wanted to dig a little deeper and diagnose it.&lt;/p&gt;
&lt;p&gt;From &lt;a href="http://stackoverflow.com/a/3995566"&gt;stackoverflow&lt;/a&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Run &lt;code&gt;devenv /log&lt;/code&gt; and wait for Visual Studio to start up.&lt;/li&gt;
&lt;li&gt;Close â€¦&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;Suffering from the accursed slow Visual Studio startup problem (which really shouldn't happen on the beefy i7 with 16GB RAM and SSD I use at work), I wanted to dig a little deeper and diagnose it.&lt;/p&gt;
&lt;p&gt;From &lt;a href="http://stackoverflow.com/a/3995566"&gt;stackoverflow&lt;/a&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Run &lt;code&gt;devenv /log&lt;/code&gt; and wait for Visual Studio to start up.&lt;/li&gt;
&lt;li&gt;Close the IDE to close the log/stop logging.&lt;/li&gt;
&lt;li&gt;Assuming VS2013, this will generate ActivityLog XML and XSL files in &lt;code&gt;%APPDATA%\Microsoft\VisualStudio\12.0\&lt;/code&gt; (adjust version number if you're using something other than VS2013).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Open &lt;code&gt;ActivityLog.xml&lt;/code&gt; in a browser, or open &lt;code&gt;ActivityLog.xsl&lt;/code&gt; in VS itself and execute it (&lt;code&gt;[CTRL]+[ALT]+[F5]&lt;/code&gt;), choosing &lt;code&gt;ActivityLog.xml&lt;/code&gt; from the File Open dialog that pops up. This will give you a nicely-formatted HTML report where each step is timestamped, so look for the big gaps to find the things that are slowing you down (yes, it's probably Resharper).&lt;/p&gt;</content><category term="coding"></category><category term=".net"></category></entry><entry><title>Death To Confluence</title><link href="http://localhost:8000/death-to-confluence.html" rel="alternate"></link><published>2014-12-05T13:36:26+00:00</published><updated>2014-12-05T13:36:26+00:00</updated><author><name>Russell Gray</name></author><id>tag:localhost,2014-12-05:/death-to-confluence.html</id><summary type="html">&lt;p&gt;Way back in 2011, Atlassian made the somewhat surprising decision not to let you edit wiki markup in their wiki product, Confluence. Allegedly this was because &lt;a href="http://blogs.atlassian.com/2011/11/why-we-removed-wiki-markup-editor-in-confluence-4/"&gt;people like 'sales and marketing' were too stupid to learn wiki syntax&lt;/a&gt;, and it was too hard to support both a rich text editor â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Way back in 2011, Atlassian made the somewhat surprising decision not to let you edit wiki markup in their wiki product, Confluence. Allegedly this was because &lt;a href="http://blogs.atlassian.com/2011/11/why-we-removed-wiki-markup-editor-in-confluence-4/"&gt;people like 'sales and marketing' were too stupid to learn wiki syntax&lt;/a&gt;, and it was too hard to support both a rich text editor and a markup editor.&lt;/p&gt;
&lt;p&gt;This might be tolerable if the rich text editor were any good, but 3 years after declaring "We know it's not perfect, &lt;em&gt;yet&lt;/em&gt;" it's still in this weird mutant state where you can type markup syntax into the editor, but it is instantly and irretrievably converted and then &lt;a href="https://confluence.atlassian.com/display/DOC/Confluence+Wiki+Markup"&gt;you can't edit it&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note: You cannot edit content in wiki markup&lt;/strong&gt;. Confluence does not store page content in wiki markup. Although you can enter wiki markup into the editor, Confluence will convert it to the rich text editor format immediately. &lt;em&gt;You will not be able to edit the wiki markup after initial entry&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Huh? So, when I'm writing up a page that e.g. refers to a sproc or class name I tend to mark it up as preformatted text, as is conventional to denote code. I can type this in as {{my_sproc_name}} and it correctly gets converted to &lt;code&gt;my_sproc_name&lt;/code&gt;. But, it's immediately and permanently converted. If I do something so stupid as to finish a paragraph with preformatted text and later want to go back and add something to the end in normal text, Confluence 'helpfully' thinks I want to continue writing in the preformatted block and I have to jump through hoops by rewriting the line and applying formatting again afterwards, or starting a new line in normal body text then deleting the line-break, etc.&lt;/p&gt;
&lt;p&gt;Who thought this was a good idea?&lt;/p&gt;</content><category term="rants"></category></entry><entry><title>3-Way Merge In Vim</title><link href="http://localhost:8000/3-way-merge-in-vim.html" rel="alternate"></link><published>2014-10-30T14:20:21+00:00</published><updated>2014-10-30T14:20:21+00:00</updated><author><name>Russell Gray</name></author><id>tag:localhost,2014-10-30:/3-way-merge-in-vim.html</id><summary type="html">&lt;p&gt;I have a nasty habit of forgetting certain commands when using vim to handle a
3-way merge, since the navigation is a bit non-standard. So, this is my (very
quick) reference.&lt;/p&gt;
&lt;p&gt;Window layout shows the merged file at the bottom, the base (pre-conflict)
file top-middle, and the diverging diffs either â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;I have a nasty habit of forgetting certain commands when using vim to handle a
3-way merge, since the navigation is a bit non-standard. So, this is my (very
quick) reference.&lt;/p&gt;
&lt;p&gt;Window layout shows the merged file at the bottom, the base (pre-conflict)
file top-middle, and the diverging diffs either side.&lt;/p&gt;
&lt;p&gt;Cursor should be in the merged file which can be reached with standard window
navigation (e.g. &lt;code&gt;Ctrl-W j&lt;/code&gt;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Previous conflict   [c
Next conflict       ]c
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, to resolve a conflict, use the &lt;code&gt;diffg&lt;/code&gt; command to select a winner.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Choose local        :diffg LO
Choose remote       :diffg RE
Choose base         :diffg BA
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Choosing base effectively reverts both diffs. If the conflict is too complex
to fix by pulling a block, just rewrite as necessary in the merged file.&lt;/p&gt;
&lt;p&gt;More info &lt;a href="http://www.rosipov.com/blog/use-vimdiff-as-git-mergetool/"&gt;here&lt;/a&gt;&lt;/p&gt;</content><category term="software engineering"></category><category term="vim"></category></entry><entry><title>Blogger/Wordpress to Pelican</title><link href="http://localhost:8000/blogger-wordpress-to-pelican.html" rel="alternate"></link><published>2014-10-03T13:38:00+01:00</published><updated>2014-10-06T12:44:00+01:00</updated><author><name>Russell Gray</name></author><id>tag:localhost,2014-10-03:/blogger-wordpress-to-pelican.html</id><summary type="html">&lt;p&gt;Like all the cool kids these days, I've migrated my blog to use a static site
generator. &lt;a href="http://docs.getpelican.com/en/3.4.0/"&gt;Pelican&lt;/a&gt;, in my case. There are lots of tutorials about this
sort of thing, but I ran into a few things that needed additional tweaking so
I'm documenting it here. Note this isn't â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Like all the cool kids these days, I've migrated my blog to use a static site
generator. &lt;a href="http://docs.getpelican.com/en/3.4.0/"&gt;Pelican&lt;/a&gt;, in my case. There are lots of tutorials about this
sort of thing, but I ran into a few things that needed additional tweaking so
I'm documenting it here. Note this isn't exhaustive - you can find the basics
of generating and publishing static blogs in the pelican docs.&lt;/p&gt;
&lt;h2 id="importing"&gt;Importing&lt;/h2&gt;
&lt;p&gt;Pelican will convert Wordpress xml exports, but not Blogger. No problem -
there are Blogger to Wordpress converters available, so get your data into
Wordpress export format. I used &lt;a href="http://blogger2wordpress.appspot.com"&gt;this one&lt;/a&gt;. Save the XML file in an export
directory off the root of your directory layout, it can be a useful reference
later.&lt;/p&gt;
&lt;h2 id="comments"&gt;Comments&lt;/h2&gt;
&lt;p&gt;I used &lt;a href="http://blog.bstpierre.org/"&gt;Brian St Pierre's&lt;/a&gt; &lt;a href="https://github.com/bstpierre/pelican-comments"&gt;comments plugin&lt;/a&gt; to extract comments from my
Wordpress export. I had to patch it to work with pelican 3.4, but my patch has
now been pulled into the main code so it works fine.&lt;/p&gt;
&lt;h2 id="links"&gt;Links&lt;/h2&gt;
&lt;p&gt;When using markdown I prefer to use reference-style links (where all the
actual URLs are stored as footnotes at the end of the file). The initial
import process creates inline links though, so I wanted to fix that.&lt;/p&gt;
&lt;h3 id="local-links"&gt;Local links&lt;/h3&gt;
&lt;p&gt;Check your page interlinks to make sure the import process picked them up
correctly. If not, edit them yourself to the following format:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[my link text]({filename}/path/to/my-post.md)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note the &lt;code&gt;{filename}&lt;/code&gt; macro - that's what pelican will use to generate your
links in the final html.&lt;/p&gt;
&lt;h3 id="converting-to-reflinks"&gt;Converting to reflinks&lt;/h3&gt;
&lt;p&gt;There's a nifty project called &lt;a href="https://drbunsen.github.io/formd/"&gt;formd&lt;/a&gt; that can convert markdown links to
inline or reference, or toggle between them.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; FILE in &lt;span class="k"&gt;$(&lt;/span&gt;find content -type f -not -path &lt;span class="s2"&gt;&amp;quot;content/comments/*&amp;quot;&lt;/span&gt; -iname &lt;span class="s1"&gt;&amp;#39;*.md&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
    formd -r &amp;lt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$FILE&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sponge &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$FILE&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note the use of sponge to allow me to overwrite the original file with the
reformatted one without needing an intermediate file. Get it with &lt;code&gt;apt-get
install moreutils&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is so useful I made it a fabric task:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;reflinks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;formd -r &amp;lt; {0} | sponge {0}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then I can reprocess any file quickly like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;fab reflinks:content/My-Blog-Post.md
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="validating"&gt;Validating&lt;/h3&gt;
&lt;p&gt;Somewhere in the process of converting content to markdown and links to
references, sometimes links get garbled. Especially if they have characters
that clash with markdown formatting, like parentheses and square brackets.
There is an excellent, ancient tool called linklint written in perl (see,
ancient) that can blast through your content, identify links, and hit them up
to make sure they exist. It even follows redirects.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;linklint -quiet -no_anchors -doc linkdoc -root output -net /@
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This also verifies local links, so it double checks the work pelican has done.
It will generate a fairly spartan but very useful report in the linkdoc
directory.&lt;/p&gt;
&lt;h2 id="redirects"&gt;Redirects&lt;/h2&gt;
&lt;p&gt;Pelican will generate your output in a flat structure, rather than the
year/month/day URL structure used by other blogging software. All &lt;em&gt;your&lt;/em&gt; links
will be correct, but incoming links from other sites will break which will
devastate your ranking.&lt;/p&gt;
&lt;p&gt;Fortunately you can configure your webserver to issue permanent redirects to
keep those links alive.&lt;/p&gt;
&lt;p&gt;First get a list of your old URLs from your export dump. I used powershell for
this because I love how it handles XML, but use any tool you like.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="no"&gt;[xml]&lt;/span&gt; &lt;span class="nv"&gt;$content&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;get-content&lt;/span&gt; &lt;span class="n"&gt;export&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;wordpress&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xml&lt;/span&gt;
&lt;span class="nv"&gt;$content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SelectNodes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;//link&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;export&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;oldurls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next, construct your redirect rules on your webserver. In my case, I was
moving everything from a subdomain to a directory, i.e.
&lt;code&gt;blog.basildoncoder.com&lt;/code&gt; to &lt;code&gt;basildoncoder.com/blog&lt;/code&gt;, as well as the
aforementioned URL change. So I have nginx rules like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;server_name&lt;/span&gt; &lt;span class="err"&gt;blog.basildoncoder.com&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;return&lt;/span&gt; &lt;span class="err"&gt;301&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;scheme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;basildoncoder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;blog&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;request_uri&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That redirects all requests off of the blog subdomain. Then, in the main
server block for basildoncoder.com, I have this rule:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;location ~ &amp;quot;^/blog/((\d{2,4})/){1,3}&amp;quot; {
    rewrite &amp;quot;^/blog/((\d{2,4})/){1,3}(.*)$&amp;quot; /blog/$3 permanent;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The regex there looks for between 1 and 3 occurrences of directories named
with between 2 and 4 numbers, and captures the rest of the URL after it. So
any of the following URLs will match, and capture the filename:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/blog/2014/09/30/test.html
/blog/2014/09/test.html
/blog/2014/test.html
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Each of these will be permanently rewritten to &lt;code&gt;/blog/test.html&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Finally, bust out linklint again to check the old URLs all resolve correctly
once the pages are deployed and the server configured:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;linklint @@oldurls.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You'll get output like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;found  44 urls: ok
-----  88 urls: moved permanently (301)

Linklint checked 44 urls:
    44 were ok, 0 failed. 88 urls moved.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(In this case there were twice as many moves as there are links because I
redirect the subdomain then redirect the path.)&lt;/p&gt;</content></entry><entry><title>Disabling Voice Control on iOS 7.1</title><link href="http://localhost:8000/disabling-voice-control-on-ios-71.html" rel="alternate"></link><published>2014-07-10T21:08:00+01:00</published><updated>2014-07-10T21:08:00+01:00</updated><author><name>Russell Gray</name></author><id>tag:localhost,2014-07-10:/disabling-voice-control-on-ios-71.html</id><summary type="html">&lt;p&gt;I'm one of those people who feels irredeemably stupid if I try to talk to any
piece of technology, so I duly turn off Siri on any iOS device I own.&lt;/p&gt;
&lt;p&gt;I recently discovered - via my 15-month-old son and his love of all things
gadgety that he's not supposed to â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;I'm one of those people who feels irredeemably stupid if I try to talk to any
piece of technology, so I duly turn off Siri on any iOS device I own.&lt;/p&gt;
&lt;p&gt;I recently discovered - via my 15-month-old son and his love of all things
gadgety that he's not supposed to play with - that disabling Siri in iOS 7.1
(and probably older versions too) automatically enables Voice Control, which
can be accessed from the Lock Screen by holding down the Home button. When I
say 'discovered', what I actually mean is I found my son holding my phone with
a faintly confused friend on the line trying to figure out why he was being
gurgled at. It seems that 'da' uttered by an infant is recognised as 'Dan'.
Who knew?&lt;/p&gt;
&lt;p&gt;Annoyingly, Voice Control &lt;a href="https://discussions.apple.com/message/25145289"&gt;cannot be disabled in iOS
7.1&lt;/a&gt; - I ask you, what is the
point of implementing fingerprint scanners and remote wipe technology and all
that jazz if you are going to force-enable features that a toddler can use to
bypass everything and call my mates at 6am?&lt;/p&gt;
&lt;p&gt;Anyway, the workaround I've discovered is to re-enable the thrice-damned Siri,
then go back to Settings/Touch ID &amp;amp; Passcode and disallow access to Siri when
locked. This is enough to make the Lock Screen a sufficient barrier for a
small child. I can disable most of Siri's features to keep her quiet - she
only shows up if I hold down the Home button after unlocking, which is at
least significantly less likely than inquisitive little hands finding my phone
on the couch and holding down the inviting button that makes the screen light
up on the magic box for a couple of seconds.&lt;/p&gt;
&lt;p&gt;Technology is great, no?&lt;/p&gt;</content></entry><entry><title>Git command to open branch in Bitbucket</title><link href="http://localhost:8000/git-command-to-open-branch-in-bitbucket.html" rel="alternate"></link><published>2014-01-23T17:39:00+00:00</published><updated>2014-01-23T17:39:00+00:00</updated><author><name>Russell Gray</name></author><id>tag:localhost,2014-01-23:/git-command-to-open-branch-in-bitbucket.html</id><summary type="html">&lt;p&gt;George Brocklehurst has a &lt;a href="http://georgebrock.com/blog/useful-git-aliases"&gt;useful little script&lt;/a&gt; for opening GitHub at a particular commit, right from the
command line. I've found this handy enough in the past that I've created an
equivalent for Bitbucket, which is what I use at work.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nv"&gt;bitbucket_remote&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;git remote -v &lt;span class="p"&gt;|&lt;/span&gt; /c/Bin/grep â€¦&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;George Brocklehurst has a &lt;a href="http://georgebrock.com/blog/useful-git-aliases"&gt;useful little script&lt;/a&gt; for opening GitHub at a particular commit, right from the
command line. I've found this handy enough in the past that I've created an
equivalent for Bitbucket, which is what I use at work.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nv"&gt;bitbucket_remote&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;git remote -v &lt;span class="p"&gt;|&lt;/span&gt; /c/Bin/grep -Eo &lt;span class="s1"&gt;&amp;#39;bitbucket.org[:/][^.]+&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; head -1&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -z &lt;span class="nv"&gt;$bitbucket_remote&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;No bitbucket remote&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="nv"&gt;bitbucket_url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;bitbucket_remote&lt;/span&gt;&lt;span class="p"&gt;/://&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; ! -z &lt;span class="nv"&gt;$1&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nv"&gt;sha&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;git rev-parse &lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;bitbucket_url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;bitbucket_url&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;commits/&lt;/span&gt;&lt;span class="nv"&gt;$sha&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;

start &lt;span class="nv"&gt;$bitbucket_url&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Installation instructions are the same as George's - name the script
git-bb and drop it on your PATH, then invoke it as a subcommand:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git bb
&lt;/pre&gt;&lt;/div&gt;</content></entry><entry><title>ConcurrentDictionary: GetOrAdd vs GetOrAdd - One Of These Things Is Not Like The Other</title><link href="http://localhost:8000/concurrentdictionary-getoradd-vs.html" rel="alternate"></link><published>2014-01-13T18:00:00+00:00</published><updated>2015-02-11T10:28:00+00:00</updated><author><name>Russell Gray</name></author><id>tag:localhost,2014-01-13:/concurrentdictionary-getoradd-vs.html</id><summary type="html">&lt;p&gt;Some recent performance profiling of a server application under load turned up
an interesting gotcha in .Net's ConcurrentDictionary that I think is well-
worth knowing about.&lt;/p&gt;
&lt;p&gt;As you probably know, ConcurrentDictionary strives for performance in
concurrent environments by using more sophisticated locking strategies than
simply &lt;code&gt;lock(this)&lt;/code&gt;. Briefly, it has â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Some recent performance profiling of a server application under load turned up
an interesting gotcha in .Net's ConcurrentDictionary that I think is well-
worth knowing about.&lt;/p&gt;
&lt;p&gt;As you probably know, ConcurrentDictionary strives for performance in
concurrent environments by using more sophisticated locking strategies than
simply &lt;code&gt;lock(this)&lt;/code&gt;. Briefly, it has a lock per bucket, which means that
parallel writes are possible where the updates are in different buckets. A few
operations acquire all locks, which obviously is a source of contention, but
typically these are operations like Count and IsEmpty that shouldn't be called
frequently. Finally, and of most relevance to this post, it supports lock-free
reads which are the holy grail for high-concurrency. Except when it doesn't.&lt;/p&gt;
&lt;p&gt;ConcurrentDictionary has two overloads of the GetOrAdd method, an atomic
operation to get a value if it exists, or add it if not. In the case where the
value does not exist, you can either provide the new value directly, or pass a
factory delegate that ConcurrentDictionary will call if it needs the value.
The Remarks section in the &lt;a href="http://msdn.microsoft.com/en-us/library/dd287191(v=vs.110.aspx)"&gt;MSDN docs&lt;/a&gt; warns that the factory delegate will
be called outside the lock, but otherwise the two overloads appear identical
functionally - in particular that "read operations on the dictionary are
performed in a lock-free manner".&lt;/p&gt;
&lt;p&gt;This is not true, however, at least as of .Net 4.5. The factory delegate
overload will call the lockless TryGetValue and only attempt to do an Add
(thus acquiring a lock) if the read fails - this is sane and how I would
expect it to be implemented. The non-delegate overload of GetOrAdd, however,
does not call TryGetValue and will obtain the bucket lock &lt;em&gt;before&lt;/em&gt; it attempts
to read the key, meaning that it is no longer a lockless read!&lt;/p&gt;
&lt;p&gt;If you have lots of threads attempting to read from a ConcurrentDictionary
with a small number of keys, you'll get massive lock contention with this
method. Frankly I think this should be considered a bug since in a highly-
concurrent environment this is a fundamental difference in behaviour for two
methods which should be near-identical.&lt;/p&gt;
&lt;p&gt;I won't post any code here because I don't want to get into any licencing
issues, but if you have Resharper or dotPeek you can easily decompile the
framework and verify this behaviour yourself.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Update&lt;/em&gt;: Now that the code is open source, I've been able to &lt;a href="https://github.com/dotnet/corefx/pull/631"&gt;fix this and get it merged&lt;/a&gt;. Hurrah for open source!&lt;/p&gt;</content><category term=".net"></category><category term="coding"></category></entry><entry><title>MySQL 'Table not found' Error When Referring To A New Table In A Trigger</title><link href="http://localhost:8000/mysql-table-not-found-error-when.html" rel="alternate"></link><published>2012-12-18T11:31:00+00:00</published><updated>2012-12-18T11:31:00+00:00</updated><author><name>Russell Gray</name></author><id>tag:localhost,2012-12-18:/mysql-table-not-found-error-when.html</id><summary type="html">&lt;p&gt;Note to self - the following bullet point from the MySQL docs applies to new
tables as well as modified tables.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The trigger cache does not detect when metadata of the underlying objects
has changed. If a trigger uses a table and the table has changed since the
trigger was loaded â€¦&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;Note to self - the following bullet point from the MySQL docs applies to new
tables as well as modified tables.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The trigger cache does not detect when metadata of the underlying objects
has changed. If a trigger uses a table and the table has changed since the
trigger was loaded into the cache, the trigger operates using the outdated
metadata.
&lt;cite&gt;&lt;a href="http://dev.mysql.com/doc/refman/5.6/en/stored-program-restrictions.html"&gt;MySQL docs&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Do not hot-deploy a new table and a trigger update to refer to it, bad
things will happen.&lt;/p&gt;</content></entry><entry><title>Hackish Monitoring With Python and wevtutil</title><link href="http://localhost:8000/hackish-monitoring-with-python-and.html" rel="alternate"></link><published>2012-09-27T11:06:00+01:00</published><updated>2012-09-27T11:06:00+01:00</updated><author><name>Russell Gray</name></author><id>tag:localhost,2012-09-27:/hackish-monitoring-with-python-and.html</id><summary type="html">&lt;p&gt;I recently started at a new role and was asked, as a way to get a handle on
part of the codebase, to add some logging and monitoring to a key service that
didn't really tell the world too much about what it was doing - and when it
did speak â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;I recently started at a new role and was asked, as a way to get a handle on
part of the codebase, to add some logging and monitoring to a key service that
didn't really tell the world too much about what it was doing - and when it
did speak up, no-one was listening.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Oh, and could you come up with something by tomorrow please? That would be
great.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Naturally it takes longer than a day to instrument an entire app, but since
exceptions were being written to the event log I figured we could at least get
some useful stuff from there. So the short-term challenge became finding a way
to collect the event logs from 12 production servers, process them to figure
out what's been happening, and then do it frequently enough that pretty graphs
can be generated.&lt;/p&gt;
&lt;p&gt;This of course rules out doing anything with the MMC snap-in, as manually
connecting to 12 boxes every few minutes would be a full-time job in itself.
Powershell seemingly provides a number of possibilities, but I couldn't get
&lt;a href="http://ss64.com/ps/get-wmiobject.html"&gt;Get-WmiObject&lt;/a&gt; queries to work, &lt;a href="http://ss64.com/ps/get-eventlog.html"&gt;Get-EventLog&lt;/a&gt; wouldn't allow me to
provide authentication credentials for the remote machine, and &lt;a href="http://ss64.com/ps/get-winevent.html"&gt;Get-
WinEvent&lt;/a&gt; almost worked but failed to return the actual log message, even
if I &lt;a href="http://stackoverflow.com/questions/10534982/powershell-get-winevent-has-no-messsage-data"&gt;fiddled with the locale&lt;/a&gt;. I want to like Powershell, I really do, but
every time I want to use it I hit bugs or OS compatibility issues.&lt;/p&gt;
&lt;p&gt;Recent Windows versions come with a handy tool called &lt;a href="http://technet.microsoft.com/en-us/library/cc732848(v=ws.10.aspx)"&gt;wevtutil&lt;/a&gt;, however,
which is just what I needed. The following command does exactly what I want:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wevtutil qe Application /c:50 /q:&amp;quot;*[System[Provider[@Name=&amp;#39;APP_NAME&amp;#39;] and (Level=1 or Level=2) and TimeCreated[timediff(@SystemTime)&amp;lt;300000]]]&amp;quot; /e:Events /r:REMOTE_IP /u:SECURE\\Administrator /f:xml
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That gets me a maximum of 50 log entries from the last 5 minutes (300000ms) in
the Application log with the specified log provider, on the specified machine,
in XML format. Phew!&lt;/p&gt;
&lt;p&gt;From here, it's fairly simple to write some python to invoke that command,
parse the XML response (so that errors can be categorised, e.g.
database.timeout or network.connectivity), and fire some numbers off to the
wonderful &lt;a href="https://github.com/etsy/statsd"&gt;statsd&lt;/a&gt;. Then schedule the script to run every 5 minutes, and we
have some very ghetto error monitoring in almost no time!&lt;/p&gt;
&lt;p&gt;Now begins the larger task of adding more detailed diagnostics to the app for
more effective monitoring.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="http://blogs.msdn.com/b/ericfitz/archive/2008/07/16/wevtutil-scripting.aspx"&gt;this page&lt;/a&gt; and &lt;a href="http://chentiangemalc.wordpress.com/2011/01/25/script-to-collect-all-event-logs-off-a-remote-windows-7-server-2008-machine/"&gt;this one&lt;/a&gt; for ideas on scripting wevtutil.&lt;/p&gt;</content></entry><entry><title>Marshalling a Variable-Length Array From Unmanaged Code In C#</title><link href="http://localhost:8000/marshalling-variable-length-array-from.html" rel="alternate"></link><published>2009-03-31T20:03:00+01:00</published><updated>2009-03-31T20:03:00+01:00</updated><author><name>Russell Gray</name></author><id>tag:localhost,2009-03-31:/marshalling-variable-length-array-from.html</id><summary type="html">&lt;p&gt;I recently spent time working on some C# code to interact with a simple
&lt;a href="http://files.dns-sd.org/draft-cheshire-dnsext-dns-sd.txt"&gt;DNS-SD&lt;/a&gt; system. This requires using &lt;a href="http://en.wikipedia.org/wiki/List_of_DNS_record_types"&gt;DNS TXT records&lt;/a&gt;,
which are not supported in the  &lt;a href="http://msdn.microsoft.com/en-us/library/system.net.dns.aspx"&gt;System.Net.Dns&lt;/a&gt; class. After a few
google searches failed to turn up a pure .Net client library that met my
needs â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;I recently spent time working on some C# code to interact with a simple
&lt;a href="http://files.dns-sd.org/draft-cheshire-dnsext-dns-sd.txt"&gt;DNS-SD&lt;/a&gt; system. This requires using &lt;a href="http://en.wikipedia.org/wiki/List_of_DNS_record_types"&gt;DNS TXT records&lt;/a&gt;,
which are not supported in the  &lt;a href="http://msdn.microsoft.com/en-us/library/system.net.dns.aspx"&gt;System.Net.Dns&lt;/a&gt; class. After a few
google searches failed to turn up a pure .Net client library that met my
needs, I settled on an approach based around p/invoking the Win32
&lt;a href="http://msdn.microsoft.com/en-us/library/ms682016(VS.85).aspx"&gt;DnsQuery&lt;/a&gt; function.&lt;/p&gt;
&lt;p&gt;And quickly ran into problems.&lt;/p&gt;
&lt;p&gt;For DNS TXT records, DnsQuery returns a &lt;a href="http://msdn.microsoft.com/en-us/library/ms682109(VS.85).aspx"&gt;DNS_TXT_DATA&lt;/a&gt; structure
in the Data field of the &lt;a href="http://msdn.microsoft.com/en-us/library/ms682082(VS.85).aspx"&gt;DNS_RECORD&lt;/a&gt; structure. DNS_TXT_DATA is
declared like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;DWORD&lt;/span&gt; &lt;span class="n"&gt;dwStringCount&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;PWSTR&lt;/span&gt; &lt;span class="n"&gt;pStringArray&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;DNS_TXT_DATA&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;PDNS_TXT_DATA&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Using the very handy &lt;a href="http://clrinterop.codeplex.com/"&gt;P/Invoke Interop Assistant&lt;/a&gt;, we see that this
struct can be represented like this in managed code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="na"&gt;[StructLayout(LayoutKind.Sequential)]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;DNS_TXT_DATA&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;/// DWORD-&amp;gt;unsigned int&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;uint&lt;/span&gt; &lt;span class="n"&gt;dwStringCount&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;/// PWSTR[1]&lt;/span&gt;
&lt;span class="na"&gt;    [MarshalAs(UnmanagedType.ByValArray,&lt;/span&gt;
&lt;span class="na"&gt;               SizeConst=1,&lt;/span&gt;
&lt;span class="na"&gt;               ArraySubType=UnmanagedType.SysUInt)]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;IntPtr&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;pStringArray&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There is a problem with pStringArray, unfortunately. The
&lt;a href="http://msdn.microsoft.com/en-us/library/system.runtime.interopservices.marshal.aspx"&gt;System.Runtime.InteropServices.Marshal&lt;/a&gt; class cannot marshal a variable
length array, as it needs to know in advance how big the array is in order to
allocate memory. That's why the managed structure needs SizeConst specified in
the MarshalAs attribute.&lt;/p&gt;
&lt;p&gt;However, if the DNS TXT record data contains multiple quoted strings separated
by whitespace, DnsQuery will return a structure with a variable number of
elements in pStringArray. Since SizeConst is set at compile-time, when we
marshal this into the managed struct defined above, we only get the first
element in our single-element array. Rats.&lt;/p&gt;
&lt;p&gt;More googling turned up very little info on dealing with this, though I found
indications that others had run into the same problem without finding a
satisfactory conclusion. DnsQuery is not the only Win32 function that returns
variable-length arrays, and p/invoking any of the others has the same issue.&lt;/p&gt;
&lt;p&gt;Simply declaring SizeConst to be bigger than we need - "hey, I know I'll never
get more than 10 or so strings back, so why not declare SizeConst to be 128?"
- is inelegant (hardcoded upper limits, ugh) and doesn't work properly anyway.
Since the struct layout is sequential the marshaller will copy over (e.g.)
128*sizeof(IntPtr) sequential bytes (a total of 512 bytes, in this case).
That much memory was never allocated on the unmanaged side, so we end up with
a load of junk in the tail of pStringArray, and more often than not the
marshaller chokes on this junk and throws an AccessViolationException. Fun.&lt;/p&gt;
&lt;p&gt;There IS a way to get round the problem, though. I'm not sure it's the best
way, but it works and seems stable, so I thought I'd throw it out there in
case anyone else can use it (or maybe explain to me why it's an unsafe stupid
thing to do...)&lt;/p&gt;
&lt;p&gt;Basically, since we're dealing with sequential memory, we can use
Marshal.PtrToStructure to marshal the DNS_TXT_DATA structure as defined above,
then use pointer arithmetic to gain access to any further data that needs
marshalling.&lt;/p&gt;
&lt;p&gt;Pointer arithmetic? Oh yes, even in the safe and secure world of managed code
it's sometimes still necessary to get our hands dirty, and situations like
this illustrate that it will always be valuable to have some hard-earned
Assembly/C/C++ war wounds.&lt;/p&gt;
&lt;p&gt;So, assuming we have valid p/invoke declarations and data structures (I've
included a complete source program below), DnsQuery is called like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;pServers&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;IntPtr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Zero&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;ppQueryResultsSet&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;IntPtr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Zero&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DnsQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;domain&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                   &lt;span class="n"&gt;DnsRecordType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                   &lt;span class="n"&gt;DnsQueryType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;STANDARD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                   &lt;span class="n"&gt;pServers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                   &lt;span class="k"&gt;ref&lt;/span&gt; &lt;span class="n"&gt;ppQueryResultsSet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                   &lt;span class="n"&gt;IntPtr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Zero&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ApplicationException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;DnsQuery failed: &amp;quot;&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If we examine the memory location of ppQueryResultsSet (Ctrl-Alt-M,1 or
Debug-&amp;gt;Windows-&amp;gt;Memory-&amp;gt;Memory1 in Visual Studio) we'll see something like the
following (actual address locations may vary - just copy the int value of
ppQueryResultsSet to the Address bar of the memory window):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0x049E0878  00 00 00 00  ....
0x049E087C  b8 09 9e 04  Â¸.Å¾.
0x049E0880  10 00 20 00  .. .
0x049E0884  19 30 00 00  .0..
0x049E0888  00 00 00 00  ....
0x049E088C  00 00 00 00  ....
0x049E0890  06 00 00 00  ....
0x049E0894  b8 08 9e 04  Â¸.Å¾.
0x049E0898  d8 08 9e 04  Ã˜.Å¾.
0x049E089C  f8 08 9e 04  Ã¸.Å¾.
0x049E08A0  28 09 9e 04  (.Å¾.
0x049E08A4  68 09 9e 04  h.Å¾.
0x049E08A8  88 09 9e 04  Ë†.Å¾.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I've set the column size to 4 here, as most of the values we are dealing with
are 4 bytes in size. This effectively shows one value per line.&lt;/p&gt;
&lt;p&gt;The first 6 rows (24 bytes) correspond to the DNS_RECORD structure up
until (but not including) the DNS_TXT_DATA structure in DNS_RECORD's
Data union. We can marshal this first structure without problem:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;dnsRecord&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DnsRecord&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Marshal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PtrToStructure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;ppQueryResultsSet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DnsRecord&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The DNS_TXT_DATA structure starts at address 0x049E0890 in my example. Having
already marshalled the DNS_RECORD structure, now I want a pointer to the
DNS_TXT_DATA structure. I can do this by creating a new pointer at the address
of ppQueryResultsSet plus 24 bytes, and marshalling again:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;ptr&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;IntPtr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;ppQueryResultsSet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToInt32&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Marshal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SizeOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dnsRecord&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;txtData&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DNS_TXT_DATA&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Marshal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PtrToStructure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DNS_TXT_DATA&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Because of the definition of DNS_TXT_DATA, this only marshals 8 bytes - 4
bytes for dwStringCount, and 4 bytes for the single element in pStringArray
(an IntPtr). Since we know the memory is sequential, however, this gives us
everything we need - we now know how many strings have been received (6 in
this case, as indicated at 0x049E0890), and the location of the pointer to the
first string (0x049E0894).&lt;/p&gt;
&lt;p&gt;With this info, we can marshal all the pointers into an array with a
length of dwStringCount:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;IntPtr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToInt32&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// move to first&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;ptrs&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;IntPtr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;txtData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dwStringCount&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;    &lt;span class="c1"&gt;// dest array&lt;/span&gt;
&lt;span class="n"&gt;Marshal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Copy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ptrs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ptrs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And finally we iterate through those pointers, marshalling the string
pointed at by each:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;strings&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;ptrs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;strings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Marshal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PtrToStringAnsi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ptrs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;While the example I've presented here is specific to DnsQuery, the general
approach should be applicable to any situation where you need to marshal a
data structure containing a variable-length array.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gist.github.com/russgray/4748c3f1815f6f2f273d"&gt;Source code&lt;/a&gt;&lt;/p&gt;</content></entry><entry><title>Project Euler Problem 8</title><link href="http://localhost:8000/project-euler-problem-8.html" rel="alternate"></link><published>2009-02-09T19:30:00+00:00</published><updated>2009-02-09T19:30:00+00:00</updated><author><name>Russell Gray</name></author><id>tag:localhost,2009-02-09:/project-euler-problem-8.html</id><summary type="html">&lt;p&gt;&lt;a href="http://projecteuler.net/index.php?section=problems&amp;amp;id=8"&gt;&lt;strong&gt;&lt;em&gt;Problem 8&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"Find the greatest product of five consecutive digits in the
1000-digit number.&lt;/p&gt;
&lt;p&gt;73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The first step here is to find a representation for that fairly humungous
number. Obviously it's â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://projecteuler.net/index.php?section=problems&amp;amp;id=8"&gt;&lt;strong&gt;&lt;em&gt;Problem 8&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"Find the greatest product of five consecutive digits in the
1000-digit number.&lt;/p&gt;
&lt;p&gt;73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The first step here is to find a representation for that fairly humungous
number. Obviously it's not going to fit into a paltry 32-bit int...but then we
don't need it to. The problem description requires us to think in terms of
smaller (5-digit) numbers, not one giant 1000-digit number.&lt;/p&gt;
&lt;p&gt;So, it is sufficient for us to consider the number as an enumerable stream of
single digits, which we can conveniently represent as &lt;code&gt;IEnumerable&amp;lt;int&amp;gt;&lt;/code&gt;. I
could use a macro to convert the number into a collection initialiser, but
it's much easier to treat the string as an &lt;code&gt;IEnumerable&amp;lt;char&amp;gt;&lt;/code&gt; and let LINQ do
the heavy lifting.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Enumerable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AsEnumerable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;73167176531330624919225119674426574742355349194934&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;96983520312774506326239578318016984801869478851843&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt;

    &lt;span class="c1"&gt;// ..... etc etc ......&lt;/span&gt;

    &lt;span class="s"&gt;&amp;quot;05886116467109405077541002256983155200055935729725&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;71636269561882670428252483600823257530420752963450&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Convert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToInt32&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This gives us an &lt;code&gt;IEnumerable&amp;lt;int&amp;gt;&lt;/code&gt; containing every digit in the 1000-digit
number. Now, the 'obvious' way to solve the problem is to iterate through the
collection, and at each index multiply the value against the next four
indexes. A simple loop should deal with it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;SimpleSolver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;ints&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;max&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;ints&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;++)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ints&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="n"&gt;ints&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="n"&gt;ints&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="n"&gt;ints&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="n"&gt;ints&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;max&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As ever, though, that's pretty ugly - the loop condition and product
calculation is tied to the sequence size of 5, and messing with an index
variable is tedious.&lt;/p&gt;
&lt;p&gt;An alternative approach is to take advantage of LINQ's Skip and Take methods
to split the problem domain into overlapping 'slices'. Similar to the for loop
above, the core of the approach is to iterate through the digits, and at each
digit grab a number of subsequent digits and calculate the product.&lt;/p&gt;
&lt;p&gt;Lets look at the 5-digit slices available from the first 10 digits:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  7   3   1   6   7   1   7   6   5   3
|       73167       |
    |       31671       |
        |       16717       |
            |       67176       |
                |       71765       |
                    |       17653       |
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can use Skip to progressively move the starting index forward, and Take to
grab the 5 digits we need. So, starting with i=0, each successive slice can be
sliced from the whole with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;slice&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ints&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Skip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;++).&lt;/span&gt;&lt;span class="n"&gt;Take&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To calculate the product of the digits in the slice, we can use the Aggregate
operation:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Aggregate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We've met Aggregate before - it's basically a fold, which collapses a sequence
to a single item by repeatedly applying an operation to an accumulating
result.&lt;/p&gt;
&lt;p&gt;This can all be wrapped up as an iterator block, like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;IEnumerable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;EnumerateSlices&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;IEnumerable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ints&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sliceSize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;slice&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ints&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Skip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;++).&lt;/span&gt;&lt;span class="n"&gt;Take&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sliceSize&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Count&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;sliceSize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// end&lt;/span&gt;

        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Aggregate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note the termination condition - when we have enumerated every slice, our next
slice will contain only 4 elements (3, 4, 5, and 0 from the end of the
sequence) - that's our cue to exit the loop.&lt;/p&gt;
&lt;p&gt;Also note that this approach makes the algorithm trivial to parameterize - it
will work just as well with slice sizes other than 5.&lt;/p&gt;
&lt;p&gt;This iterator will produce an &lt;code&gt;IEnumerable&amp;lt;int&amp;gt;&lt;/code&gt; containing the products of all
slices, so the final step is to select the largest:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;EnumerateSlices&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Max&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content></entry><entry><title>Killing and Reviving an Aspire One</title><link href="http://localhost:8000/killing-and-reviving-aspire-one.html" rel="alternate"></link><published>2009-02-08T21:01:00+00:00</published><updated>2009-02-08T21:01:00+00:00</updated><author><name>Russell Gray</name></author><id>tag:localhost,2009-02-08:/killing-and-reviving-aspire-one.html</id><summary type="html">&lt;p&gt;I just spent 2 hours reviving my Aspire One netbook after inadvertently
killing it whilst fiddling about configuring &lt;a href="http://www.getdropbox.com"&gt;dropbox&lt;/a&gt;. I found the whole
process unnecessarily fiddly and information on the interwebs to be a bit
scarcer than I would have liked, so I'm documenting it here in case I need â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;I just spent 2 hours reviving my Aspire One netbook after inadvertently
killing it whilst fiddling about configuring &lt;a href="http://www.getdropbox.com"&gt;dropbox&lt;/a&gt;. I found the whole
process unnecessarily fiddly and information on the interwebs to be a bit
scarcer than I would have liked, so I'm documenting it here in case I need it
in the future. Hopefully it'll be useful to someone else too.&lt;/p&gt;
&lt;p&gt;So, the cause of death was a typo when trying to set up the dropboxd daemon to
start automatically on boot. I'm not running nautilus so couldn't use one of
the prepackaged releases, and it's completely my fault that I made a mess of
installing the vanilla x86 build.&lt;/p&gt;
&lt;p&gt;After making the fatal change and rebooting, the system would only boot up to
a blank black screen with a default X mouse cursor. This is because the system
was trying to run my broken command, failing, and therefore never getting to
the main desktop.&lt;/p&gt;
&lt;p&gt;In the world of normal linux, there's all sorts of ways of dealing with this,
but despite plenty of googling I couldn't find a way to use run-level 2 or 3
on an Aspire One, and the Ctrl+Alt+F1-F6 key combos for switching away from X
to a terminal don't work either. There seems to be no way of preventing the
system following the same doomed process over and again if you break X.&lt;/p&gt;
&lt;p&gt;Frustrated, I thought about using the restore disk, but that's a nuclear
option - it re-paves the whole machine, so bye-bye data. That seemed a bit
drastic when all I needed to do was edit a single text file to fix the system.&lt;/p&gt;
&lt;p&gt;Ironically, this was happening as a result of me trying to install a file sync
system as a simple backup. Grr.&lt;/p&gt;
&lt;p&gt;Still, like countless thousands before me, I was saved by a live linux distro
- in this case, a USB bootable one (since the Aspire One has no optical
drive). Following the &lt;a href="http://www.pendrivelinux.com/feather-linux-on-usb/"&gt;instructions&lt;/a&gt;&lt;sup id="fnref-1"&gt;&lt;a class="footnote-ref" href="#fn-1"&gt;1&lt;/a&gt;&lt;/sup&gt;  at &lt;a href="http://www.pendrivelinux.com/"&gt;pendrivelinux&lt;/a&gt; I created a
bootable Feather Linux USB drive, and booted the netbook from it by hitting
F12 on the post screen and selecting to boot from the USB stick.&lt;/p&gt;
&lt;p&gt;At the boot prompt, I used 'knoppix 3' to boot the system up to a command
line, mounted /dev/hdc1 as an ext2 filesystem, and fixed my typo. Reboot, and
tada! Everything was working again (well, after hitting Fn-F7 to reenable the
touchpad, which I had accidentally disabled whilst mashing the keyboard in
frustration at the sight of a blank screen about an hour earlier, heh).&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn-1"&gt;
&lt;p&gt;Note that I had to use a newer version of syslinux than the one
referenced on pendrivelinux. &lt;a href="http://www.kernel.org/pub/linux/utils/boot/syslinux/Old/syslinux-3.36.zip"&gt;This one&lt;/a&gt; worked for me.&amp;#160;&lt;a class="footnote-backref" href="#fnref-1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content></entry><entry><title>Macros: You Oughta Know</title><link href="http://localhost:8000/macros-you-oughta-know.html" rel="alternate"></link><published>2009-02-06T15:03:00+00:00</published><updated>2009-02-06T15:03:00+00:00</updated><author><name>Russell Gray</name></author><id>tag:localhost,2009-02-06:/macros-you-oughta-know.html</id><summary type="html">&lt;p&gt;One of the most useful tools available in any decent text editor is the macro
recorder, but it's criminally underused. It seems most people either don't
know the functionality exists, or simply ignore it. This is a shame, since
it's a great timesaver.&lt;/p&gt;
&lt;p&gt;I don't know why macros are so â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;One of the most useful tools available in any decent text editor is the macro
recorder, but it's criminally underused. It seems most people either don't
know the functionality exists, or simply ignore it. This is a shame, since
it's a great timesaver.&lt;/p&gt;
&lt;p&gt;I don't know why macros are so underused. It might be a mindset thing - it can
take a little while to develop the ability to spot repetitive editing tasks
quickly (i.e. not when you're 75% of the way through thinking &lt;em&gt;dang, I have to
do this again?&lt;/em&gt;), so maybe many people never quite make the leap.&lt;/p&gt;
&lt;p&gt;It's worth it though, because once you get your eye in you see chances to use
macros everywhere.&lt;/p&gt;
&lt;p&gt;I had a useful example just yesterday, in which I needed to make a change to a
colossal switch statement (220 branches! Run the cyclomatic-complexity
doohickey on THAT!) and had no unit tests to fall back on.&lt;/p&gt;
&lt;p&gt;If I had to modify (and hopefully refactor) such a huge construct I wanted to
be able to compare before-and-after test results, but I didn't much fancy
hand-cranking a few hundred unit tests.&lt;/p&gt;
&lt;p&gt;By recording a temporary macro, however, it took just a couple of minutes to
cover every branch. I've decided to post a detailed walkthrough of the process
here in the hopes that a fairly simple example will be illustrative for those
that don't already lean heavily on macros.&lt;/p&gt;
&lt;p&gt;Note that &lt;em&gt;this is not an advanced tutorial&lt;/em&gt;. Please refrain from leaving
snarky comments about how macros are so much more powerful than this - I'm
just doing some introductory material here :-)&lt;/p&gt;
&lt;p&gt;Here is a representative snippet of the C# source. It's part of a legacy
permissioning system that, under certain circumstances, needs to check for the
existence of a permission represented by an enum against a permission table
containing a string-based hierarchy (application/role/permission). The code I
was modifying did the appropriate conversion:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;PermissionKey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SecurityParameterManagementAdd&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Security&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;ParameterManagement&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Add&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;PermissionKey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SecurityRoleManagementAdd&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Security&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;RoleManagement&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Add&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;PermissionKey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SecurityRoleManagementModify&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Security&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;RoleManagement&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Modify&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;PermissionKey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SecurityUserManagementDelete&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Security&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;UserManagement&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Delete&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;PermissionKey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SecurityPermissionManagementAdd&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Security&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;PermissionManagement&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Add&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I needed to add a couple of branches to this, but I also wanted to tidy
up the code by removing the superfluous braces, as a precursor to
converting it into something a bit more robust and maintainable. I
wanted unit test coverage to give me confidence that I hadn't mucked up
some logic and inadvertantly granted admin access to the helpdesk
trainee role or something.&lt;/p&gt;
&lt;p&gt;So, I copied the entire switch body into Notepad++ (well, vim really,
but I'll pretend it's Notepad++ for the sake of making this post a bit
more accessible) and set to work&lt;sup id="fnref-1"&gt;&lt;a class="footnote-ref" href="#fn-1"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Before recording my macro, I needed to do a bit of preprocessing to trim
the code down to just the data I wanted to work with. The following
steps show the 'find' regexes I used (in each case, the value of the
replace field was empty, so these are effectively deletes), and the
effect on the first switch branch from the list above:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Remove opening and closing braces from every switch branch:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;^\s+[\{\}]$&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;PermissionKey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SecurityParameterManagementAdd&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Security&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;ParameterManagement&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Add&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Remove blanks - TextFX/Edit/Delete Blank Lines&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;PermissionKey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SecurityParameterManagementAdd&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Security&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;ParameterManagement&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Add&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Remove case statements and leading whitespace:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;^\s+case\s+&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PermissionKey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SecurityParameterManagementAdd&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;PermissionKey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SecurityParameterManagementAdd&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Security&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;ParameterManagement&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Add&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Remove colon from end of case statement:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;:$&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Remove return statement and leading whitespace:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;^\s+return new string\[\]\s*&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I ended up with a sequence of couplets looking similar to this one:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PermissionKey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SecurityParameterManagementAdd&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Security&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;ParameterManagement&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Add&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now the fun starts - lets walk through the process.&lt;/p&gt;
&lt;p&gt;We want to convert the first couplet into a simple unit test fixture, and
record the process. This will be our macro - the instructions for converting
one couplet into one unit test. We can then play the macro multiple times to
convert all the others effortlessly.&lt;/p&gt;
&lt;p&gt;Start by moving the cursor to the start of the line, before the 'P' of
PermissionKey. This is the start point of the macro, so for the macro to be
repeatable we must make sure that we finish recording the macro in perfect
position to run it again, i.e. before the 'P' of PermissionKey for the next
couplet (column 0 line 3). Hit Ctrl-Shift-R to start recording.&lt;/p&gt;
&lt;p&gt;It is important not to use the mouse when editing - stick to the keyboard.
It's also important not to record keystrokes that are too specific to one bit
of code. For instance, don't use the arrow keys to move left and right
character-by-character, because it won't work on longer or shorter lines.&lt;/p&gt;
&lt;p&gt;Instead, use the Home and End keys to jump to the start or end of the line,
and hold Ctrl whilst arrowing left or right to move a word at a time instead
of a character at a time (this is one of the areas where vim's movement
commands really differentiate it from wannabes like Notepad++...but I
digress). See the 'Detailed Instructions' section below for more information.&lt;/p&gt;
&lt;p&gt;Assume the original switch body is in a method called 'LookupEnumPermission'.
The couplet should be edited to look like this (without the linewrap...):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="na"&gt;[Test]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;TestSecurityParameterManagementAdd&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LookupEnumPermission&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;PermissionKey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SecurityParameterManagementAdd&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AreEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Security&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="n"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AreEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ParameterManagement&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="n"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AreEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Add&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Make sure you finish by moving the cursor into position for the next couplet,
and hit Ctrl-Shift-R again to stop recording.&lt;/p&gt;
&lt;p&gt;Now, hit Ctrl-Shift-P to play back the macro. If you've done everything right,
the next couplet should magically format itself into a unit test. Hit Ctrl-
Shift-P again, and the next couplet will change too. Under the Macro menu,
select 'Run a macro multiple times...' and you can enter a fixed number of
iterations, or just apply the macro over and over again until the end of the
file is reached.&lt;/p&gt;
&lt;p&gt;Finally, you can copy the unit tests into a new or existing test fixture, and
you're done! In much less time (hopefully) and with fewer errors than if the
tests had been written one-by-one.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Detailed Instructions:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;These are ley-by-key instructions in Notepad++, in case something in the
description above is unclear. Visual Studio should be similar. Vim will be
faster once you've learned how, but I'll assume if you use vim you're already
au fait with this sort of editing :-)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Type [Test], and hit enter to start a new line.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Type 'public void Test' and hit Enter.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Type '{' and hit Enter, then Tab.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hold Ctrl and tap the right arrow twice to jump over a couple of words and
place the cursor at the start of the word SecurityParameterManagementAdd, then
hold Ctrl-Shift and right arrow again to select the word. Ctrl-C to copy, then
arrow up two lines and paste it after the word 'Test' to create the full
function name TestSecurityParameterManagementAdd. Type () for the empty
parameter list.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Arrow down two lines and hit Home to jump to the start of the line. Type
'string[] result = LookupEnumPermission(', then hit End to jump to the end of
the line and type ');'.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Arrow down one line, hit Home, then Tab. Type 'Assert.Equals(' then hit
Delete to remove the '{'. Hold Ctrl and move right three times (to move the
cursor just past the comma) and type 'result[0]);' and hit Enter.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Repeat variations of step 7 a couple of times to convert the next two
lines. Remember to use the correct indexes (result[1] and result[2]). Hit
Enter after the last line and type '}' to close the function body.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Arrow down one line and hit Home to place the cursor at the correct start
position for the next couplet, and end the macro by hitting Ctrl-Shift-R
again.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn-1"&gt;
&lt;p&gt;I could have just done this in a new file in Visual Studio, but for
some reason I find VS intolerably slow at running macros once recorded.
So slow, in fact, that you can watch the cursor laboriously complete
each step - I wind up thinking it would have been quicker to do it
manually. That might just be something odd about my VS installation
though, as no-one else seems to think it's slow.&amp;#160;&lt;a class="footnote-backref" href="#fnref-1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content></entry><entry><title>OOD - The Second Coming</title><link href="http://localhost:8000/ood-second-coming.html" rel="alternate"></link><published>2009-01-16T16:00:00+00:00</published><updated>2009-01-16T16:00:00+00:00</updated><author><name>Russell Gray</name></author><id>tag:localhost,2009-01-16:/ood-second-coming.html</id><summary type="html">&lt;p&gt;Over the last couple of months I've been burning up my free time on a pet
project (hence the scarcity of posting here). This particular project is a web
application, and since I've always been a desktop or middle-tier dude in my
day job, it's a bit of a step â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Over the last couple of months I've been burning up my free time on a pet
project (hence the scarcity of posting here). This particular project is a web
application, and since I've always been a desktop or middle-tier dude in my
day job, it's a bit of a step out of my normal environment to grapple with
browser compatibility and suchlike.&lt;/p&gt;
&lt;p&gt;Still, I wanted it to be a decent learning experience, so after a brief
dalliance with Rails I scrapped the idea of using any &lt;a href="http://localhost:8000/coding-by-convention.html"&gt;framework sorcery&lt;/a&gt;
and decided to write everything in plain ol' &lt;a href="http://php.net/"&gt;PHP&lt;/a&gt;, and lean heavily on
&lt;a href="http://developer.yahoo.com/yui/"&gt;YUI&lt;/a&gt; and &lt;a href="http://jquery.com/"&gt;jQuery&lt;/a&gt; to sort out the browser stuff.&lt;/p&gt;
&lt;p&gt;This probably isn't an approach I'd use in future projects, but I bet I'll
appreciate those frameworks a lot more once I've encountered and understood
the problems they attempt to solve.&lt;/p&gt;
&lt;p&gt;So, having strayed from the comfort of &lt;a href="http://rubyonrails.org/"&gt;Rails&lt;/a&gt; and its clones, I had to
think about lots of things like security, validation, data access, and how to
organise my code. Just because I'd abandoned the training wheels I had no
intention of falling over all the time - I still wanted a nice, maintainable
app with sensible abstractions, properly decoupled, and resilient to failure.
Time to start reading articles and the odd open source project, obviously.&lt;/p&gt;
&lt;p&gt;It's at this point I noticed something interesting. Since I regularly read
plenty of development websites it could scarcely have escaped my notice that
the trendy framework players (e.g. Rails, Django, Cake, ASP.NET MVC) strongly
advocate the &lt;a href="http://en.wikipedia.org/wiki/Model-view-controller"&gt;MVC&lt;/a&gt; pattern and &lt;a href="http://en.wikipedia.org/wiki/Class-based_programming"&gt;class-based object-oriented design&lt;/a&gt;.
What I hadn't really realised until now is how endemic that viewpoint had
become.&lt;/p&gt;
&lt;p&gt;In fact, beyond a few admirably out-there frameworks like &lt;a href="http://www.seaside.st/"&gt;Seaside&lt;/a&gt;, it's
almost universal. OOD = good, EVERYTHING ELSE = bad. MVC = good, EVERYTHING
ELSE = bad. No shades of grey, no room for dissenting opinion.&lt;/p&gt;
&lt;p&gt;Go anywhere where best-practices are discussed and mention you're writing some
procedural code, and watch the fireworks. It doesn't matter if your
application has fewer lines of code than a newly-created Rails app has source
files - if you haven't structured it with models, views, and controllers you
may as well have written it in Visual Basic for all the bile you're going to
have thrown at you.&lt;/p&gt;
&lt;p&gt;If you say you're writing functional code, you might get away with it, since
functional programming is still widely misunderstood and you'll likely be
classified as some weird LISPer or Schemer doing something arcane and thus
ignored.&lt;/p&gt;
&lt;p&gt;Ironically, of course, if you grab a random Rails/Django/Cake app from
&lt;a href="http://github.com/"&gt;github&lt;/a&gt; or &lt;a href="http://code.google.com/hosting/"&gt;Google Code&lt;/a&gt;, there's a pretty fair chance that what
you'll find isn't particularly object-oriented anyway. Hint - usage of the
'class' keyword does not an object-oriented design make. And sweet zombie
Jesus, I've never seen such abuse of the singleton pattern. That's a sure sign
someone doesn't 'get' OO - the &lt;a href="http://c2.com/cgi/wiki?SingletonsAreEvil"&gt;singleton pattern is evil&lt;/a&gt; and basically a
way to &lt;a href="http://steve.yegge.googlepages.com/singleton-considered-stupid"&gt;shoehorn globals into an application&lt;/a&gt; without admitting it to your
friends.&lt;/p&gt;
&lt;p&gt;So, we have massive fanatical advocacy of a technique that will allegedly
solve all your problems, coupled with large-scale real-world misunderstandings
and misapplication. Does this remind anyone of anything? Say, for example, the
last time OOD swept the world, panacea to all programming woes, about 20 or so
years ago?&lt;/p&gt;
&lt;p&gt;Don't get me wrong, I'm not arguing that class-based OO itself is just a fad -
it deserves its place as a paradigm alongside procedural, functional,
parallel, and numerous others. It's the heralding of OO as the one true way
that seems faddish.&lt;/p&gt;
&lt;p&gt;So, in the very best "bah, humbug" traditions I've written my app in
unashamedly procedural PHP code. I don't mix my presentation and content. My
data layer is decoupled and unit tested. Every bit of SQL is a parameterised
query, to guard against injection. I don't have a single echo() statement
containing any html tags. All my errors are exception based, and I don't have
a single die() call anywhere. My average function size is about 10 lines, and
my longest is about 20. I've no doubt that there's a legion of 15-year-old
self-appointed geniuses ready to accuse me of inflicting yet more spaghetti
code junk on the world just because "find . -iname '*php' | xargs grep class"
comes up empty, but hey I'm OK with that.&lt;/p&gt;
&lt;p&gt;I'm writing my next app in &lt;a href="http://en.wikipedia.org/wiki/Brainfuck"&gt;brainf*ck&lt;/a&gt;
using ed.&lt;/p&gt;</content></entry><entry><title>Project Euler Problem 7</title><link href="http://localhost:8000/project-euler-problem-7.html" rel="alternate"></link><published>2008-10-26T21:58:00+00:00</published><updated>2008-10-26T21:58:00+00:00</updated><author><name>Russell Gray</name></author><id>tag:localhost,2008-10-26:/project-euler-problem-7.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;a href="http://projecteuler.net/index.php?section=problems&amp;amp;id=7"&gt;Problem 7&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can
see that the 6th prime is 13.&lt;/p&gt;
&lt;p&gt;What is the 10001st prime number?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ah, what a nice, straightforward, unambiguous spec! If only business software
specifications were so precise.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://localhost:8000/project-euler-problem-3.html"&gt;Way back in problem â€¦&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;a href="http://projecteuler.net/index.php?section=problems&amp;amp;id=7"&gt;Problem 7&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can
see that the 6th prime is 13.&lt;/p&gt;
&lt;p&gt;What is the 10001st prime number?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ah, what a nice, straightforward, unambiguous spec! If only business software
specifications were so precise.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://localhost:8000/project-euler-problem-3.html"&gt;Way back in problem 3&lt;/a&gt;, I took a bit of a wander off-topic and built a
prime generator in .Net using the &lt;a href="http://en.wikipedia.org/wiki/Sieve_of_eratosthenes"&gt;Sieve of Eratosthenes&lt;/a&gt;. Armed with this,
problem 7 should be easy, right? The sieve implementation generates an
IEnumerable&amp;lt;long&gt;, which is non-indexable (i.e. I can't just say
Primes()[10001]), but I can take the first 10,001 and then ask for the last
element, which will be the answer to the problem.&lt;/p&gt;
&lt;p&gt;There's a problem with this, however. The sieve requires an upper bound during
initialisation. This means it's great for solving problems like "generate all
the primes less than 10,001", but not so great at answering questions like
"what is the 10,001st prime number?", since it requires foreknowledge of the
upper bound.&lt;/p&gt;
&lt;p&gt;To illustrate the problem, I'll take a wild guess at the upper bound.
I'm going to guess that the 10,001st prime number is less than 99,999.
What happens?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;sieve&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;SieveOfEratosthenes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;99999&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sieve&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Primes&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Take&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10001&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Last&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This generates an answer of 99,991. If I enter this into the Project Euler
website, however, it tells me the answer is wrong. Gah! What went wrong? A
simple test reveals the problem:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;sieve&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;SieveOfEratosthenes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;99999&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;primes&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sieve&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Primes&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Take&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10001&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;primes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Count&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There's only 9,592 primes generated! As the &lt;a href="http://msdn.microsoft.com/en-us/library/bb503062.aspx"&gt;docs for Take()&lt;/a&gt; state
(emphasis mine):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Take&amp;lt;TSourceenumerates source and yields elements until count elements have
been yielded or source contains no more elements.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Damn. So, looks like my 99,999 guess was too small - with that as an upper
bound, the sieve only finds 9,592 primes, and I need the 10,001st. OK, I'll
bump it up by an order of magnitude:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;sieve&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;SieveOfEratosthenes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;999999&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sieve&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Primes&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Take&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10001&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Last&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This gives me the correct answer. Not exactly a wonderful solution though; the
idea of having to guess the upper bound is pretty horrendous, and if this was
real code it wouldn't be particularly maintainable - what if the requirements
changed and we had to find the &lt;em&gt;n&lt;/em&gt;th prime, which happened to be &amp;gt;99,999? We'd
have to guess again. Ugh.&lt;/p&gt;
&lt;p&gt;Worse, the sieve algorithm precomputes all the primes up to the specified
upper bound, meaning that in the above approach I've asked the sieve to
generate primes up to 999,999 (all 78,498 of them!) despite only needing
10,001. Not very efficient.&lt;/p&gt;
&lt;p&gt;Fortunately, the upper bound can be calculated separately. &lt;a href="http://primes.utm.edu/howmany.shtml"&gt;Where n &amp;gt; 8601, as
in this case, we can use the following equation&lt;/a&gt;:&lt;/p&gt;
&lt;div class="math"&gt;$$p(n) &amp;lt; n (log_e n + log_e \cdot log_e \cdot n - 0.9427)$$&lt;/div&gt;
&lt;p&gt;where p(&lt;em&gt;n&lt;/em&gt;) is the &lt;em&gt;n&lt;/em&gt;th prime number.&lt;/p&gt;
&lt;p&gt;Alternatively, for flexibility in handling &lt;em&gt;n&lt;/em&gt;&amp;lt;8601, we can use the less
accurate&lt;/p&gt;
&lt;div class="math"&gt;$$(n) &amp;lt; n \cdot log_e \cdot log_e \cdot n$$&lt;/div&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Prime_number_theorem#Approximations_for_the_nth_prime_number"&gt;which works for
&lt;em&gt;n&lt;/em&gt;5&lt;/a&gt;.
We can easily precompute the answers for &lt;em&gt;n&lt;/em&gt;&amp;lt;=5, or simply calculate on
demand.&lt;/p&gt;
&lt;p&gt;The formula can be implemented on the sieve class, with a factory method
to help when we want to use it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;SieveOfEratosthenes&lt;/span&gt; &lt;span class="nf"&gt;CreateSieveWithAtLeastNPrimes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;SieveOfEratosthenes&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ceiling&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UpperBoundEstimate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;UpperBoundEstimate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Ln&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Ln&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Ln&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;Ln&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This leaves us with an overall solution like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;sieve&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SieveOfEratosthenes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateSieveWithAtLeastNPrimes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10001&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sieve&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Primes&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Take&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10001&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Last&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This generates a total 10,018 primes, cutting the wasted effort from almost
70,000 superfluous primes to just 17, and takes around 20ms to execute on my
machine. Plenty fast enough, I think.&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content></entry><entry><title>Look Before You Look Before You Leap</title><link href="http://localhost:8000/look-before-you-look-before-you-leap.html" rel="alternate"></link><published>2008-10-24T15:32:00+01:00</published><updated>2008-10-24T15:32:00+01:00</updated><author><name>Russell Gray</name></author><id>tag:localhost,2008-10-24:/look-before-you-look-before-you-leap.html</id><summary type="html">&lt;p&gt;Generally, I try to avoid turning this blog into some sort of &lt;a href="http://www.google.co.uk/search?q=define%3Asnark"&gt;snark&lt;/a&gt;-fest
about other programmers or blogs. I've disagreed with Jeff Atwood &lt;a href="http://localhost:8000/code-can-be-beautiful.html"&gt;once&lt;/a&gt; or
&lt;a href="http://localhost:8000/freedom-zero-all-or-nothing-fallacy.html"&gt;twice&lt;/a&gt; though, and so by posting this I'm probably straying a little close
to the edge...but what the hell.&lt;/p&gt;
&lt;p&gt;A couple of days â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Generally, I try to avoid turning this blog into some sort of &lt;a href="http://www.google.co.uk/search?q=define%3Asnark"&gt;snark&lt;/a&gt;-fest
about other programmers or blogs. I've disagreed with Jeff Atwood &lt;a href="http://localhost:8000/code-can-be-beautiful.html"&gt;once&lt;/a&gt; or
&lt;a href="http://localhost:8000/freedom-zero-all-or-nothing-fallacy.html"&gt;twice&lt;/a&gt; though, and so by posting this I'm probably straying a little close
to the edge...but what the hell.&lt;/p&gt;
&lt;p&gt;A couple of days ago Coding Horror carried a &lt;a href="http://www.codinghorror.com/blog/archives/001177.html"&gt;fluff piece&lt;/a&gt; about how all
developers should be marketers too. Predictably, the article soon got posted
to &lt;a href="http://www.reddit.com/r/programming/"&gt;proggit&lt;/a&gt; where it was &lt;a href="http://www.reddit.com/r/programming/comments/78vq3/jeff_atwood_finally_jumps_the_shark/"&gt;ripped on by reddit's resident Jeff-haters&lt;/a&gt;,
and even more predictably the comments were a mix of interesting insight and
barely-concealed hate.&lt;/p&gt;
&lt;p&gt;Apparently some of them got up Jeff's nose a bit, and today he &lt;a href="http://www.codinghorror.com/blog/archives/001178.html"&gt;responded&lt;/a&gt;.
The core of his rebuttal seems to be that you shouldn't trust what you read on
blogs, and should verify everything yourself. True enough, I guess, if perhaps
a bit impractical given the sheer amount of information out there.&lt;/p&gt;
&lt;p&gt;Then, however, Jeff goes on to give an example by referencing a &lt;a href="http://blog.madskristensen.dk/post/Compression-and-performance-GZip-vs-Deflate.aspx"&gt;compression
benchmark&lt;/a&gt; he'd read on a blog and providing counter-analysis to show that
the benchmark was wrong in claiming Deflate is faster than gzip. In doing so,
much knowledge was gained.&lt;/p&gt;
&lt;p&gt;Or so we are told.&lt;/p&gt;
&lt;p&gt;The comment thread quickly becomes a goldmine of humour. Bugs in Jeff's
benchmarking code (not resetting the stopwatch) meant that the durations were
cumulative, not independent, with inevitable distortion of the results.
Another commenter pointed out that &lt;a href="http://en.wikipedia.org/wiki/Gzip"&gt;gzip&lt;/a&gt; cannot possibly be faster than
Deflate, since the gzip algorithm IS the Deflate algorithm plus some
additional computation.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"gzip" is often also used to refer to the gzip file format, which is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a 10-byte header, containing a magic number, a version number and
    a timestamp&lt;/li&gt;
&lt;li&gt;optional extra headers, such as the original file name,&lt;/li&gt;
&lt;li&gt;a body, containing a DEFLATE-compressed payload&lt;/li&gt;
&lt;li&gt;an 8-byte footer, containing a CRC-32 checksum and the length of
    the original uncompressed data&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;cite&gt;(&lt;a href="http://en.wikipedia.org/wiki/Gzip"&gt;Wikipedia&lt;/a&gt;)&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;With the benchmarking code fixed, we see that Deflate is indeed slightly
faster than gzip.&lt;/p&gt;
&lt;p&gt;All of which leads to repeated quotations from Jeff about the community being
smarter than him, and some drastic toning down of language in post-publication
edits to the article. I read a cached version of the RSS feed, which is
markedly different to the article currently live on codinghorror.com - "on my
box, GZip is twice as fast as Deflate" becomes "on my box, GZip is just as
fast as Deflate", "Deflate is way slower. It's not even close" becomes
"Deflate is nowhere near 40% faster", etc.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Coding Horror screengrab" src="http://localhost:8000/images/codinghorror01.png"&gt;&lt;/p&gt;
&lt;p&gt;Anyone who's tackled a major performance problem will likely agree that
profiling is a tremendously valuable technique that should always be
applied before attempting to optimise (i.e. look before you leap). I
think this little episode has highlighted a couple of important things
to bear in mind, however:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Profiling isn't a magic wand - if you use buggy profiling code, you are
leading yourself up the garden path.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Profiling is less useful when you can reason (in the mathematical sense)
about the code. That involves &lt;em&gt;understanding the algorithms you are dealing
with&lt;/em&gt;. Gzip is Deflate plus a bit more processing - so unless that extra
processing has a negative duration gzip must necessarily take longer. You
don't need a profiler to work that out. Look &lt;em&gt;before&lt;/em&gt;you look before you leap.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Anyway, enough hatcheting from me, normal service will be resumed
shortly.&lt;/p&gt;</content><category term="rants"></category></entry><entry><title>Project Euler Problem 6</title><link href="http://localhost:8000/project-euler-problem-6.html" rel="alternate"></link><published>2008-08-14T01:00:00+01:00</published><updated>2008-08-14T01:00:00+01:00</updated><author><name>Russell Gray</name></author><id>tag:localhost,2008-08-14:/project-euler-problem-6.html</id><summary type="html">&lt;p&gt;Onwards to...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;a href="http://projecteuler.net/index.php?section=problems&amp;amp;id=6"&gt;Problem 6&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The sum of the squares of the first ten natural numbers is,&lt;/p&gt;
&lt;p&gt;1^2^ + 2^2^ + ... + 10^2^ = 385&lt;/p&gt;
&lt;p&gt;The square of the sum of the first ten natural numbers is,&lt;/p&gt;
&lt;p&gt;(1 + 2 + ... + 10)^2^ = 55^2^ = 3025&lt;/p&gt;
&lt;p&gt;Hence the difference between the sum of the â€¦&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;Onwards to...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;a href="http://projecteuler.net/index.php?section=problems&amp;amp;id=6"&gt;Problem 6&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The sum of the squares of the first ten natural numbers is,&lt;/p&gt;
&lt;p&gt;1^2^ + 2^2^ + ... + 10^2^ = 385&lt;/p&gt;
&lt;p&gt;The square of the sum of the first ten natural numbers is,&lt;/p&gt;
&lt;p&gt;(1 + 2 + ... + 10)^2^ = 55^2^ = 3025&lt;/p&gt;
&lt;p&gt;Hence the difference between the sum of the squares of the first ten
natural numbers and the square of the sum is 3025 - 385 = 2640.&lt;/p&gt;
&lt;p&gt;Find the difference between the sum of the squares of the first one
hundred natural numbers and the square of the sum.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Bit of a disappointment, problem 6; it's too easy. &lt;a href="http://projecteuler.net/index.php?section=problems&amp;amp;sort=difficulty"&gt;It's rated as the third-
easiest&lt;/a&gt;, i.e. easier than problems &lt;a href="http://localhost:8000/project-euler-problem-3.html"&gt;3&lt;/a&gt;, &lt;a href="http://localhost:8000/project-euler-problem-4.html"&gt;4&lt;/a&gt;, and &lt;a href="http://localhost:8000/project-euler-problem-5.html"&gt;5&lt;/a&gt; which I've
already covered. In fact, for my money it's easier than problem &lt;a href="http://localhost:8000/project-euler-problems-1-and-2.html"&gt;2&lt;/a&gt; as
well. Ah well, the difficulty ramps up soon enough, trust me. Here's the very
simple python solution:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;sum_sq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;101&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;span class="n"&gt;sq_sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;101&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;sq_sum&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;sum_sq&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see, it's pretty intuitive. You sum the squares, square the sum,
and calculate the difference. The answer is basically in the description, you
just have to scale up a little.&lt;/p&gt;
&lt;p&gt;There's not much else to say about this one. Even if I abandon the functional
approach and write a straightforward imperative solution it's still very
straightforward. In (deliberately non-idiomatic, so don't whine at me) ruby:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;sum_of_squares&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upto&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;sum_of_squares&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
    &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="nb"&gt;p&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;sum_of_squares&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content></entry><entry><title>Magic Numbers and Other Numerical Nightmares</title><link href="http://localhost:8000/magic-numbers-and-other-numerical.html" rel="alternate"></link><published>2008-08-13T13:48:00+01:00</published><updated>2008-08-13T13:48:00+01:00</updated><author><name>Russell Gray</name></author><id>tag:localhost,2008-08-13:/magic-numbers-and-other-numerical.html</id><summary type="html">&lt;p&gt;There are many coding practices that are near-universally regarded as 'bad',
yet somehow keep cropping up over and over again. Conditional-branch abuse
(including, yes, gotos). Deep nesting. Cryptic variable names. Global
variables. Tight coupling. Entangled business/presentation logic. I could go
on.&lt;/p&gt;
&lt;p&gt;Why do we keep doing it? Convenience? Laziness â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;There are many coding practices that are near-universally regarded as 'bad',
yet somehow keep cropping up over and over again. Conditional-branch abuse
(including, yes, gotos). Deep nesting. Cryptic variable names. Global
variables. Tight coupling. Entangled business/presentation logic. I could go
on.&lt;/p&gt;
&lt;p&gt;Why do we keep doing it? Convenience? Laziness? Tiredness? Is unreadable
spaghetti code some sort of steady-state/equilibrium for code? Is it a natural
consequence of the vague and squidgy limitations of our evolved monkey-brains?
Or is well-designed code abhorred like a vacuum and naturally atrophies into
the sort of shambles you dread seeing on your first day at a new job, unless
well-intentioned and dedicated people actively work to clean and polish it,
like the &lt;a href="http://en.wikipedia.org/wiki/Forth_Railway_Bridge#Maintenance"&gt;Forth Bridge&lt;/a&gt;?&lt;/p&gt;
&lt;p&gt;I don't have the time or wit to give this subject the treatment it deserves,
but I do want to rant a bit about another symptom of this disease, which has
given me a couple of sleepless nights recently. I refer, as the title might
suggest, to &lt;a href="http://en.wikipedia.org/wiki/Magic_number_(programming)"&gt;magic numbers&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Magic numbers are constants, &lt;a href="http://en.wikipedia.org/wiki/Magic_number_(programming)#Unnamed_numerical_constant"&gt;unnamed&lt;/a&gt; in the most pathological cases,
that represent an assumption or a limit in a piece of code. They often cause
problems because soon they are forgotten about or their meaning is lost - and
then something happens to invalidate the assumption, the code breaks, and all
hell breaks loose.&lt;/p&gt;
&lt;p&gt;Magic numbers, to stretch the definition a bit, can also be implicit. If you
are using a 32-bit integer, your magic number is 2,147,483,647 - that's the
biggest number you can store in that type. Often, movement up to and beyond
these ranges can trigger long-dormant bugs that are no fun at all to diagnose.&lt;/p&gt;
&lt;p&gt;Three times in recent history I've been bitten by bugs of this class,
triggered by auto-incrementing sequences in database. These are they:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;A table in a database had a 32-bit integer primary key. At the time this
seemed like a perfectly reasonable default, but insanely fast growth in usage
of the system meant that the ~2.1billion upper limit of that data type was
quickly reached. The DB column was switched to a 64-bit integer, but some of
the client applications reading that table were not identified as at-risk.
When the sequence generator left the 32-bit range, those applications
overflowed. This happened at 4:30pm on a Friday afternoon. Saturdays were
peak-times for system usage. You can imagine the frantic hacking that ensued.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A sequence generator for a particular entity was started at 20,000,000, so
as not to clash with the ID sequence of a related entity (that had started at
0 a good few years earlier). The similarity between the entities and the need
to not have the IDs overlap had valid business justification, but the magic
number was selected arbitrarily and promptly forgotten. Inevitably, the latter
sequence surpassed that number, causing bizarre and difficult-to-trace entity
relationship corruption that manifested as strangely-disappearing data on the
front-end.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A stored procedure parameter was incorrectly declared as an
OracleType.Float, when it should have been an OracleType.Int32. This resulted
in the value being cast from an integer to a floating-point and back again.
For the first 16,777,216 integers, this happens to work OK. For the value
16,777,217, however, the loss in precision means that the number changes
during casting. This simple bit of (heavily contrived) code shows the problem:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="m"&gt;17000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{0} != {1}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There are many numbers above 16,777,217 that have this characteristic;
16,777,217 just happens to be the first, for reasons you can probably
divine if you think the IEEE floating-point spec is a riveting read. A
couple of weeks after the launch of a fairly major internal application,
this time-bomb exploded due to a sequence reaching the magic number. The
bug was nothing to do with the new application, but of course fingers were
pointed at it since a long-running and stable system had mysteriously
choked very shortly after deployment of the new application.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now, unquestionably, all these problems are avoidable, and a strong argument
could be made that none of them should ever have been allowed to happen. Yet,
for many reasons, they do. For example, first-mover advantage can mean the
opportunity cost of taking the time to do things right first time is greater
than the cost of fixing problems later.&lt;/p&gt;
&lt;p&gt;Also, people make assumptions. The issue underlying the &lt;a href="http://en.wikipedia.org/wiki/Millennium_bug"&gt;Millennium Bug&lt;/a&gt;
hysteria was caused by well- meaning developers who knew that two-digit dates
wouldn't work after 1999 (effectively another magic number), but assumed the
software would have been replaced or upgraded by then. No doubt that seemed a
totally reasonable assumption in the 1970s, and it had genuine technical
benefits (storage space was so tight that every byte saved was a battle won).&lt;/p&gt;
&lt;p&gt;Anyway, I don't have a magic bullet solution for this, I'm just venting
spleen. Unit tests can help, but won't magically eliminate this class of bug
(no matter what some of the more extreme TDD fanatics might tell you), so I
suppose the lesson to take from this is the importance of being able to
recognise and diagnose potential magic number issues. Pay close attention to
data types, type conversions, and current values of sequences in your
database. Keeping a sacrifical goat on hand might pay dividends too, in case
any blood-thirsty deities with a head for binary arithmetic are watching.&lt;/p&gt;</content></entry><entry><title>Ubuntu, Xmonad, and an Ode to Apt</title><link href="http://localhost:8000/ubuntu-xmonad-and-ode-to-apt.html" rel="alternate"></link><published>2008-08-10T23:34:00+01:00</published><updated>2008-08-10T23:34:00+01:00</updated><author><name>Russell Gray</name></author><id>tag:localhost,2008-08-10:/ubuntu-xmonad-and-ode-to-apt.html</id><summary type="html">&lt;p&gt;This weekend I finally got around to updating my main Linux box from Ubuntu
7.10 to 8.04 (yes, I know, 4 months late - but moving fast!). The highly
excellent &lt;a href="http://xmonad.org/"&gt;xmonad&lt;/a&gt; has made it into the main Ubuntu repositories, so I
discarded my own build and grabbed the packaged â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;This weekend I finally got around to updating my main Linux box from Ubuntu
7.10 to 8.04 (yes, I know, 4 months late - but moving fast!). The highly
excellent &lt;a href="http://xmonad.org/"&gt;xmonad&lt;/a&gt; has made it into the main Ubuntu repositories, so I
discarded my own build and grabbed the packaged version - which promptly
didn't work as expected on my dual-head setup. Gah.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://bugs.launchpad.net/debian/+source/haskell-x11/+bug/203594"&gt;A bit of googling suggested&lt;/a&gt; that the problem lay with the upstream debian
package, which contained a build of libghc6-x11-dev that was compiled without
xinerama support. This left me with a choice of either waiting for the package
to get sorted out, or to do the build myself again. I decided to do my own
build rather than live without xmonad, but rather than mucking about with
tarballs I could at least now get the source from the package repository.&lt;/p&gt;
&lt;p&gt;The appropriate steps, for anyone interested or having the same problem,
are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Make sure libxinerama-dev is installed&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Recompile libghc6-x11-dev and install it&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Recompile libghc6-xmonad-dev and libghc-xmonad-contrib-dev against the new X11 lib&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The apt-get incantations are:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install libxinerama-dev
&lt;span class="nb"&gt;cd&lt;/span&gt; /tmp
sudo apt-get &lt;span class="nb"&gt;source&lt;/span&gt; --compile libghc6-x11-dev
sudo dpkg -i libghc6-x11-dev_1.4.1-1_i386.deb
sudo apt-get build-dep libghc6-xmonad-dev
sudo apt-get &lt;span class="nb"&gt;source&lt;/span&gt; --compile libghc6-xmonad-dev
sudo dpkg -i libghc6-xmonad-dev
sudo apt-get build-dep libghc6-xmonad-contrib-dev
sudo apt-get &lt;span class="nb"&gt;source&lt;/span&gt; --compile libghc6-xmonad-contrib-dev
sudo dpkg -i libghc6-xmonad-contrib-dev_0.6-4_i386.deb
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A quick alt-q restart, and all is well.&lt;/p&gt;
&lt;p&gt;I only mention all this because it's so easy in this day and age to take
something like apt for granted, and every so often it's worth taking a moment
to appreciate just how spectacularly good it really is. Where I work,
deployments are an endless source of headaches and grief, yet the complexity
of those deployments absolutely pales against the task of updating literally
millions of systems, all slightly different to each other, thousands of times
a day. It's just a joy to be able to say to apt "hey, go get me everything I
need to build package x, then build package x, then install it for me. And get
it right first time!".&lt;/p&gt;
&lt;p&gt;In most cases, it does just that. It's an astonishing piece of software.&lt;/p&gt;</content></entry><entry><title>Dynamic Async Batching with PFX</title><link href="http://localhost:8000/dynamic-async-batching-with-pfx.html" rel="alternate"></link><published>2008-08-08T17:41:00+01:00</published><updated>2008-08-08T17:41:00+01:00</updated><author><name>Russell Gray</name></author><id>tag:localhost,2008-08-08:/dynamic-async-batching-with-pfx.html</id><summary type="html">&lt;p&gt;The &lt;a href="http://blogs.msdn.com/pfxteam/default.aspx"&gt;PFX Team blog&lt;/a&gt; has been posting some excellent articles recently on
the subject of &lt;a href="http://blogs.msdn.com/pfxteam/archive/2008/08/05/8835612.aspx"&gt;task batching&lt;/a&gt; using the June 2008 CTP release of the Task
Parallel Library. It's really cool to see some of these techniques abstracted
properly in .Net, and I hope it eventually becomes part of the â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;The &lt;a href="http://blogs.msdn.com/pfxteam/default.aspx"&gt;PFX Team blog&lt;/a&gt; has been posting some excellent articles recently on
the subject of &lt;a href="http://blogs.msdn.com/pfxteam/archive/2008/08/05/8835612.aspx"&gt;task batching&lt;/a&gt; using the June 2008 CTP release of the Task
Parallel Library. It's really cool to see some of these techniques abstracted
properly in .Net, and I hope it eventually becomes part of the core libraries.&lt;/p&gt;
&lt;p&gt;I've been playing around a bit recently with the June CTP in the context of
batching up web service calls, as that's something I do quite a lot. One
particular problem that comes up occasionally is a two-stage series of
requests to download a complete set of paged data. I might do this if I wanted
to download an entire discussion thread, for instance, or a large account
statement from my online bank.&lt;/p&gt;
&lt;p&gt;Typically in this situation the web service will limit the number of records I
can retrieve in one request, and allow me to specify start and count
parameters to the request. The response will also include a total record
count, so I know how much data there is.&lt;/p&gt;
&lt;p&gt;The normal use case for this is to request the first page of data, and use the
total record count to display a list of page links that my user can click on
to navigate the data or jump to any page. In my case, however, I want ALL the
data as quickly as possible.&lt;/p&gt;
&lt;p&gt;So, imagine a situation where I am using a service that lets me download a
maximum of 200 records per request. My first step is to request the maximum
200 records starting from index 0, i.e. the first page of data. In the
response will be a total record count - if that number is equal to the number
of records I got back (i.e. &amp;lt;= 200) I've got everything in one hit and can
stop. But what if the total record count is, say, 1000? I need to make four
more requests (since I've already got records 1-200, I have 800 more to get in
batches of 200 each).&lt;/p&gt;
&lt;p&gt;Naturally I want to do this asynchronously, using as few resources as I can.
This means all webservice calls should be using the APM pattern (thus using IO
completion ports, and not consuming worker threads from the thread pool or
creating my own threads) and, preferably, not blocking anywhere except when I
actually need some data before continuing.&lt;/p&gt;
&lt;p&gt;The two-stage process can be successfully captured asynchronously by combining
a future and a continuation. I encapsulate the initial request in a Future
object (which is a subclass of Task), and handle the check-record-count-and-
get-more-records-if-required logic in the continuation. The code for this
basically looks as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;GetAllItemsAsync&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;GetItemsResponse&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;
            &lt;span class="n"&gt;ac&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Service&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BeginGetItems&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ac&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;Service&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EndGetItems&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;200&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;resultFuture&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ContinueWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="cm"&gt;/* Batch retrieval here... */&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;resultFuture&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In order to support the APM pattern neatly, I'm using the following
method &lt;a href="http://blogs.msdn.com/pfxteam/archive/2008/03/16/8272833.aspx"&gt;from the PFX
blog&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;
        &lt;span class="n"&gt;Action&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;AsyncCallback&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;beginFunc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;Func&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IAsyncResult&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;endFunc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;.&lt;/span&gt;&lt;span class="n"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;beginFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iar&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;endFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iar&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This could be coded as an extension method, though I haven't bothered
yet as I'm hopeful this immensely useful snippet will be integrated into
the library itself.&lt;/p&gt;
&lt;p&gt;Now I need to make a number of calls to get the rest of the data, so I
loop until I've made the required number of async service calls:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;resultFuture&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ContinueWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ConcurrentQueue&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;handles&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;WaitHandle&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;

        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TotalRecordCount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;asyncResult&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Service&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BeginGetItems&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;ar&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Service&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EndGetItems&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ar&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Items&lt;/span&gt;
                    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Enqueue&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="n"&gt;handles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asyncResult&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AsyncWaitHandle&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="m"&gt;200&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;handles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WaitOne&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToList&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I'm about 85% happy with this as an approach. I'm not completely happy,
however, because of the WaitOne calls, which mean that I'm blocking on a
threadpool thread until all the calls complete. Given that this is all
wrapped up in a future, I may not actually need to access the data until
well after the calls have completed, in which case I am wastefully
consuming a threadpool thread for some period of time. So the $64,000
question is, how do I get rid of it? I'm sure there's a way to do it,
but my brain has gone on a protest march about all the time I'm forcing
it to spend thinking about this stuff.&lt;/p&gt;</content></entry><entry><title>Comment Discontent</title><link href="http://localhost:8000/comment-discontent.html" rel="alternate"></link><published>2008-07-30T17:01:00+01:00</published><updated>2008-07-30T17:01:00+01:00</updated><author><name>Russell Gray</name></author><id>tag:localhost,2008-07-30:/comment-discontent.html</id><summary type="html">&lt;p&gt;There seems to have been a recent &lt;a href="http://blog.uncommons.org/2008/07/25/no-your-code-is-not-so-great-that-it-doesnt-need-comments/"&gt;outbreak&lt;/a&gt; &lt;a href="http://www.carlcrowder.com/blog/?p=34"&gt;in&lt;/a&gt; &lt;a href="http://www.codinghorror.com/blog/archives/001150.html"&gt;blog&lt;/a&gt; &lt;a href="http://steve-yegge.blogspot.com/2008/02/portrait-of-n00b.html"&gt;posts&lt;/a&gt;
about &lt;a href="http://en.wikipedia.org/wiki/Comment_(computer_programming)"&gt;code commenting&lt;/a&gt;. As is so often the case with topics such as this,
everyone has an opinion and they all seem to be different. It's quite an eye-
opener seeing some of the explanations, justifications, and outright
haranguing â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;There seems to have been a recent &lt;a href="http://blog.uncommons.org/2008/07/25/no-your-code-is-not-so-great-that-it-doesnt-need-comments/"&gt;outbreak&lt;/a&gt; &lt;a href="http://www.carlcrowder.com/blog/?p=34"&gt;in&lt;/a&gt; &lt;a href="http://www.codinghorror.com/blog/archives/001150.html"&gt;blog&lt;/a&gt; &lt;a href="http://steve-yegge.blogspot.com/2008/02/portrait-of-n00b.html"&gt;posts&lt;/a&gt;
about &lt;a href="http://en.wikipedia.org/wiki/Comment_(computer_programming)"&gt;code commenting&lt;/a&gt;. As is so often the case with topics such as this,
everyone has an opinion and they all seem to be different. It's quite an eye-
opener seeing some of the explanations, justifications, and outright
haranguing used in defence of all sorts of weird and wonderful stances.&lt;/p&gt;
&lt;p&gt;I got a wry smile from &lt;a href="http://steve-yegge.blogspot.com/2008/02/portrait-of-n00b.html"&gt;stevey's post&lt;/a&gt;, as I recognise only too well the
tendency to write narrative comments. I'm sure there's plenty of code from
early in my career still floating around in various company codebases where
the code/comment ratio is something embarrassing. I've mostly shaken that off
now, though I sometimes have to fight my inner raconteur when writing
something I think is neat or clever.&lt;/p&gt;
&lt;p&gt;Jeff Atwood, as is so often the case recently, contradicted his &lt;a href="http://www.codinghorror.com/blog/archives/000749.html"&gt;own previous
post&lt;/a&gt; on the matter (replacing the statement "comments can never be
replaced by code alone" with "if your feel your code is too complex to
understand without comments, your code is probably just bad") and endearingly
veered wildly to and fro across a sensible medium&lt;sup id="fnref-1"&gt;&lt;a class="footnote-ref" href="#fn-1"&gt;1&lt;/a&gt;&lt;/sup&gt;, without ever quite
hitting it. Coding Horror, indeed.&lt;/p&gt;
&lt;p&gt;So far, so blah; every time an argument on comments flares up we see the same
thing. Something I've not noticed before though, either because I wasn't
paying attention or because it's a new thing, is a trend amongst the I-don't
-need-comments crowd to advocate very long and detailed method names as an
alternative.&lt;/p&gt;
&lt;p&gt;As neophyte coders we all have it drilled into us that we must use descriptive
names. Programming gospel, as handed down in sacred tomes such as &lt;a href="http://www.amazon.co.uk/Code-Complete-Practical-Handbook-Construction/dp/1556154844"&gt;Code
Complete&lt;/a&gt;, tell us not to use names like 'i' and 'tmp' except in very
specific circumstances (e.g. loop indexes and tempfile handles). And, without
question, this is good solid advice. Take heed, young Padawan, etc.&lt;/p&gt;
&lt;p&gt;But can you take it too far? It's not something I've really come up against,
but it seems to be increasingly popular. &lt;a href="http://blog.uncommons.org/2008/07/25/no-your-code-is-not-so-great-that-it-doesnt-need-comments/"&gt;One response&lt;/a&gt; to Jeff's post
suggested (only in passing, to be fair) using a function name like
&lt;code&gt;newtonRaphsonSquareRoot&lt;/code&gt;. A digg comment (OK, OK, not exactly the fount
of all knowledge) vehemently defended the virtue of the frankly- scary
&lt;code&gt;RunEndOfMonthReportsUnlessTheMonthStartsOnAFridayInWhichCaseRunTheWeekl
yReportInstead&lt;/code&gt; (!)&lt;/p&gt;
&lt;p&gt;The argument is that with names like these, you don't need comments, since it
is perfectly clear what the function does. Is it perfectly clear at the wrong
level though? Function names like this, in my opinion, are so 'clear' that
they leak. These are function names that violate the principle of
&lt;a href="https://en.wikipedia.org/wiki/Encapsulation_(object-oriented_programming)"&gt;encapsulation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If I write a square root function, why do I need to burden all my clients with
information about how I've implemented it? By naming it
&lt;code&gt;newtonRaphsonSquareRoot&lt;/code&gt;, that's exactly what I'm doing. Unless there are
specific performance implications/requirements that favour &lt;a href="http://en.wikipedia.org/wiki/Newton%27s_method"&gt;Newton-
Raphson&lt;/a&gt;, in most cases my clients just want a damn square root calculated
to within a specified tolerance and don't care whether I used Newton's method
or one of the &lt;a href="http://en.wikipedia.org/wiki/Methods_of_computing_square_roots"&gt;army of alternatives&lt;/a&gt;. The implementation should be private
to the method, and no-one else's business.&lt;/p&gt;
&lt;p&gt;Worse, what if a requirements change means a switch to &lt;a href="http://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Reciprocal_of_the_square_root"&gt;Walsh's fast
reciprocal method&lt;/a&gt;? Uh-oh, now my method name is completely misleading, so
I have to change it. Oops, now I have to change all the client code that calls
it! I'd better hope no-one has exposed this with &lt;code&gt;[WebMethodAttribute]&lt;/code&gt; since
I wrote it, otherwise there could be thousands of client applications out
there relying on it. My funky rename refactoring can't save me now.&lt;/p&gt;
&lt;p&gt;If every tiny change propagates through the system requiring hundreds of
source files to change, and possibly external apps as well, you may as well
just copy 'n' paste the code everywhere it's needed and doing away with the
function completely. Hell, who needs abstraction anyway?&lt;/p&gt;
&lt;p&gt;We all do, of course, which is why I think names like this are a bad smell.
The same goes for &lt;code&gt;RunEndOfMonthReportsUnless...&lt;/code&gt; - what happens when the
requirements change? This method name couples the public interface (method
name) to the private implementation, which is exactly what you're not supposed
to do. &lt;code&gt;RunEndOfMonthReports&lt;/code&gt; is probably sufficient. Separate interface and
implementation. This is programming 101, people, it shouldn't be beyond our
grasp.&lt;/p&gt;
&lt;p&gt;The function name is descriptive and clear whilst remaining general enough to
allow an alternative implementation. Anyone who cares enough about the
implementation (for performance reasons, or simply curiosity) can find enough
information in the comment to start their investigation, without having the
details jammed in their face every time they call it.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn-1"&gt;
&lt;p&gt;I agree with &lt;a href="http://blog.uncommons.org/2008/07/25/no-your-code-is-not-so-great-that-it-doesnt-need-comments/"&gt;Dan Dyer&lt;/a&gt; that the best choice is as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt; *  Approximate the square root of n, to within the specified&lt;/span&gt;
&lt;span class="cm"&gt; *  tolerance, using the Newton-Raphson method.&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;approximateSquareRoot&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;tolerance&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;abs&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;tolerance&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a class="footnote-backref" href="#fnref-1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="rants"></category></entry><entry><title>Lexical Closures in C# 3.0</title><link href="http://localhost:8000/lexical-closures-in-c-30.html" rel="alternate"></link><published>2008-07-01T17:49:00+01:00</published><updated>2008-07-01T17:49:00+01:00</updated><author><name>Russell Gray</name></author><id>tag:localhost,2008-07-01:/lexical-closures-in-c-30.html</id><summary type="html">&lt;p&gt;There's a &lt;a href="http://dobbscodetalk.com/index.php?show=The-next-big-programming-language-feature-after-closures.html"&gt;slightly weird article&lt;/a&gt; up on &lt;a href="http://dobbscodetalk.com/"&gt;Dobbs Code Talk&lt;/a&gt; this week,
speculating that aggregate functions are "the next big programming language
feature" after closures. The slight weirdness comes from the fact that both
features have been around for decades, and not just in dusty academic
languages either.&lt;/p&gt;
&lt;p&gt;Still, there's â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;There's a &lt;a href="http://dobbscodetalk.com/index.php?show=The-next-big-programming-language-feature-after-closures.html"&gt;slightly weird article&lt;/a&gt; up on &lt;a href="http://dobbscodetalk.com/"&gt;Dobbs Code Talk&lt;/a&gt; this week,
speculating that aggregate functions are "the next big programming language
feature" after closures. The slight weirdness comes from the fact that both
features have been around for decades, and not just in dusty academic
languages either.&lt;/p&gt;
&lt;p&gt;Still, there's some interesting discussion in the comments about whether
.Net's closures are proper first-class lexically-scoped closures. The answer
is yes - but with a fun twist.&lt;/p&gt;
&lt;p&gt;The twist has been around for a long time - &lt;a href="http://blogs.msdn.com/brada/default.aspx"&gt;Brad Abrams&lt;/a&gt; blogged about it
&lt;a href="http://blogs.msdn.com/brada/archive/2004/08/03/207164.aspx"&gt;way back in 2004&lt;/a&gt;, for instance - but it's probably worth going over it
again, since the recent arrival of LINQ and lambda syntax in C# 3.0 will
presumably lead to more people being bitten by this as the use of closures
becomes more mainstream.&lt;/p&gt;
&lt;p&gt;A key thing to remember is that C# lambdas are just anonymous delegates in
skimpy syntax. Behind the scenes the compiler turns them into classes - if you
were looking at disassembled MSIL you wouldn't be able to tell whether the
code was written with lambda syntax or anonymous delegate syntax. Therefore,
the issue discussed by Brad has not gone anywhere.&lt;/p&gt;
&lt;p&gt;Lets revisit the problem, with a 2008 sheen applied (i.e. I'll use lambda
syntax rather than anonymous delegate syntax). What does the following code
display?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Func&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;[]&lt;/span&gt; &lt;span class="n"&gt;funcs&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Func&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;[&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;funcs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;funcs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you answered something along the lines of "prints the square of every
number between 0 and 9" you'd be...wrong. Really, try it out. See?&lt;/p&gt;
&lt;p&gt;Now, a lexical closure is supposed to capture its environment, meaning
that the lambda stored on the first loop would capture i when i==0, the
second loop would capture i when i==1, and so on. If this happened, then
executing all the lambdas would indeed result in the squares of the
numbers 0-9 being printed. So what gives?&lt;/p&gt;
&lt;p&gt;The problem stems from the fact that the lambda is binding itself to a
variable that is accessible outside the closure, which is being changed
in every iteration of the loop. The closure doesn't capture the value of
i, it captures a reference to i itself, which is mutable.&lt;/p&gt;
&lt;p&gt;You could actually make a case that this is bad code anyway, since it
gives two responsibilities to the loop index - control the loop, and act
as data in the closures. If we were being pedantic, we could split the
responsibilities by creating a new variable, j, to be the closure data
each iteration, and let i concentrate on being an index:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;funcs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Lo and behold, the code now works! Pedantry rules! Take a look with
Reflector or ildasm to see what's going on here. The executive summary
is that the compiler captures the environment (i in the first example, j
in the second) by creating a member variable within the class it
generates for the closure. Previously, since the same instance of i
lived for the entire duration of the loop, only one instance of the
generated class was created and shared. Now, however, a new instance of
the generated class is created in each iteration of the loop (since j is
scoped within the loop body and thus we have a new j every time round).
Thus, the data is not shared and we get the expected output.&lt;/p&gt;
&lt;p&gt;There are two important points to consider here:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The problem goes away if you write code more declaratively. Do away
with the clunky for loop and everything works OK.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Enumerable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It isn't always bad that multiple closures can capture a reference -
since one closure can 'see' updates made to the shared data by another
closure, you could use this as a coordination mechanism.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is not an issue that's going to crop up every day - the example
above is fairly contrived - but knowing about it will save some painful
debugging sessions when inevitably you do run into it. The fix is always
to take a local copy of the mutable data to coerce the compiler into
generating code that creates multiple instances of the class generated
to represent the closure.&lt;/p&gt;
&lt;p&gt;Simple, yes? ;-)&lt;/p&gt;</content></entry><entry><title>Project Euler Problem 5</title><link href="http://localhost:8000/project-euler-problem-5.html" rel="alternate"></link><published>2008-06-10T12:47:00+01:00</published><updated>2008-06-10T12:47:00+01:00</updated><author><name>Russell Gray</name></author><id>tag:localhost,2008-06-10:/project-euler-problem-5.html</id><summary type="html">&lt;p&gt;On to the next Project Euler problem (after a bit of a hiatus)...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;a href="http://projecteuler.net/index.php?section=problems&amp;amp;id=5"&gt;Problem 5&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2520 is the smallest number that can be divided by each of the numbers
from 1 to 10 without any remainder.&lt;/p&gt;
&lt;p&gt;What is the smallest number that is &lt;em&gt;evenly divisible&lt;/em&gt; by all of the
numbers â€¦&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;On to the next Project Euler problem (after a bit of a hiatus)...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;a href="http://projecteuler.net/index.php?section=problems&amp;amp;id=5"&gt;Problem 5&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2520 is the smallest number that can be divided by each of the numbers
from 1 to 10 without any remainder.&lt;/p&gt;
&lt;p&gt;What is the smallest number that is &lt;em&gt;evenly divisible&lt;/em&gt; by all of the
numbers from 1 to 20?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In common with many of the other Euler problems, there's a brute-force
way to solve this, and a clean algorithmic way. And in common with my
other Euler posts so far, I'll start with the brute-force way ;-)&lt;/p&gt;
&lt;p&gt;This problem can be tackled head-on with the following approach: Start
from &lt;em&gt;n&lt;/em&gt;=1 and increment in a loop. Test each value of &lt;em&gt;n&lt;/em&gt; by attempting
to divide it by all numbers &lt;em&gt;m&lt;/em&gt; from 1 to 20. The first number to pass
the test (i.e. &lt;em&gt;n&lt;/em&gt; mod &lt;em&gt;m&lt;/em&gt; is 0 for all values of &lt;em&gt;m&lt;/em&gt;) is the answer.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="nf"&gt;BruteForceSolver&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="n"&gt;Check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;++&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="nf"&gt;Check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This works, but it takes &amp;gt;12 seconds to execute on my PC, so it's not what
you'd call efficient (though it is well within the Euler execution time
guidelines).&lt;/p&gt;
&lt;p&gt;Some speed gains can be achieved by exploiting the information provided in the
question itself. We are told that 2520 is the lowest number evenly divisible
by all numbers from 1 to 10. Since the problem space (1 to 20) includes all
these numbers, the answer must also be evenly divisible by 2520. This allows
much bigger increments each loop - rather than incrementing by 1, why not
increment by 2520? And since the answer must be greater than or equal to 2520,
why not start the loop there instead of 1? Finally, since we already know that
1 to 10 divide evenly into 2520, each inner loop only needs to check numbers
11 to 20.&lt;/p&gt;
&lt;p&gt;That should speed things up a bit:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="nf"&gt;BruteForceSolver&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;2520&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="n"&gt;Check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="m"&gt;2520&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="nf"&gt;Check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And indeed, on my machine this is now down to 150ms or so. It's still
not a very nice way to tackle the problem, though.&lt;/p&gt;
&lt;p&gt;Thinking about it from a different angle yields an altogether smarter
approach. Imagine we are looking for the lowest number evenly divisible
by the numbers 1 to 2.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[1, 2]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Well that's easy; since there are only two numbers we just find the
lowest common multiple (LCM), which in this case is 2 (since 2 % 2 == 0,
and 2 % 1 == 0). If we call this sequence s&lt;sub&gt;1&lt;/sub&gt;, we can say that
&lt;span class="math"&gt;\(LCM(s_1)=2\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;OK, now imagine we are solving the same problem for s&lt;sub&gt;2&lt;/sub&gt;, which contains
the numbers 1 to 3.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[1, 2, 3]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You'll notice that s&lt;sub&gt;2&lt;/sub&gt; contains s&lt;sub&gt;1&lt;/sub&gt; in its entirety. &lt;span class="math"&gt;\(LCM(s_2)\)&lt;/span&gt; must
therefore be a multiple of &lt;span class="math"&gt;\(LCM(s_1)\)&lt;/span&gt;, so we can rewrite s&lt;sub&gt;2&lt;/sub&gt; as
[&lt;span class="math"&gt;\(LCM(s_1)\)&lt;/span&gt;, 3], or [2, 3][2]=2&lt;span class="math"&gt;\(). Now we are down
to two numbers again, so we can calculate the LCM of 2 and 3, which is
6, so $LCM(s_2)=6\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;OK, now we solve the problem for the first 4 numbers (s&lt;sub&gt;3&lt;/sub&gt;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[1, 2, 3, 4]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This sequence contains s&lt;sub&gt;2&lt;/sub&gt;, therefore &lt;span class="math"&gt;\(LCM(s_3)\)&lt;/span&gt; is a multiple of
&lt;span class="math"&gt;\(LCM(s_2)\)&lt;/span&gt;. We can rewrite s&lt;sub&gt;3&lt;/sub&gt; as [&lt;span class="math"&gt;\(LCM(s_2)\)&lt;/span&gt;, 4], or [6, 4]. Thus,
&lt;span class="math"&gt;\(LCM(s_3)=12\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;This can be repeated as many times as necessary. Generally, we have
s&lt;sub&gt;n&lt;/sub&gt; = [&lt;span class="math"&gt;\(LCM(s_{n-1})\)&lt;/span&gt;, &lt;em&gt;n&lt;/em&gt;+1] where &lt;em&gt;n&lt;/em&gt; &amp;gt; 0.&lt;/p&gt;
&lt;p&gt;This looks recursive, but a better way to think of it is as an excellent
example of a fold. A fold is one of the fundamental tools of functional
programming. In fact, it is perhaps the most fundamental, since map,
filter etc can be implemented as right folds&lt;sup id="fnref-1"&gt;&lt;a class="footnote-ref" href="#fn-1"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;I won't inflict my pitiful Photoshop skills on anyone by trying to
graphically represent a fold - try looking at &lt;a href="http://en.wikipedia.org/wiki/Fold_(higher-order_function)"&gt;this Wikipedia
article&lt;/a&gt; if
you want to try and visualise it.&lt;/p&gt;
&lt;p&gt;Broadly, the behaviour of a fold is to apply a combining function to
elements in a list (or other data structure) and accumulate the results.
That's exactly what we want here - our combining function is LCM, and
our accumulating value is the LCM of the whole list. Effectively, for
list s&lt;sub&gt;3&lt;/sub&gt; above, we have&lt;/p&gt;
&lt;div class="math"&gt;$$LCM(s_3)=LCM(LCM(LCM(1,2),3),4)=12$$&lt;/div&gt;
&lt;p&gt;Note how the result of the innermost LCM (applied to values 1 and 2)
becomes a parameter to the next LCM, which in turn becomes a parameter
to the outermost LCM which returns the result we want.&lt;/p&gt;
&lt;p&gt;By using a fold, we can generalise. In Haskell, the whole problem is a
one-liner:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;foldl&lt;/span&gt; &lt;span class="n"&gt;lcm&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The 1 passed in as a parameter represents the terminating value to use
when the end of the list is reached. It is common for this value to be
the first element of the list, so Haskell provides a convenience
function that removes the need to specify it as a parameter:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;foldl1&lt;/span&gt; &lt;span class="n"&gt;lcm&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Not all languages and platforms provide an LCM function right out of the
box, so to take this neat Haskell solution and port it to .Net, the LCM
function needs to be implemented. This is easily done in terms of the
greatest common divisor (GCD) like so:&lt;/p&gt;
&lt;div class="math"&gt;$$LCM(a, b) = \frac{a\cdot b}{GCD(a, b)}$$&lt;/div&gt;
&lt;p&gt;.Net doesn't provide a GCD function either, so I'll implement it using
&lt;a href="http://en.wikipedia.org/wiki/Euclidean_algorithm"&gt;Euclid's Algorithm&lt;/a&gt;
as an extension method on long ints:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="nf"&gt;GCD&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With GCD defined, LCM can be implemented as above:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="nf"&gt;LCM&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GCD&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With this in place, it's a simple matter to use .Net's equivalent of
fold - a method on IEnumerable&amp;lt;T&gt; called Aggregate - to get the
answer&lt;sup id="fnref-2"&gt;&lt;a class="footnote-ref" href="#fn-2"&gt;2&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;LongEnumerable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Aggregate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LCM&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And indeed, the same basic pattern can be used to solve the problem in a
number of languages. In F#, given implementations of LCM and GCD as
above, we have:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nn"&gt;List&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fold_left&lt;/span&gt; &lt;span class="n"&gt;lcm&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And in ruby:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rational&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inject&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lcm&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Given that the right algorithm makes this problem a fairly trivial
expression in all these languages, it's pretty hard to identify which is
the nicest. I think overall I'll give the nod to Haskell, however, for
not making me implement LCM and because I find ruby's 'inject' a less
intuitive function name than foldr (but that's probably because I
learned the technique in Haskell in the first place and am set in my
ways...)&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;[2]: since we know $LCM(s_1&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn-1"&gt;
&lt;p&gt;For example, in F#:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;filter&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="n"&gt;lst&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;List&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fold_right&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;lst&lt;/span&gt; &lt;span class="bp"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;map&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;lst&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;List&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fold_right&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;lst&lt;/span&gt; &lt;span class="bp"&gt;[]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a class="footnote-backref" href="#fnref-1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-2"&gt;
&lt;p&gt;Note that in this code LongEnumerable is just a very simple partial
reimplementation of Enumerable, using longs instead of ints&amp;#160;&lt;a class="footnote-backref" href="#fnref-2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content></entry><entry><title>Project Euler Problem 4: Extra</title><link href="http://localhost:8000/project-euler-problem-4-extra.html" rel="alternate"></link><published>2008-04-22T13:10:00+01:00</published><updated>2008-04-22T13:10:00+01:00</updated><author><name>Russell Gray</name></author><id>tag:localhost,2008-04-22:/project-euler-problem-4-extra.html</id><summary type="html">&lt;p&gt;Couple of things to add to &lt;a href="http://localhost:8000/project-euler-problem-4.html"&gt;yesterday's post&lt;/a&gt; about &lt;a href="http://projecteuler.net/index.php?section=problems&amp;amp;id=4"&gt;problem 4&lt;/a&gt;. As is
so often the case in life, no sooner had I finished the article than I
realised there was an obvious additional step I could make, which I'd somehow
failed to spot.&lt;/p&gt;
&lt;p&gt;Regarding the C# solution, an easy â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Couple of things to add to &lt;a href="http://localhost:8000/project-euler-problem-4.html"&gt;yesterday's post&lt;/a&gt; about &lt;a href="http://projecteuler.net/index.php?section=problems&amp;amp;id=4"&gt;problem 4&lt;/a&gt;. As is
so often the case in life, no sooner had I finished the article than I
realised there was an obvious additional step I could make, which I'd somehow
failed to spot.&lt;/p&gt;
&lt;p&gt;Regarding the C# solution, an easy win having implemented the Reverse
extension method would be to add an IsPalindrome extension to the string class
too. The implementation is straightforward:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="nf"&gt;IsPalindrome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Reverse&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With this done, the where clause in the LINQ query is more readable, and
we have a couple of handy reusable string extensions into the bargain.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;AllProducts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;From&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;To&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;999&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
              &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;IsPalindrome&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
              &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Max&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Also, Sol commented that the C code could have a direct implementation of a
palindrome function, rather than messing about with strrev, since the
implementations are very similar. Whilst this series isn't really focussed on
the performance benefit of this approach, it does also make the code more
expressive, so I'll include it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;strpalindrome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;s1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;s2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;s1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;s2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;s2&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;s2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s1&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;s2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The loop now looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;%d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strpalindrome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;largest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;largest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you are interested in the Project Euler problems but craving more detailed
analysis, &lt;a href="http://joelneely.wordpress.com/"&gt;Joel Neely&lt;/a&gt; is &lt;a href="http://joelneely.wordpress.com/category/project-euler/"&gt;working through&lt;/a&gt; at a similar rate to me, but
focusing his efforts on Scala and studying each problem and its solution in
greater depth rather than flitting from language to language. Highly
recommended.&lt;/p&gt;</content></entry><entry><title>Project Euler Problem 4</title><link href="http://localhost:8000/project-euler-problem-4.html" rel="alternate"></link><published>2008-04-22T00:53:00+01:00</published><updated>2008-04-22T00:53:00+01:00</updated><author><name>Russell Gray</name></author><id>tag:localhost,2008-04-22:/project-euler-problem-4.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;a href="http://projecteuler.net/index.php?section=problems&amp;amp;id=4"&gt;Problem 4&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt; is as follows:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A palindromic number reads the same both ways. The largest palindrome
made from the product of two 2-digit numbers is 9009 = 91 Ã— 99.&lt;/p&gt;
&lt;p&gt;Find the largest palindrome made from the product of two 3-digit
numbers.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Bit of an easy one, this. The approach is pretty â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;a href="http://projecteuler.net/index.php?section=problems&amp;amp;id=4"&gt;Problem 4&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt; is as follows:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A palindromic number reads the same both ways. The largest palindrome
made from the product of two 2-digit numbers is 9009 = 91 Ã— 99.&lt;/p&gt;
&lt;p&gt;Find the largest palindrome made from the product of two 3-digit
numbers.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Bit of an easy one, this. The approach is pretty simple to understand -
first calculate all the products of every pair of numbers between 100
and 999, then filter for the palindromic ones, and finally select the
largest. The only even vaguely tricky bit is determining if the number
is palindromic. The easiest check is to simply convert the number to a
string, and check if the string is equal to itself when reversed.&lt;/p&gt;
&lt;p&gt;To shake myself out of C#/python complacency, I decided to write my
first attempt at this in good old C. I'm a bit rusty so this took a few
goes to get right (the shame).&lt;/p&gt;
&lt;p&gt;First, I need a string reverse function. For those of us that learned to
program when C and C++ were king (before that upstart Java came long and
ousted languages with pointers from classrooms up and down the land),
this is bread and butter.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nf"&gt;strrev&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;s1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;s2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;s1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;s2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;s2&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;s2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;s2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;s2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;s1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;s1&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you can't read that, shame on you, go and pick up a copy of &lt;a href="http://www.amazon.co.uk/C-Programming-Language-2nd/dp/0131103628/"&gt;K&amp;amp;R&lt;/a&gt; and
read it until you weep. In the meantime, basically what happens here is I set
pointers to the start (s1) and end (s2) of the original string (s), then swap
the pointed-to characters using a temporary variable (c) and move both
pointers 1 character towards each other. Repeat until they meet in the middle.&lt;/p&gt;
&lt;p&gt;In this day and age of immutable strings, this old friend now feels a little
weird - although I retain (and eventually return) the original pointer, I have
in fact modified the actual string that was passed in. Contrast this with C's
trendy modern progeny, where you can't change a string at all and have to use
a StringB[uilder|uffer] when mutating strings (unless lousy performance makes
you smile, of course).&lt;/p&gt;
&lt;p&gt;Still, now it is fairly simple to solve the problem. A nested for loop will
let me calculate all the products, and then I just need to convert the results
to strings and do the palindrome test. I keep track of the largest palindromic
number found so far, and print it at the end.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;largest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;s1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;s2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;%d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;strcpy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;strrev&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strcmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;largest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;largest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;largest&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note I'm using the much-maligned strcpy function here (the cause of most
of the buffer overflow attacks that were so endemic a few years back),
but since I completely control the input it's no problem. Also note the
use of sprintf to convert the int to a string, and I have to make a copy
of the resulting string since my strrev function is destructive. The
char arrays are of size 7, since the largest possible product in the
problem space is 999*999=998001 which is 6 digits - plus 1 for the null
terminator. Which I didn't forget about at all in my first attempt at
this, nosirree.&lt;/p&gt;
&lt;p&gt;To make the code a bit more 'modern' I could do the allocation and copy
in the strrev function, so that the passed-in string remains unchanged
and a new string gets returned, but without a garbage collector to rely
on this potentially leads to memory leaks (since strrev allocates the
memory but relies on the caller to free it - easy to forget!). Anyway,
I'm wallowing in nostalgia here so who cares about modern idioms.&lt;/p&gt;
&lt;p&gt;Whilst I chose C for this on a whim, it is (as always) enlightening to
write a little C now and then, as it reminds you of the cost of things
that are often taken for granted. Some people &lt;em&gt;still&lt;/em&gt; don't understand
why a StringBuilder offers better performance (trust me, I have
interviewed more than a few of them), and are happy to write string
manipulation code using immutable strings that results in countless
allocations and destructions taking place, for no justifiable reason.
Writing some string manipulation (or anything else) in C is a nice way
to regain a bit of insight and perspective if you are spoiled by
quad-core PCs and high-falutin' generational garbage collectors and
smartass runtimes that don't let you write past the end of an array.&lt;/p&gt;
&lt;p&gt;So, now we've got a nuts 'n' bolts reference implementation, let's look
at some more exotic approaches.&lt;/p&gt;
&lt;p&gt;As regular readers will have noticed by now, I'm fairly keen on LINQ -
so it should be no surprise that C# is my next port of call. I was
amused to recall that the .Net string class lacks a Reverse method so I
had to write my own for this, about 20 minutes after I finished
pontificating about the clean healthy virtue of doing so in C! (I didn't
plan it this way, honest.)&lt;/p&gt;
&lt;p&gt;There are of course many ways of writing a string reversal routine, but
rather than attempt to mimic the fairly idiomatic C code above, I did
the simple thing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nf"&gt;Reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;ch&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToCharArray&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Since the Array class contains a Reverse method, I can just convert my
string to an array (of chars), reverse that, then create a new string
from it. Done. Things to meditate on regarding this approach:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It relies on a char array. Strings may look like a native type these
    days, but I have to expose their dark and shameful lineage to get
    the job done here.&lt;/li&gt;
&lt;li&gt;The throwback nature of this implementation does not, of course,
    extend as far as modifying the parameter. A new string is returned
    and the original remains intact. The garbage collector will take
    care of deallocation.&lt;/li&gt;
&lt;li&gt;This is an extension method on System.String, so I can use it
    naturally on any string.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Whatever faults it may have, it's definitely easier to read than the C
code, since the syntax is much closer to the problem domain. This is a
recurring theme when looking at expressiveness. The C code has to
specify the entire algorithm for reversing the string, whereas here the
Array.Reverse method allows us to ignore the details of &lt;em&gt;how&lt;/em&gt; the string
is reversed. For the purposes of this problem, we don't really care how
the string is reversed, just that it &lt;em&gt;is&lt;/em&gt; reversed.&lt;/p&gt;
&lt;p&gt;It's still warty, however, in that we have to know to turn the string
into an array first, which may be completely non-intuitive to someone
who's never tangled with C-style strings.&lt;/p&gt;
&lt;p&gt;With this minor omission from the .Net libraries sorted, the problem can
be solved with a single compound LINQ query:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Enumerable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;900&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
             &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Enumerable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1000&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
             &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Reverse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Max&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I think that's pretty concise, and quite readable too. The main thing I
don't like about it is the use of Enumerable.Range, which takes 'start'
and 'count' parameters rather than 'from' and 'to', which would look
more natural in this case.&lt;/p&gt;
&lt;p&gt;Parameters aside, it's interesting to note the relative clumsiness of
the twin calls to Enumerable.Range. Back when looking at &lt;a href="http://localhost:8000/project-euler-problems-1-and-2.html"&gt;problem
1&lt;/a&gt;,
replacing a for loop with a more declarative alternative made the code
considerably more expressive. In this case, however, I don't think it
helps quite so much. Once again, it's to do with the nature of the
problem domain - a nested for loop is quite a natural way to represent
the process of generating the products, so the benefit of a declarative
approach is less marked.&lt;/p&gt;
&lt;p&gt;How to improve it? For fun, lets go the whole hog and make a simple
fluent interface to improve readability of the LINQ query. This is what
we want:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;AllProducts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;From&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;To&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;999&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Reverse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Max&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nifty, huh? Well actually I have my reservations about fluent
interfaces, but it's quite the fashion these days so I thought I'd give
it a chance. The example above is trivial to achieve. On a class called
AllProducts we need a static method called From which acts as a factory
method, and an instance method called To which returns an
&lt;code&gt;IEnumerable&amp;lt;int&amp;gt;&lt;/code&gt; for use in the LINQ query. The class looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AllProducts&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;m_from&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nf"&gt;AllProducts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;@from&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;m_from&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;@from&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;AllProducts&lt;/span&gt; &lt;span class="nf"&gt;From&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;AllProducts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;@from&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;IEnumerable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;To&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;inclusiveTo&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// to is inclusive&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Enumerable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                   &lt;span class="n"&gt;m_from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inclusiveTo&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="n"&gt;m_from&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
               &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Enumerable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inclusiveTo&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
               &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Fluent interfaces are definitely this season's black. I heard about a
guy who wrote a mocking library without using fluent interfaces for
expectations, and 500 angry TDD advocates chased him out of the building
with pitchforks.&lt;/p&gt;
&lt;p&gt;I'm still a bit wary though, tweedy programmer as I am - I just get a
bit nervous about writing hideously contorted classes with a mixture of
static and instance methods, some returning the this ref, some returning
arbitrary IEnumerables, some acting as factories - and all so the
calling code can prance about in a tailored coat and a cool pair of
shades. A noble goal, to be sure, but is the price too high? I guess
we'll know in a year or two when some maintenance programmer has to try
and debug it.&lt;/p&gt;
&lt;p&gt;Enough of the lousy clothes metaphor. To finish up what turned out to be
a longer post than expected, here's an F# solution I hacked together
before getting sidetracked with the whole fluent thing. I read a blog
post
&lt;a href="http://geekswithblogs.net/Erik/archive/2008/02/18/119727.aspx"&gt;here&lt;/a&gt;
about problem 4 (&lt;strong&gt;warning&lt;/strong&gt; - also contains solution to problem 6)
but didn't like it too much. It seems to be quite common when reading
F# code on the web for there to be a reliance on Seq.unfold - I'm not
sure it's always the right tool. Then again, my F# is sketchy at best
for the moment, so maybe I should shut up. For balance, however, this is
my solution without using unfold.&lt;/p&gt;
&lt;p&gt;Note first that F#, as a .Net language, also lacks a built-in way to
reverse strings. The implementation is extremely similar to the C#
approach above:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;rev&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;ch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToCharArray&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;ra&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rev&lt;/span&gt; &lt;span class="n"&gt;ch&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ra&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The actual implementation involves two helpers: a small recursive
function to produce all possible products of the numbers contained in
two lists, and a simple check to see if a string is equal to itself
reversed.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;Euler4&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;rec&lt;/span&gt; &lt;span class="n"&gt;allProducts&lt;/span&gt; &lt;span class="n"&gt;l1&lt;/span&gt; &lt;span class="n"&gt;l2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;mul&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;lst&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
            &lt;span class="nn"&gt;List&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;lst&lt;/span&gt;
        &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;l1&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="bp"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;[]&lt;/span&gt;
        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mul&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="n"&gt;l2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;@&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;allProducts&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;l2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;isPalindrome&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Int32&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_string&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
        &lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rev&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With the plumbing in place, we can use the very groovy forward pipe
operator to chain together some very readable code. The only thing to
note in here is the reverse ordering of the parameters in the call to
compare - this is because we want the results in descending order, so
that the largest is at the head of the list and easily accessible with
List.hd.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;allProducts&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;999&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;List&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt; &lt;span class="n"&gt;isPalindrome&lt;/span&gt;
    &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;List&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;compare&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;List&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hd&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content></entry><entry><title>Test-specific Shims in Production Code</title><link href="http://localhost:8000/test-specific-shims-in-production-code.html" rel="alternate"></link><published>2008-04-21T13:51:00+01:00</published><updated>2008-04-21T13:51:00+01:00</updated><author><name>Russell Gray</name></author><id>tag:localhost,2008-04-21:/test-specific-shims-in-production-code.html</id><summary type="html">&lt;p&gt;We're currently on a fairly major kick to increase automated test coverage of
our software. This doesn't just mean 'get the unit test coverage up to
scratch', it also means we are working towards full end-to-end integration
testing using, amongst other tools, some front-end automation tools such as
&lt;a href="http://en.wikipedia.org/wiki/QuickTest_Professional"&gt;QTP&lt;/a&gt; and â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;We're currently on a fairly major kick to increase automated test coverage of
our software. This doesn't just mean 'get the unit test coverage up to
scratch', it also means we are working towards full end-to-end integration
testing using, amongst other tools, some front-end automation tools such as
&lt;a href="http://en.wikipedia.org/wiki/QuickTest_Professional"&gt;QTP&lt;/a&gt; and &lt;a href="http://selenium.openqa.org/"&gt;Selenium&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Of course, nothing is ever easy when trying to polish away the tarnish
of ancient code. One particular problem we face regularly is patching up
code that breaks the fragile expectations of some of these automation
tools.&lt;/p&gt;
&lt;p&gt;Some of our applications - including the one &lt;a href="http://localhost:8000/pg-wodehouse-method-of-refactoring.html"&gt;I am working to refactor&lt;/a&gt; -
contain UI widgets that use a lot of custom painting routines and conceal data
pretty well. One widget, for instance, needs to display data with a fast
refresh rate and so uses a &lt;a href="http://en.wikipedia.org/wiki/Double_buffering#Double_Buffering_in_Computer_Graphics"&gt;double-buffered&lt;/a&gt; approach to avoid flicker. The
data it displays, however, is not stored anywhere; it is discarded as soon as
it is rendered. And since the whole widget view is rendered as a bitmap and
blitted to screen, there's no convenient hierarchy of panels, labels, text
boxes, or any other standard controls.&lt;/p&gt;
&lt;p&gt;This, the Automated QA folks tell me, causes a problem since QTP mainly works
by reflecting on properties exposed by controls to get at their data. So, if
QTP wants to read some data from a text box, it accesses the Text property of
that text box. Simple. But this particular widget doesn't have the equivalent
of a Text property.&lt;/p&gt;
&lt;p&gt;This isn't really an oversight from a purely functional point of view, since
no part of the actual application code ever needs to get data from the widget
- it's a display mechanism only, not an interactive widget like a text box.
Data is received from a web service, processed a bit, and dumped into the
widget. The widget is the last object to do anything with the data - no other
part of the app ever needs it again.&lt;/p&gt;
&lt;p&gt;Since there are no properties on the widget exposing the data, QTP can't get
at it.&lt;/p&gt;
&lt;p&gt;Of course, there are ways to keep QTP happy. We can add a few properties to
the widget and keep some data around in member variables, or we can write some
extensions for QTP that allow it to access some of the widget's internals. The
second way is probably the 'right' way since it keeps test-related code
external to the application code - but it's more time-consuming, and also has
a training cost since most developers aren't going to be familiar with QTP's
API.&lt;/p&gt;
&lt;p&gt;This leaves the first option. Traditionally I've always been a bit wary of
having what is effectively test code (since it only exists for testing
purposes) deployed with production code. Furthermore, doesn't it undermine the
tests themselves, since they are dependent on code that never gets executed in
production?&lt;/p&gt;
&lt;p&gt;On the other hand, in some instances it may be the more pragmatic thing to do.
It's difficult to justify spending a day or two writing a few hundred lines of
QTP extension code when the same effect can be garnered by adding a single
read-only property. It still doesn't quite sit right for me though, and I
can't find much in the way of authoritative literature that argues one way or
the other.&lt;/p&gt;</content></entry><entry><title>Bash History Spelunking</title><link href="http://localhost:8000/bash-history-spelunking.html" rel="alternate"></link><published>2008-04-14T14:50:00+01:00</published><updated>2008-04-14T14:50:00+01:00</updated><author><name>Russell Gray</name></author><id>tag:localhost,2008-04-14:/bash-history-spelunking.html</id><summary type="html">&lt;p&gt;Learned from Weiqi, who learned from &lt;a href="http://blog.kagesenshi.org/2008/04/me-me.html"&gt;KageSenshi&lt;/a&gt;, about a &lt;a href="http://planet.fedoraproject.org/"&gt;Fedora
Planet&lt;/a&gt; shell history meme - post the results of running the following
command on your linux box:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;history&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;&amp;#39;{a[$2]++ } END{for(i in a){print a[i] &amp;quot; &amp;quot; i}}&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sort -rn &lt;span class="p"&gt;|&lt;/span&gt; head
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I won't bother repeating the inevitable warning about â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Learned from Weiqi, who learned from &lt;a href="http://blog.kagesenshi.org/2008/04/me-me.html"&gt;KageSenshi&lt;/a&gt;, about a &lt;a href="http://planet.fedoraproject.org/"&gt;Fedora
Planet&lt;/a&gt; shell history meme - post the results of running the following
command on your linux box:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;history&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;&amp;#39;{a[$2]++ } END{for(i in a){print a[i] &amp;quot; &amp;quot; i}}&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sort -rn &lt;span class="p"&gt;|&lt;/span&gt; head
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I won't bother repeating the inevitable warning about the dangers of executing
random shell scripts you find on the Internet, because I'm lazy and mean.
Anyway, here's the results from my webhosting box:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="m"&gt;231&lt;/span&gt; ll
&lt;span class="m"&gt;171&lt;/span&gt; vim
&lt;span class="m"&gt;132&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt;
&lt;span class="m"&gt;50&lt;/span&gt; screen
&lt;span class="m"&gt;43&lt;/span&gt; cat
&lt;span class="m"&gt;39&lt;/span&gt; tail
&lt;span class="m"&gt;34&lt;/span&gt; ls
&lt;span class="m"&gt;34&lt;/span&gt; cls
&lt;span class="m"&gt;32&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;span class="m"&gt;31&lt;/span&gt; wget
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;'ll' is an alias for 'ls -l', and 'cls' an alias for 'clear'. No real
surprises otherwise - I use vim for development over ssh, I tail my logs
occasionally, and live in GNU Screen.&lt;/p&gt;
&lt;p&gt;Here's the output from my home box:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="m"&gt;254&lt;/span&gt; ll
&lt;span class="m"&gt;181&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt;
&lt;span class="m"&gt;148&lt;/span&gt; sudo
&lt;span class="m"&gt;123&lt;/span&gt; rm
&lt;span class="m"&gt;123&lt;/span&gt; ffmpeg
&lt;span class="m"&gt;86&lt;/span&gt; screen
&lt;span class="m"&gt;83&lt;/span&gt; ls
&lt;span class="m"&gt;75&lt;/span&gt; cls
&lt;span class="m"&gt;72&lt;/span&gt; vim
&lt;span class="m"&gt;60&lt;/span&gt; find
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Quite similar actually, guess I'm set in my ways. The ffmpeg count is a bit of
an anomaly, since I used it a lot recently to re-encode a bunch of
&lt;a href="http://en.wikipedia.org/wiki/Futurama"&gt;Futurama&lt;/a&gt; rips for my mobile.&lt;/p&gt;
&lt;p&gt;Not sure what to do with this remarkable intel, however. Perhaps I'll use the
data to generate an &lt;a href="http://blog.docuverse.com/2011/07/29/what-is-identicon/"&gt;Identicon&lt;/a&gt; and use it as a favicon? Or, perhaps not.&lt;/p&gt;</content></entry><entry><title>Evil = Important. Apparently.</title><link href="http://localhost:8000/evil-important-apparently.html" rel="alternate"></link><published>2008-04-08T16:34:00+01:00</published><updated>2008-04-08T16:34:00+01:00</updated><author><name>Russell Gray</name></author><id>tag:localhost,2008-04-08:/evil-important-apparently.html</id><summary type="html">&lt;p&gt;OK, I know I shouldn't even &lt;em&gt;acknowledge&lt;/em&gt; spam blogs, but this one amused me.
Some filthy credit-crunch link bait site took an extract from my &lt;a href="http://localhost:8000/project-euler-problem-3.html"&gt;previous
post&lt;/a&gt; (this is obviously what happens when you say the phrase 'credit card'
... oops) and ran it though an automated word substitution program. The â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;OK, I know I shouldn't even &lt;em&gt;acknowledge&lt;/em&gt; spam blogs, but this one amused me.
Some filthy credit-crunch link bait site took an extract from my &lt;a href="http://localhost:8000/project-euler-problem-3.html"&gt;previous
post&lt;/a&gt; (this is obviously what happens when you say the phrase 'credit card'
... oops) and ran it though an automated word substitution program. The result
is fascinating. It turned this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;â€¦ you buy something from Amazon, you are protected by the fact that
evil black-hats can't find the prime factors of your encryption key
fast enough to steal your credit card number (OK, bit of a
generalisation, but that's the gist). â€¦&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;into this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;â€¦ you take something from Amazon, you are secure by the fact that
important black-hats can't connexion the matureness factors of your
writing key alacritous adequacy to advise your assign calculate sort
(OK, discernment of a generalisation, but that's the gist). â€¦&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let's review the highlights. 'Buy' replaced with 'take', 'evil' replaced
with 'important', 'steal' replaced with 'advise'? Someone's book of
synonyms is bound in human hide with a skull on the front.&lt;/p&gt;</content></entry><entry><title>Project Euler Problem 3</title><link href="http://localhost:8000/project-euler-problem-3.html" rel="alternate"></link><published>2008-04-07T13:38:00+01:00</published><updated>2008-04-07T13:38:00+01:00</updated><author><name>Russell Gray</name></author><id>tag:localhost,2008-04-07:/project-euler-problem-3.html</id><summary type="html">&lt;p&gt;Next up in the list of Project Euler problems is this one:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;a href="http://projecteuler.net/index.php?section=problems&amp;amp;id=3"&gt;Problem 3&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The prime factors of 13195 are 5, 7, 13 and 29.&lt;/p&gt;
&lt;p&gt;What is the largest prime factor of the number 600851475143?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This, obviously, is a factorisation problem. There is a colossal amount of
material on the â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Next up in the list of Project Euler problems is this one:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;a href="http://projecteuler.net/index.php?section=problems&amp;amp;id=3"&gt;Problem 3&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The prime factors of 13195 are 5, 7, 13 and 29.&lt;/p&gt;
&lt;p&gt;What is the largest prime factor of the number 600851475143?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This, obviously, is a factorisation problem. There is a colossal amount of
material on the web for dealing with prime factorisation - a simple &lt;a href="http://www.google.co.uk/search?q=prime+factorization"&gt;google
search&lt;/a&gt; pulls up lots of information. Prime factorisation (and the
difficulty of doing it with sufficiently large numbers) is at the heart of the
cryptographic methods we currently use on the internet - every time you buy
something from Amazon, you are protected by the fact that evil black-hats
can't find the prime factors of your encryption key fast enough to steal your
credit card number (OK, bit of a generalisation, but that's the gist).&lt;/p&gt;
&lt;p&gt;One of the key phrases in the above paragraph is 'sufficiently large
numbers'. For a computer, 600851475143 is not a particularly big number,
so this problem can be brute-forced fairly easily. Of course, not all
brute force approaches are created equal. The most naive algorithm would
be something along the lines of a three-pass sweep - firstly test &lt;em&gt;every
single number&lt;/em&gt; between 2 and 600851475143 to see if it divides cleanly
into 600851475143 (pass 1); then test each factor from pass 1 to see if
it is prime (pass 2); and finally take the biggest of the pass 2 numbers
to get your answer (pass 3).&lt;/p&gt;
&lt;p&gt;This would work, but it sucks.&lt;/p&gt;
&lt;p&gt;Fortunately, it's easy to optimise. Let the prime factors of our number
N be f&lt;sub&gt;1&lt;/sub&gt;, f&lt;sub&gt;2&lt;/sub&gt; ... f&lt;sub&gt;n&lt;/sub&gt;. If I start with the lowest prime number and
work up from there looking for a factor, I know that the first factor I
find will be prime (since if it wasn't prime, it would have factors of
its own, which by definition would also be factors of our target
number). This number is f&lt;sub&gt;1&lt;/sub&gt;. I can divide the target number by f&lt;sub&gt;1&lt;/sub&gt; and
then factorise the result to find f&lt;sub&gt;2&lt;/sub&gt;. Continuing this process will
result in a list of prime factors, and then it's simply a case of
selecting the largest.&lt;/p&gt;
&lt;p&gt;I can optimise further by not resetting the factor to the lowest prime
number each time - since having found f&lt;sub&gt;1&lt;/sub&gt; I know that there aren't any
smaller factors, so I don't have to waste time looking for them. Here's
the implementation in python:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;primeFactors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;factor&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;factors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;factor&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;factor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;factor&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="n"&gt;factors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;factor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;factor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;factors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;primeFactors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;factor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;factor&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;factors&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;primeFactors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;600851475143&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that in the recursive call the current factor is retained, so that
the code doesn't repeat itself.&lt;/p&gt;
&lt;p&gt;This executes pretty quickly, but it could be better. For a start, since
600851475143 is odd there's no need to start with the only even prime
number (2). Instead, I could just start at 3, and in the while loop skip
over even numbers. This would cut the number of tested numbers in half.&lt;/p&gt;
&lt;p&gt;A more efficient trial division approach, however, would be to generate
a list of primes, divide 600851475143 by each prime to find the prime
factors, then simply select the largest. To use this solution, a prime
number generator is needed.&lt;/p&gt;
&lt;p&gt;This is an interesting diversion - I've peeked at some of the other
Project Euler problems and know that prime numbers will pop up again, so
it may prove useful to have a generator handy for when I get to those.
Some languages, like Ruby, have library functions that can give you
primes, but other languages don't. If you're not interested in
generating primes and just want to know the answer to problem 3, execute
the code above and you're free to get down from the table.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;A Random Walk Off-Topic&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The simplest way to generate primes is known as the &lt;a href="http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes"&gt;Sieve of
Eratosthenes&lt;/a&gt; after
the Greek mathematician who invented it. In principle it's
straightforward - take a list of all integers up to an arbitrary limit,
then starting from 2 (the smallest prime), mark all the numbers that are
multiples of 2. Then move to the next unmarked number (i.e. 3) and mark
all the multiples of 3. Then you move to the next unmarked number (5,
since 4 was marked as a multiple of 2) and mark all multiples. And so
on, until you get to the end of your list. Whatever numbers remain
unmarked are all the primes up to your arbitrary limit.&lt;/p&gt;
&lt;p&gt;.Net lacks a built-in prime generator, so to demonstrate the algorithm
I'll create a simple C# implementation. The list of numbers is
represented as an array of booleans, all set to true by default except
indexes 0 and 1 (since we aren't interested in evaluating those numbers
as prime).&lt;/p&gt;
&lt;p&gt;The other requirement for a funky contemporary .Net implementation is,
of course, to expose the results with IEnumerable. This achieves two
things - firstly, it lets the sieve class control enumeration and thus
skip over the marked numbers (making the calling code cleaner), and
secondly it lets me use LINQ to query it.&lt;/p&gt;
&lt;p&gt;So, here's the code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SieveOfEratosthenes&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;m_numbers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;SieveOfEratosthenes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;m_numbers&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;limit&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;m_numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LongLength&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;++&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;m_numbers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FindIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m_numbers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;m_numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;m_numbers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;IEnumerable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Primes&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;m_numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LongLength&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m_numbers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Fairly straightforward. Basically, I start by marking 2 as prime. Then,
an inner loop sets all multiples of 2 to false, since no (other) even
numbers are prime. Each time round the loop, we find the next true
element of the array (which will have a prime index), and mark all
multiples false as per the description above. The loop terminates when
FindIndex fails to find any more true elements.&lt;/p&gt;
&lt;p&gt;This results in an array where the only elements with a value of true
are those with a prime index. This makes the actual IEnumerable
generator very easy to write - it yield returns the index whenever it
finds a true element.&lt;/p&gt;
&lt;p&gt;There's a problem with this code, however, that makes it unusable with
Euler problem 3 (at least in .Net - hence why I called it a 'diversion'
earlier, rather than an alternative solution). In .Net, you can't create
an array with 600851475143 elements, since an array with 600851475143
elements is way above the maximum array size limit of 2GB. Even if each
element is only a single byte, 600851475143 bytes is about 560GB.&lt;/p&gt;
&lt;p&gt;Therefore, you can't create a sieve big enough to solve the problem.&lt;/p&gt;
&lt;p&gt;When using trial division it seems that it is enough to only generate
primes up to the square root of N, though there are cases when this is
not true (e.g. where N=15, sqrt(N) = \~3.873, but the largest prime
factor of 15 is 5), and I don't have the maths (yet!) to know how big a
fudge-factor is needed. I've seen a solution on the Project Euler forum
that generates primes up to sqrt(N) + 10, which solves the example of
N=15 above, but does it solve ALL cases? Another approach might be to
generate the list of primes such that the largest prime in the list is
the first prime &amp;gt; sqrt(N) - but now I'm completely guessing.&lt;/p&gt;
&lt;p&gt;Still, for numbers that fit inside the 2GB limit, we can find the
largest factor easily.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;sieve&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;SieveOfEratosthenes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;15&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now I have my IEnumerable sieve, I can craft a LINQ query to find the
largest factor. All I need to do is filter my list of primes for those
which divide directly into 15 and call the Max() method:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sieve&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Primes&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Max&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Done! And I have a handy reusable prime generator for later on.&lt;/p&gt;</content></entry><entry><title>The Lightbulb Moment</title><link href="http://localhost:8000/lightbulb-moment.html" rel="alternate"></link><published>2008-03-25T18:06:00+00:00</published><updated>2008-03-25T18:06:00+00:00</updated><author><name>Russell Gray</name></author><id>tag:localhost,2008-03-25:/lightbulb-moment.html</id><summary type="html">&lt;p&gt;Weiqi Gao has a post up today discussing the trials of grokking
&lt;a href="http://www.scala-lang.org/"&gt;Scala&lt;/a&gt;. Scala is a language I want to take a much closer look at later
this year, since I want to become current on the &lt;a href="http://en.wikipedia.org/wiki/Java_Virtual_Machine"&gt;JVM&lt;/a&gt; again (having not
been on talking terms with it since using J2SE â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Weiqi Gao has a post up today discussing the trials of grokking
&lt;a href="http://www.scala-lang.org/"&gt;Scala&lt;/a&gt;. Scala is a language I want to take a much closer look at later
this year, since I want to become current on the &lt;a href="http://en.wikipedia.org/wiki/Java_Virtual_Machine"&gt;JVM&lt;/a&gt; again (having not
been on talking terms with it since using J2SE 1.4 around the summer of 2003)
without being particularly keen on tangling with the Java language itself.&lt;/p&gt;
&lt;p&gt;One of the key features of Scala is the functional programming style it
brings to the JVM. It's actually quite common to use certain functional
idioms in Java - e.g. passing around a function as a parameter - but the
syntax is clunky and verbose (unless and until closures get confirmed in
1.7, that is, and maybe even then).&lt;/p&gt;
&lt;p&gt;For example, take a look at this very simple idiomatic code for spinning
off a thread to perform an expensive operation:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Runnable&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;someObj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;doExpensiveOperation&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}).&lt;/span&gt;&lt;span class="na"&gt;start&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now that's not the most hideous code I've ever seen, but it's a
bit...wordy. Compare it to this equivalent implementation in Java's
closest mainstream relative, C#:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;someObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DoExpensiveOperation&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="n"&gt;Start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I much prefer this syntax, even taking into account the throwaway lambda
parameter that's only there to satisfy the ThreadStart signature. The
Scala syntax is even nicer, however:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;spawn&lt;/span&gt;&lt;span class="o"&gt;({&lt;/span&gt; &lt;span class="n"&gt;someObj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doSomethingExpensive&lt;/span&gt; &lt;span class="o"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is the sort of thing that piques my interest about the language -
expressive syntax and a very funky concurrency model will get my
attention, &lt;em&gt;especially&lt;/em&gt; when running on something as mainstream as the
JVM and with full interoperability with the frankly staggeringly-vast
Java library ecosystem. I like F# on the
&lt;a href="http://en.wikipedia.org/wiki/Common_Language_Runtime"&gt;CLR&lt;/a&gt; for similar
reasons.&lt;/p&gt;
&lt;p&gt;But I digress; what I wanted to talk about was a point made by Weiqi,
when discussing the pattern-matching capabilities of Scala:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Pattern matching in Scala is exactly the point at which I would spend
time trying to understand it, trying to master it, trying to learn to
use it. I understand the syntax. I understand the explanation that the
speakers in presentations gave. I do get to the part where I say "This
is cool." But I never get to the point where I would see a problem and
say "This problem is best solved with pattern matching, let me fire up
Scala and code the solution."&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This strikes a chord for me, as I have gone through that stage once or
twice myself with other features in other languages and yet can't quite
put my finger on how I get past it. I don't think it's something you
consciously do - it's just something you keep grafting away at until
suddenly you realise that the technique, whatever it is, has become part
of your armoury.&lt;/p&gt;
&lt;p&gt;Closures are an obvious example I can think of in my own background. I
was raised as a straight-down-the-middle C++ man, way back in the
early/mid-90s, cutting my teeth on Borland Turbo C++ 3 on Windows 3.1.
When I first started to play with functional languages it took a long
time for me to 'get it', and even when I understood what a closure was
after a couple of weekends hacking around in OCaml, I couldn't envisage
when I'd ever need one.&lt;/p&gt;
&lt;p&gt;Soon after, whilst working on a Konfabulator widget in javascript, I
noticed I was using them all the time. I suddenly had much more insight
into what ruby blocks were doing. It wasn't so much that I noticed the
lights go on - &lt;em&gt;they'd been on for some time&lt;/em&gt; and I hadn't realised.&lt;/p&gt;
&lt;p&gt;People commonly refer to the 'lightbulb moment' or 'the lights went on'
as being the point where a flash of inspiration hits and everything
suddenly makes sense. I don't like this metaphor. If I need to go to the
bathroom in the middle of the night, when the lights go on I squint in
pain and stagger around just as blindly as I did before. But then I
acclimatise, and all becomes clear. And so it is, I think, with learning
alien concepts - you need a bit of time to adjust to the dazzling light.&lt;/p&gt;</content></entry><entry><title>Project Euler Problems 1 and 2</title><link href="http://localhost:8000/project-euler-problems-1-and-2.html" rel="alternate"></link><published>2008-03-22T17:33:00+00:00</published><updated>2008-03-22T17:33:00+00:00</updated><author><name>Russell Gray</name></author><id>tag:localhost,2008-03-22:/project-euler-problems-1-and-2.html</id><summary type="html">&lt;p&gt;Browsing through &lt;a href="http://natehoellein.blogspot.com/"&gt;Nate Hoellein's blog&lt;/a&gt; recently led me to &lt;a href="http://projecteuler.net/"&gt;Project
Euler&lt;/a&gt;. This is a problem - I have a horrendous feeling I'm about to get
addicted to it, to the cost of just about everything else that normally
occupies my free time. Ack.&lt;/p&gt;
&lt;p&gt;Still, at least it provides some blogging material â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Browsing through &lt;a href="http://natehoellein.blogspot.com/"&gt;Nate Hoellein's blog&lt;/a&gt; recently led me to &lt;a href="http://projecteuler.net/"&gt;Project
Euler&lt;/a&gt;. This is a problem - I have a horrendous feeling I'm about to get
addicted to it, to the cost of just about everything else that normally
occupies my free time. Ack.&lt;/p&gt;
&lt;p&gt;Still, at least it provides some blogging material. I'm going to start working
my way through the list, and try to create idiomatic solutions in a number of
languages. I won't always look for the most efficient solution, since I'm also
interested in expressiveness (see &lt;a href="http://localhost:8000/fab-fib.html"&gt;here&lt;/a&gt; and &lt;a href="http://localhost:8000/code-can-be-beautiful.html"&gt;here&lt;/a&gt; for previous posts
on the subject).&lt;/p&gt;
&lt;p&gt;To start with, here's some code and thoughts for problems 1 and 2.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://projecteuler.net/index.php?section=problems&amp;amp;id=1"&gt;&lt;strong&gt;&lt;em&gt;Problem 1&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Add all the natural numbers below 1000 that are multiples of 3 or 5.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is generally regarded as the easiest Euler problem, so shouldn't present
too many problems. Mainstream software development is still dominated by
imperative languages and styles, so the most recognisable solution to this
would be a straightforward for-loop. Here is an imperative C# solution:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="m"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;||&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Simple enough, but as with all for-loops the guts are a little too visible. I
have to explicitly declare and increment an accumulator variable as well as
the loop counter. A functional style (Haskell in this case) allows a more
declarative solution:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;filter&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;mod&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;mod&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;999&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Or, with list comprehensions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;sum&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;999&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;mod&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;mod&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In both cases, the loop is replaced by a list generated from Haskell's range
operator. [1..999] creates a list containing every integer between 1 and 999
inclusive. The modulo test is basically the same, though Haskell lacks a
modulo operator (% in most C-family languages) so the mod function is used
instead.&lt;/p&gt;
&lt;p&gt;Just for fun, here's an F# solution too:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;List&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fold_left&lt;/span&gt; &lt;span class="o"&gt;(+)&lt;/span&gt; &lt;span class="mi"&gt;0l&lt;/span&gt;&lt;span class="n"&gt;et&lt;/span&gt; &lt;span class="n"&gt;mod35&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0L&lt;/span&gt;&lt;span class="n"&gt;ist&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt; &lt;span class="n"&gt;mod35&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;999&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This could be compressed into a one-liner like the Haskell solutions, but it
would be a bit long for my taste. Also note F# is slightly hamstrung by the
lack of a built-in sum function, so I have to define my own using fold.
Another F# solution is &lt;a href="http://blogs.msdn.com/chrsmith/archive/2007/10/23/Project-Euler-in-F_2300_-_2D00_-Problem-1.aspx"&gt;here&lt;/a&gt;, but I prefer mine. There's a very nice
snippet in the comments of that page, though, which I like even more:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nn"&gt;Seq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fold1&lt;/span&gt; &lt;span class="o"&gt;(+)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;999&lt;/span&gt; &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Interestingly, C# is gaining some fairly powerful functional techniques
lately, in particular LINQ. I can use the new Enumerable class to mimic range
syntax and filter functionality from other languages, and lambdas to keep the
code concise.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Enumerable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;999&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;||&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Sum&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note the similarity between F#/Haskell's lambda syntax and that of C#. It's
very cool that a mainstream C-derivative language is getting this sort of
syntax added to it.&lt;/p&gt;
&lt;p&gt;Alternatively, I could use LINQ query expressions for a different
approach:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Enumerable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;999&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
           &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;||&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
           &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sum&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Fun!&lt;/p&gt;
&lt;p&gt;It should be noted that all the Project Euler problems I've seen so far have
mathematical solutions, meaning if you are able to classify the problem
correctly it is straightforward to work out the answer with pen and paper. In
this case, the problem is based around an arithmetic progression, and there
are powerful formulae for reasoning about those. If you're interested, check
out the &lt;a href="http://projecteuler.net/index.php?section=forum&amp;amp;id=1"&gt;forum&lt;/a&gt; for problem 1.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://projecteuler.net/index.php?section=problems&amp;amp;id=2"&gt;&lt;strong&gt;&lt;em&gt;Problem 2&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Each new term in the Fibonacci sequence is generated by adding the
previous two terms. By starting with 1 and 2, the first 10 terms will
be:&lt;/p&gt;
&lt;p&gt;1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...&lt;/p&gt;
&lt;p&gt;Find the sum of all the even-valued terms in the sequence which do not
exceed four million.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ooh, Fibonacci. I've &lt;a href="http://localhost:8000/fab-fib.html"&gt;been here before&lt;/a&gt;. Using the Haskell code from that
post makes problem 2 a snip:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;fib&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="kt"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="kt"&gt;:&lt;/span&gt; &lt;span class="n"&gt;zipWith&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;filter&lt;/span&gt; &lt;span class="n"&gt;even&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;takeWhile&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;4000000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Given the lazy Fibonacci generator in the first line, this just uses standard
Haskell functions from the Prelude to do all the work - reading right to left,
takeWhile pulls data from the fib sequence until the test fails (i.e. we've
reached 4,000,000), filter even does exactly what it says on the tin, and sum
does the business on the result.&lt;/p&gt;
&lt;p&gt;C# could solve problem 1 very neatly - can it keep up the pace in problem 2?
Actually, yes it can, after a fashion. The lazy Fibonacci generator can be
implemented using the yield statement added in C# 2.0. This is much more
efficient than the naive recursive solution I looked at in my previous post
about Fibonacci sequences. Once I have the generator, the LINQ statement is
very concise and quite similar to the Haskell code - C# 3.0 even has
TakeWhile!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;IEnumerable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Fibs&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;Fibs&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;TakeWhile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="m"&gt;4000000&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Sum&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The more I use C# 3.0, the more I like it - there's quite a bit of power in
there.&lt;/p&gt;
&lt;p&gt;As with problem 1, there are some fascinating mathematical tricks that can be
utilised when solving problem 2, and I recommend you check out the
&lt;a href="http://projecteuler.net/index.php?section=forum&amp;amp;id=2"&gt;forum&lt;/a&gt;. It's particularly cool to see how the Golden Ratio can be brought
into play when working with Fibonacci sequences - I had no idea these
techniques existed. So much to learn!&lt;/p&gt;</content></entry><entry><title>The P.G. Wodehouse Method Of Refactoring</title><link href="http://localhost:8000/pg-wodehouse-method-of-refactoring.html" rel="alternate"></link><published>2008-03-21T23:01:00+00:00</published><updated>2008-03-21T23:01:00+00:00</updated><author><name>Russell Gray</name></author><id>tag:localhost,2008-03-21:/pg-wodehouse-method-of-refactoring.html</id><summary type="html">&lt;p&gt;I am much given to ruminating on refactoring at the moment, as one of my
current projects is a major overhaul of a fairly large (&amp;gt;31,000 lines)
application which has exactly the kind of dotted history any experienced
developer has learned to fear - written by many different people, including â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;I am much given to ruminating on refactoring at the moment, as one of my
current projects is a major overhaul of a fairly large (&amp;gt;31,000 lines)
application which has exactly the kind of dotted history any experienced
developer has learned to fear - written by many different people, including
short-term contractors, at a time in the company's life when first-mover
advantage was significantly more important than coding best-practice, and
without any consistent steer on the subjects of structure, coding conventions,
unit tests, and so on.&lt;/p&gt;
&lt;p&gt;In other words, here be dragons.&lt;/p&gt;
&lt;p&gt;In fairness, the application &lt;em&gt;works&lt;/em&gt; and has been a critical part of a company
that has gone from nothing to market-leading multinational in 7 years, so it
has certainly pulled its weight. It is in desperate need of a spring-clean
though, and my team volunteered to spend 3 months evicting the cobwebs and
polishing the brasswork.&lt;/p&gt;
&lt;p&gt;Yes, &lt;em&gt;volunteered&lt;/em&gt; - it's a fascinating challenge, though perhaps not
something you'd want to make a career of.&lt;/p&gt;
&lt;p&gt;Now, the first mistake to avoid here is the compulsion to throw it away and
rewrite from scratch. So often when confronted with a vast seething moiling
spiritless mass of code a developer throws his hands into the air and declares
it a lost cause. &lt;strong&gt;How seductive is the thought that 31,000 lines of code
could be thrown away and replaced with ~15,000 lines of clean, well-designed,
&lt;a href="http://localhost:8000/code-can-be-beautiful.html"&gt;beautiful code&lt;/a&gt;?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Sadly, that's often a path to disaster. It's almost a rule of the game.
&lt;a href="http://www.jwz.org/"&gt;jwz&lt;/a&gt; left Netscape because he knew their decision to rewrite from scratch
was doomed. &lt;a href="http://www.joelonsoftware.com/"&gt;Joel Spolsky&lt;/a&gt; wrote a &lt;a href="http://www.joelonsoftware.com/articles/fog0000000069.html"&gt;rant&lt;/a&gt; about the same decision - in
fact, the Netscape rewrite is commonly cited as a major factor in Netscape
losing the first browser war.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The problem is that warty old code isn't always just warty - it's &lt;em&gt;battle-
scarred&lt;/em&gt;.&lt;/strong&gt; It has years of tweaks and bug-fixes in there to deal with all
sorts of edge conditions and obscure environments. Throw that out and replace
it with pristine new code, and you'll often find that a load of very old
issues suddenly come back to haunt you.&lt;/p&gt;
&lt;p&gt;So, a total rewrite is out. This means working with the old code, and finding
ways to wrestle it into shape. Naturally, &lt;em&gt;&lt;a href="http://www.amazon.co.uk/Working-Effectively-Legacy-Robert-Martin/dp/0131177052"&gt;Working Effectively With Legacy
Code&lt;/a&gt;&lt;/em&gt; now has an even more firmly established place on my 'critical books'
bookshelf than it did before.&lt;/p&gt;
&lt;p&gt;Inspiration came from a less well-known book, however. Buried in Chapter 10 of
&lt;em&gt;&lt;a href="http://www.amazon.co.uk/Code-Reading-Perspective-Effective-Development/dp/0201799405"&gt;Code Reading&lt;/a&gt;&lt;/em&gt; is a single paragraph suggesting that it can be useful
when working with unfamiliar code to paste it into a word processor and zoom
out, getting a 'bird's eye' view.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;One other interesting way to look at a whole lot of source code
quickly under Windows is to load it into Microsoft Word and then set
the zoom factor to 10%. Each page of code will appear at about the
size of a postage stamp, and you can get a surprising amount of
information about the code's structure from the shape of the lines.&lt;/p&gt;
&lt;p&gt;&lt;cite&gt;(Spinellis, 2003)&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The idea is that this lets you immediately identify potential trouble spots -
if you see pages where the code is all bunched up on the right, it indicates
massive nesting and over-long functions. If you see heavy congestion, it
indicates dense code. It's also easy to spot giant switch statements and other
crimes against humanity.&lt;/p&gt;
&lt;p&gt;Of course, you don't actually need MS Word to do this - the Print Preview in
Open Office is more than sufficient, and no doubt most office suites can do
the same.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image" src="http://localhost:8000/images/print-preview-birds-eye-view.png"&gt;&lt;/p&gt;
&lt;p&gt;This 50,000ft view could be a useful tool in tracking progress. I mean sure,
we can have our build system spit out &lt;a href="http://en.wikipedia.org/wiki/Cyclomatic_complexity"&gt;cyclomatic complexity&lt;/a&gt; and code size
metrics, but wouldn't it be neat if we could do a weekly bird's-eye printout
of the source code and pin it up on the wall, giving a nice simple visual
representation of the simplification of the code?&lt;/p&gt;
&lt;p&gt;Except, of course, that with average page lengths of 45 lines we'd need almost
700 pages each time, and a hell of a lot of wall space.&lt;/p&gt;
&lt;p&gt;A better solution would be to print a class per page. At the start of the
project, the application had about 150 classes, and the refactoring effort is
focussed on about 80 of those. Initially, gigantic classes would be an
incomprehensible smudge of grey, but as the refactoring process starts tidying
the code and factoring out into other classes, &lt;strong&gt;the weekly printout would
start to literally come into focus&lt;/strong&gt;, hopefully ending up with many pages
actually containing readable code (which happens roughly when the class is
small enough to fit on no more than 3 pages at normal size).&lt;/p&gt;
&lt;p&gt;The first time we pinned up the printouts, I suddenly recalled a Douglas Adams
foreword reprinted in &lt;em&gt;&lt;a href="http://www.amazon.co.uk/Salmon-Doubt-Hitchhiking-Galaxy-Last/dp/0330323121"&gt;The Salmon of Doubt&lt;/a&gt;&lt;/em&gt;. Adams was a great fan of
P.G. Wodehouse, and explained Wodehouse's interesting drafting technique:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It is the next stage of writingâ€”the relentless revising, refining, and
polishingâ€”that turned his works into the marvels of language we know
and love. When he was writing a book, he used to pin the pages in
undulating waves around the wall of his workroom. Pages he felt were
working well would be pinned up high, and those that still needed work
would be lower down the wall. His aim was to get the entire manuscript
up to the picture rail before he handed it in.
&lt;cite&gt;(Adams, 2002)&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hmm, isn't redrafting a literary cousin of refactoring? In many ways, I think
it is - so &lt;strong&gt;why not apply this technique to refactoring?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;And we've made it so. We tied a piece of string horizontally across the wall -
that's our 'picture rail'. Every week we reprint the classes we have been
working on, and replace the old printouts. Then we move them up towards the
string, in accordance with how happy we are with the view.&lt;/p&gt;
&lt;p&gt;Obviously, this doesn't replace all the other tools we have for evaluating code
quality - e.g. the aforementioned metrics, unit tests, manual QA, and so on. It
does, however, make for a brilliant way of tracking our &lt;em&gt;subjective&lt;/em&gt;
satisfaction with the class. &lt;strong&gt;Software quality tools can never completely
replace the gut instinct of a developer&lt;/strong&gt; - you might have massive test
coverage, but that won't help with subjective measures such as &lt;a href="http://en.wikipedia.org/wiki/Code_smell"&gt;code
smells&lt;/a&gt;. With Wodehouse-style refactoring, we can now easily keep track of
which code we are happy with, and which code we remain deeply suspicious of.&lt;/p&gt;
&lt;p&gt;As an added benefit, all those pages nicely cover up the hideous wall
colour. Bonus!&lt;/p&gt;</content></entry><entry><title>Arthur C. Clarke, 16/12/1917 - 18/03/2008: Indistinguishable From Magic</title><link href="http://localhost:8000/Arthur-C-Clarke-Indistinguishable-From-Magic.html" rel="alternate"></link><published>2008-03-18T23:51:00+00:00</published><updated>2008-03-18T23:51:00+00:00</updated><author><name>Russell Gray</name></author><id>tag:localhost,2008-03-18:/Arthur-C-Clarke-Indistinguishable-From-Magic.html</id><summary type="html">&lt;p&gt;Sad news - &lt;a href="http://news.bbc.co.uk/1/hi/uk/7304004.stm"&gt;the legendary Arthur C. Clarke has died&lt;/a&gt;. He'll be greatly
missed; Clarke novels occupy a full shelf of my floor-to-ceiling bookcase, and
&lt;em&gt;&lt;a href="http://en.wikipedia.org/wiki/Rendezvous_with_rama"&gt;Rendezvous With Rama&lt;/a&gt;&lt;/em&gt; stands proud as the finest sci-fi it has ever been
my pleasure to read.&lt;/p&gt;
&lt;p&gt;Aside from his very visible mastery of sci-fi, however â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Sad news - &lt;a href="http://news.bbc.co.uk/1/hi/uk/7304004.stm"&gt;the legendary Arthur C. Clarke has died&lt;/a&gt;. He'll be greatly
missed; Clarke novels occupy a full shelf of my floor-to-ceiling bookcase, and
&lt;em&gt;&lt;a href="http://en.wikipedia.org/wiki/Rendezvous_with_rama"&gt;Rendezvous With Rama&lt;/a&gt;&lt;/em&gt; stands proud as the finest sci-fi it has ever been
my pleasure to read.&lt;/p&gt;
&lt;p&gt;Aside from his very visible mastery of sci-fi, however, there is much to
remember Clarke for. He is responsible for popularising the concept of
&lt;a href="http://en.wikipedia.org/wiki/Geostationary_orbit"&gt;geostationary orbit&lt;/a&gt;, which is very important for practical global
telecommunications. When you watch the Olympics on TV this summer, you can
thank Clarke for the fact that you haven't had to go to China to see it.&lt;/p&gt;
&lt;p&gt;Perhaps best of all, though, is his now-infamous &lt;a href="http://en.wikipedia.org/wiki/Clarke's_three_laws"&gt;Third Law&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Any sufficiently advanced technology is indistinguishable from magic.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Clarke's Third Law has been quoted, referenced, and paraphrased copiously
since he coined it, and it is almost axiomatic for many technologists. As a
software engineer, I get a wry enjoyment from Gehm's Corollary, i.e. "any
technology distinguishable from magic is insufficiently advanced" - a sobering
thought when confidently hacking away on the next big thing!&lt;/p&gt;
&lt;p&gt;If your users don't think your software is magic, then you have room for
improvement. I believe Clarke would have approved of that sentiment. R.I.P.&lt;/p&gt;</content></entry><entry><title>C# 3.0, Parallel LINQ, And The Betfair API - An Introduction</title><link href="http://localhost:8000/c-30-parallel-linq-and-betfair-api.html" rel="alternate"></link><published>2008-02-23T21:33:00+00:00</published><updated>2008-02-23T21:33:00+00:00</updated><author><name>Russell Gray</name></author><id>tag:localhost,2008-02-23:/c-30-parallel-linq-and-betfair-api.html</id><summary type="html">&lt;p&gt;My pal &lt;a href="http://londoncoder.wordpress.com/"&gt;Jan&lt;/a&gt; has a habit of waxing lyrical about the wonders of &lt;a href="http://blogs.msdn.com/pfxteam/default.aspx"&gt;Parallel
LINQ&lt;/a&gt; (PLINQ) as soon as you make the mistake of mentioning multithreading
within earshot. I've been playing around with &lt;a href="http://www.microsoft.com/downloads/details.aspx?FamilyID=333325FD-AE52-4E35-B531-508D977D32A6&amp;amp;displaylang=en"&gt;.Net 3.5&lt;/a&gt; recently, and I
write a lot of async code day-to-day when struggling to keep â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;My pal &lt;a href="http://londoncoder.wordpress.com/"&gt;Jan&lt;/a&gt; has a habit of waxing lyrical about the wonders of &lt;a href="http://blogs.msdn.com/pfxteam/default.aspx"&gt;Parallel
LINQ&lt;/a&gt; (PLINQ) as soon as you make the mistake of mentioning multithreading
within earshot. I've been playing around with &lt;a href="http://www.microsoft.com/downloads/details.aspx?FamilyID=333325FD-AE52-4E35-B531-508D977D32A6&amp;amp;displaylang=en"&gt;.Net 3.5&lt;/a&gt; recently, and I
write a lot of async code day-to-day when struggling to keep desktop
webservice clients responsive when making lots of webservice calls, so I
thought it high time I took a closer look.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;The Problem&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A key goal for the kind of async work I do is to batch multiple calls up, so
that I get all the responses at once. This is important for keeping the rest
of the code clean. To illustrate, imagine you are writing an application
against the &lt;a href="http://bdp.betfair.com/"&gt;Betfair API&lt;/a&gt;, and you have a screen that displays a market,
your current profit and loss on that market, and your unmatched bets on that
market. To populate this screen will require four API calls - getMarket(),
getMarketPrices(), getMarketProfitAndLoss(), and getCurrentBets().&lt;/p&gt;
&lt;p&gt;Now, the worst (though easiest) thing to do is make the four calls
sequentially on the UI thread. The problem with this is it's slow, and the UI
freezes during the process (since you're blocking on the UI thread), which is
a lousy user experience.&lt;/p&gt;
&lt;p&gt;A slightly better approach is to spin off a thread, and make the four calls
there, raising an event on completion. This gets all the work off the UI
thread and therefore keeps the application responsive, but it's still slow as
the calls are still sequential.&lt;/p&gt;
&lt;p&gt;To speed it up, you can create a thread per call (so four threads in this
case). There's a whole lot of complexity around working out the optimum number
of threads to use (depending on how many processors you have, how many
simultaneous connections you are allowed to open, etc) but that's a bit beyond
the scope of this post, so for now we'll go with the one-thread-per-task
approach and assume it's optimal.&lt;/p&gt;
&lt;p&gt;So, each thread makes one webservice call, and raises an event to signify that
it's finished. Simple, right? Unfortunately, this can lead to some real
headaches in collating the data.&lt;/p&gt;
&lt;p&gt;Imagine a user has hundreds of bets on the market, and therefore the
getCurrentBets() call takes a bit longer to execute than the other three. The
user clicks on a market, and the threads responsible for getting market data
and P&amp;amp;L raise their events quickly, so you display the screen with the data
you have and plan to display the bets as and when they arrive.&lt;/p&gt;
&lt;p&gt;Before the bets are received, however, the user clicks on another market.
Again, the market data and P&amp;amp;L come back quickly and you display them. Then,
finally, the original getCurrentBets() call completes. But wait! You've moved
onto another market now, so you don't care about those bets any more! So you
have to write some code to make sure that each piece of data received is still
relevant. This can become very onerous very quickly, as you struggle to
determine your UI state and work out what data you want and what should be
discarded.&lt;/p&gt;
&lt;p&gt;Now imagine that your application has timers firing all over the place to
update prices and P&amp;amp;L on the market every second or two, so you have events
being raised all the time.&lt;/p&gt;
&lt;p&gt;I've worked with code that ventured down this path, and believe me, you don't
want to go there.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;The Solution&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The best approach is to batch these calls up, so that each happens on a
separate thread, but only one event is raised - when all of the data has been
received. That way, you can be sure that when you handle the event, all the
data is consistent.&lt;/p&gt;
&lt;p&gt;Since this is one of the things that PLINQ does for you, it seems like a good
candidate for kicking the tyres, so to speak. First, though, I'll do a quick
run through of how to do this without PLINQ, for comparison's sake. The task
will be to display a list of all the Premiership matches available on Betfair
at the time the code runs.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Take Out The Old&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Betfair list Premiership matches grouped by fixture date, under the Barclays
Premiership node in the event tree. It looks something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Soccer
    English Soccer
        Barclays Premiership
            Fixtures 23 February
                Fulham v West Ham
                Liverpool v Middlesbrough
                ...
            Fixtures 24 February
                Blackburn v Bolton
                Reading v Aston Villa
            Fixtures 25 February
                Man City v Everton
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The Barclays Premiership event node has an ID that doesn't change (2022802),
so I can jump straight to that node and save myself the bother of having to
navigate the Soccer and English Soccer parent nodes.&lt;/p&gt;
&lt;p&gt;I'll assume you already know how to create Service References for Betfair's
global WSDL, and skip straight on to creating some useful helper methods. I
need to be able to call getEvents(), obviously:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;GetEventsResp&lt;/span&gt; &lt;span class="nf"&gt;GetEvents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;parentEventID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;m_global&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getEvents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MakeEventRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parentEventID&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;getEventsIn&lt;/span&gt; &lt;span class="nf"&gt;MakeEventRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;parentEventID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;getEventsIn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;GetEventsReq&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;header&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;APIRequestHeader&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;sessionToken&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;m_sessionToken&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="n"&gt;eventParentId&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parentEventID&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you're not used to C# 3.0, this is taking advantage of type initialisation
to create nested objects without having to create a bunch of extra local
variables. You can write the exact same method without type initialisation
like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;getEventsIn&lt;/span&gt; &lt;span class="nf"&gt;MakeEventRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;parentEventID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;APIRequestHeader&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;APIRequestHeader&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sessionToken&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;m_sessionToken&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;GetEventsReq&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;GetEventsReq&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;header&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eventParentId&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parentEventID&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;getEventsIn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The first thing I need to do is get a list of fixture nodes. I can do this by
asking for child events of the Premiership node, and filtering for the events
that start with the word 'Fixture'. This can be achieved with a simple regex
and a bit of normal LINQ:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;BFEvent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;GetPremiershipFixtureEvents&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;GetEvents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PREMIERSHIP&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;eventItems&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ev&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Regex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsMatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ev&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eventName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;^Fixtures.*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;ToList&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Assume PREMIERSHIP is a const int with the value 2022802. The Where() method
works as a filter - you pass it a delegate, and it executes that delegate
against each member of the list and returns a new list containing only the
elements for which the delegate returned true.&lt;/p&gt;
&lt;p&gt;In this case, I'm creating the delegate with a lambda expression, which
returns true for elements with an event name that is matched by the regex.&lt;/p&gt;
&lt;p&gt;Now I've got the fixture events, I need to get the child events of each, which
correspond to the actual matches. I want each call to be asynchronous so that
they happen in parallel, rather than sequentially. I also want to wait for all
calls to complete before continuing, so I use the WaitHandle.WaitAll() method:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;BFEvent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;GetMatchEvents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;BFEvent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;fixtureDateEvents&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;BFEvent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;matchEvents&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;BFEvent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;callbacks&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;ev&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;fixtureDateEvents&lt;/span&gt;
        &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="nf"&gt;StartGetEvents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ev&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eventId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;matchEvents&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;ToList&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;WaitHandle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WaitAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;callbacks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConvertAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;ar&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AsyncWaitHandle&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;ToArray&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;matchEvents&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here, the LINQ expression and the ConvertAll() method call are doing similar
things - converting all elements of a list into another type. In the case of
the LINQ expression, I am effectively obtaining a list of IAsyncResult objects
by calling StartGetEvents() on each event in my list and storing the return
value of each call. In the case of the ConvertAll() call, I am obtaining a
list of WaitHandle objects by accessing the AsyncWaitHandle property of each
IAsyncResult object in the list.&lt;/p&gt;
&lt;p&gt;It is perfectly possible to replace the LINQ expression with a call to
ConvertAll(), or the ConvertAll() call with another LINQ expression. Which one
you use in cases like this is largely a matter of preference.&lt;/p&gt;
&lt;p&gt;The StartGetEvents() method needs to make an asynchronous webservice call and
append the results to the provided list. Since multiple threads are accessing
the list, the write must be protected with a lock:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;IAsyncResult&lt;/span&gt; &lt;span class="nf"&gt;StartGetEvents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;parentEventID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;BFEvent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;matchEvents&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;m_global&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BegingetEvents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MakeEventRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parentEventID&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="k"&gt;delegate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IAsyncResult&lt;/span&gt; &lt;span class="n"&gt;ar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;lock&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;matchEvents&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;matchEvents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddRange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="n"&gt;m_global&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EndgetEvents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ar&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eventItems&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="n"&gt;m_global&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I am using an anonymous delegate for the callback here. All it does is lock
the list and add the events contained in the response. Note that in production
code you might want to be a bit more diligent about locking strategies and so
on - I've written the code like this for conciseness, not necessarily for
production-grade correctness.&lt;/p&gt;
&lt;p&gt;Now the whole shebang can be invoked very simply:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;fixtures&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GetPremiershipFixtureEvents&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;GetMatchEvents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fixtures&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;ForEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eventName&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that the calling code is very clean and simple, and doesn't care about
threads or anything like that - all that async plumbing is nicely contained in
the GetMatchEvents() and StartGetEvents() methods.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Bring In The New&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;So how can PLINQ help with this? Well, it lets me get rid of those
GetMatchEvents() and StartGetEvents() methods, which contain all the fiddly
async code and are easily the most complex methods in the code above.&lt;/p&gt;
&lt;p&gt;First, I'll create a simple task class which represents the task of getting
events for a particular ID:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;GetEventsTask&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;m_parentEventID&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;m_sessionToken&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;GetEventsTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;sessionToken&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;parentEventID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;m_sessionToken&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sessionToken&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;m_parentEventID&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parentEventID&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;BFEvent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;GetEvents&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;BFGlobalService&lt;/span&gt; &lt;span class="n"&gt;svc&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;BFGlobalServiceClient&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;APIRequestHeader&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;APIRequestHeader&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;sessionToken&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;m_sessionToken&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;BFEvent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;svc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getEvents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;getEventsIn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;GetEventsReq&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;eventParentId&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;m_parentEventID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;header&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt;
            &lt;span class="p"&gt;})).&lt;/span&gt;&lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eventItems&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once I've instantiated an instance of this class, a call to GetEvents() will
get me all the child events for the specified parent node.&lt;/p&gt;
&lt;p&gt;To use PLINQ, all I have to do is create an array of these task objects - one
per fixture date - and use the AsParallel() extension method to specify that I
want the task processing done in parallel:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;GetEventsTask&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;tasks&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;ev&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;fixtureDateEvents&lt;/span&gt;
        &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;GetEventsTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m_sessionToken&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ev&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eventId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;ToArray&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;taskResults&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AsParallel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetEvents&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;ToList&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Neat, eh? Note that PLINQ will also take care of deciding the optimal number
of threads, neatly sidestepping the work I alluded to earlier.&lt;/p&gt;
&lt;p&gt;One wrinkle is that my PLINQ statement results in a list of lists, so I need
to flatten it out before returning.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt; &lt;span class="n"&gt;matchEvents&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;taskResults&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;matchEvents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddRange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Obviously this is only scratching the surface, not only of PLINQ but of LINQ
itself. Much more powerful expressions can be created with a little tweaking
of the objects generated from the Betfair WSDL - but that's a topic for
another article.&lt;/p&gt;</content><category term="patterns"></category><category term="coding"></category><category term=".net"></category></entry><entry><title>Code CAN Be Beautiful</title><link href="http://localhost:8000/code-can-be-beautiful.html" rel="alternate"></link><published>2008-02-22T17:57:00+00:00</published><updated>2008-02-22T17:57:00+00:00</updated><author><name>Russell Gray</name></author><id>tag:localhost,2008-02-22:/code-can-be-beautiful.html</id><summary type="html">&lt;p&gt;In his &lt;a href="http://www.codinghorror.com/blog/archives/001062.html"&gt;review&lt;/a&gt; of &lt;em&gt;&lt;a href="http://www.amazon.com/gp/product/0596510047/"&gt;Code Is Beautiful&lt;/a&gt;&lt;/em&gt;, Jeff Atwood decides that no,
actually it isn't. He's fairly adamant about it too:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Ideas are beautiful. Algorithms are beautiful. Well executed ideas and
algorithms are even more beautiful. But the code itself is not beautiful.
The beauty of code lies in the â€¦&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;In his &lt;a href="http://www.codinghorror.com/blog/archives/001062.html"&gt;review&lt;/a&gt; of &lt;em&gt;&lt;a href="http://www.amazon.com/gp/product/0596510047/"&gt;Code Is Beautiful&lt;/a&gt;&lt;/em&gt;, Jeff Atwood decides that no,
actually it isn't. He's fairly adamant about it too:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Ideas are beautiful. Algorithms are beautiful. Well executed ideas and
algorithms are even more beautiful. But the code itself is not beautiful.
The beauty of code lies in the architecture, the ideas, the grander
algorithms and strategies that code represents.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I just can't agree with this. It's effectively saying that a representation
cannot be beautiful; only the underlying thing that's &lt;em&gt;being represented&lt;/em&gt; can
be beautiful. Worse, this argument is extended to literature and art as well,
and quotes a reader review from Amazon that quotes a little Russian poetry and
rhetorically asks whether any non-Russian-speaking reader can see beauty in
it.&lt;/p&gt;
&lt;p&gt;This drives me nuts, it really does. &lt;strong&gt;Of course&lt;/strong&gt; the representation can be
beautiful, and it can also be ugly. And the beauty of the representation can
have an amplifying effect on the subject of the representation. Form and
content are related. A non-Russian-speaker may not appreciate Russian poetry,
but that doesn't mean that form itself has no value - it means that, in this
case at least, the value of form is dependent on the content. If you don't
understand the content, you don't appreciate the form.&lt;/p&gt;
&lt;p&gt;This isn't an absolute, though. In literature, there are many techniques for
adding value to form. Alliteration, assonance, metre, and many more techniques
are all structural techniques for beautifying form. I'd argue that pretty much
anyone can appreciate the compact and succinct beauty of the phrase &lt;em&gt;veni,
vidi, vici&lt;/em&gt; without understanding what it means ("I came, I saw, I
conquered").&lt;/p&gt;
&lt;p&gt;There are countless other examples. You don't need to understand Italian to
enjoy opera, for instance. In fact, I've even heard it argued that
understanding the content of an opera can diminish the experience, since the
actual meaning is often fairly bland and distracts from the simple
appreciation of the complex sounds and interplay of the language in the hands
(or lungs) of a world-class performer.&lt;/p&gt;
&lt;p&gt;So what's the equivalent in software? I think expressiveness and elegance are
key. In particular, code that is able to express ideas without adding a lot of
noise. I'm very partial to Haskell for this sort of thing - for instance the
canonical quicksort implementation is wonderfully precise:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;quicksort&lt;/span&gt; &lt;span class="kt"&gt;[]&lt;/span&gt;        &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;[]&lt;/span&gt;
&lt;span class="nf"&gt;quicksort&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="kt"&gt;:&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;quicksort&lt;/span&gt; &lt;span class="n"&gt;less&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;quicksort&lt;/span&gt; &lt;span class="n"&gt;greater&lt;/span&gt;
    &lt;span class="kr"&gt;where&lt;/span&gt; &lt;span class="n"&gt;less&lt;/span&gt;      &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
          &lt;span class="n"&gt;greater&lt;/span&gt;   &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you know the quicksort algorithm, then the 2nd line of code there is about
as precise an expression of the underlying concept as you could hope for. If
you write the same algorithm in C or Visual Basic, I believe that you can
objectively distinguish the 'beauty' of these representations of the same
underlying concept. This is only possible if the representations do indeed
have the quality of beauty.&lt;/p&gt;
&lt;p&gt;Another, perhaps even better, example is the naive-recursive Fibonacci
generator in the same language, which is remarkably close to the mathematical
definition:&lt;/p&gt;
&lt;p&gt;&lt;img alt="image" src="http://en.literateprograms.org/images/math/4/c/4/4c42de46d22d22305c59b9ba88e387e9.png"&gt;&lt;/p&gt;
&lt;p&gt;(from &lt;a href="http://en.literateprograms.org/Fibonacci_numbers_(Haskell)"&gt;literateprograms.org&lt;/a&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;fib&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note I haven't read the actual book under review here, and I have no reason to
doubt the assertions that the book doesn't deliver. I do, however, take
umbrage at the statement that code (or language) cannot be beautiful.&lt;/p&gt;</content><category term="rants"></category></entry><entry><title>Extending the Technical Debt Metaphor</title><link href="http://localhost:8000/extending-technical-debt-metaphor.html" rel="alternate"></link><published>2008-02-21T16:07:00+00:00</published><updated>2008-02-21T16:07:00+00:00</updated><author><name>Russell Gray</name></author><id>tag:localhost,2008-02-21:/extending-technical-debt-metaphor.html</id><summary type="html">&lt;p&gt;A few months ago, the inestimable Steve McConnell (he of &lt;em&gt;&lt;a href="http://www.amazon.co.uk/Code-Complete-Practical-Handbook-Construction/dp/0735619670/"&gt;Code Complete&lt;/a&gt;&lt;/em&gt;
fame) &lt;a href="http://blogs.construx.com/blogs/stevemcc/archive/2007/11/01/technical-debt-2.aspx"&gt;wrote&lt;/a&gt; about &lt;a href="http://www.martinfowler.com/bliki/TechnicalDebt.html"&gt;technical debt&lt;/a&gt;. McConnell looks to extend the
metaphor beyond the simple idea of 'code that is going to be a liability in
the future', identifying two main types of technical debt (deliberate and
accidental), and â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;A few months ago, the inestimable Steve McConnell (he of &lt;em&gt;&lt;a href="http://www.amazon.co.uk/Code-Complete-Practical-Handbook-Construction/dp/0735619670/"&gt;Code Complete&lt;/a&gt;&lt;/em&gt;
fame) &lt;a href="http://blogs.construx.com/blogs/stevemcc/archive/2007/11/01/technical-debt-2.aspx"&gt;wrote&lt;/a&gt; about &lt;a href="http://www.martinfowler.com/bliki/TechnicalDebt.html"&gt;technical debt&lt;/a&gt;. McConnell looks to extend the
metaphor beyond the simple idea of 'code that is going to be a liability in
the future', identifying two main types of technical debt (deliberate and
accidental), and identifying further correlations between the worlds of
financial debt and technical debt.&lt;/p&gt;
&lt;p&gt;For instance, based on the technical debt already accumulated, one team
may have a worse 'credit rating' than another:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Different teams will have different technical debt credit ratings. The
credit rating reflects a team's ability to pay off technical debt
after it has been incurred.&lt;/p&gt;
&lt;p&gt;&lt;cite&gt;(McConnell, 2007)&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There is a lot of insight in McConnell's article, and I recommend you
nip over and read it right now if you haven't already. Technical debt is
indeed a useful and rich analogy for communicating a particular class of
technical problem to non-technical users.&lt;/p&gt;
&lt;p&gt;I wonder, however, if McConnell hasn't extended the metaphor in slightly
the wrong direction. When considering technical debt, I like to think of
the product managers as the debtors, and the development team as the
creditors. The actual underlying concept remains the same, it's just a
shift in responsibilities.&lt;/p&gt;
&lt;p&gt;Why?&lt;/p&gt;
&lt;p&gt;As a developer, I don't always get to make the decisions about whether
something should be done in a quick 'n' dirty hack, or a
properly-architected solution. Of course, I'm likely to recommend the
latter where I can, but it's a fact of life that I will often be
overruled, and rightly so. There are occasions when incurring technical
debt is the right thing to do. McConnell lists a few examples, e.g:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Time to Market&lt;/em&gt;. When time to market is critical, incurring an extra
$1 in development might equate to a loss of $10 in revenue. Even if
the development cost for the same work rises to $5 later, incurring
the $1 debt now is a good business decision.&lt;/p&gt;
&lt;p&gt;&lt;cite&gt;(McConnell, 2007)&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is a key issue. Software development considerations are not the
be-all and end-all, no matter how much I (or any other developer) would
like them to be. It's the &lt;em&gt;product teams&lt;/em&gt; that make these business
decisions, however, and therefore &lt;strong&gt;it should be the product teams that
incur the debt&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;As developers, &lt;strong&gt;we are the ones who give the product guys what they
want, and we take on the risk of that debt not being repaid&lt;/strong&gt;, and
that's why we are the creditors.&lt;/p&gt;
&lt;p&gt;So what does this mean? It means that, when considering whether to
create some additional technical debt, it's the product team that should
have a credit rating. Have they been making quick-win decisions
excessively over the last six months? Well then, maybe they're at their
&lt;em&gt;credit limit&lt;/em&gt;, and cannot incur any more debt until they have used some
of their budget on a project that reduces debt.&lt;/p&gt;
&lt;p&gt;How about if a product manager hasn't incurred any debt recently, but
made a load of bandito decisions on a major project a year ago, and now
the codebase is starting to feel the impact? Charge them &lt;em&gt;interest&lt;/em&gt; on
the debt, so that now it will cost more of their budget to pay off their
debt. This is entirely fair, since with a longstanding debt it is often
the case that more code has been built on top of it in the interim,
which may have been written well but is inherently unstable due to the
shaky foundations. Paying off the debt in full will involve refactoring
this new code, too.&lt;/p&gt;
&lt;p&gt;Of course, you need a fairly enlightened product team if this metaphor
is to be accepted, not to mention significant buy-in from senior
management if you are seriously at risk of jeopardising the product
roadmap by sticking to your guns. However, since the technical debt
metaphor is something of a meme at the moment, why not suggest it? If
the technical debt metaphor really does improve understanding on the
part of non-technical stakeholders, maybe it isn't a hopeless daydream
that they'll also accept the logical extensions of the idea.&lt;/p&gt;</content></entry><entry><title>Reporting on NCover Exclusions</title><link href="http://localhost:8000/reporting-on-ncover-exclusions.html" rel="alternate"></link><published>2008-02-20T19:54:00+00:00</published><updated>2008-02-20T19:54:00+00:00</updated><author><name>Russell Gray</name></author><id>tag:localhost,2008-02-20:/reporting-on-ncover-exclusions.html</id><summary type="html">&lt;p&gt;On a recent project, my team was set the task of achieving 100% unit test
pass-rate and code coverage. If you've ever been in this position, you'll know
it's a double-edged sword - whilst it's great when the Powers That Be embrace
quality instead of fixating, limpet-like, on the next deadline â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;On a recent project, my team was set the task of achieving 100% unit test
pass-rate and code coverage. If you've ever been in this position, you'll know
it's a double-edged sword - whilst it's great when the Powers That Be embrace
quality instead of fixating, limpet-like, on the next deadline, it can be a
nightmare when that percentage figure on the weekly summary becomes the new
focus for managerial concentration, especially given &lt;a href="http://www.ericsink.com/articles/Code_Coverage.html"&gt;how difficult it can
be&lt;/a&gt; to hit 100%.&lt;/p&gt;
&lt;p&gt;The problem is that achieving the magical 100% is, in many cases, neither
practical nor particularly useful. It can even be a problem, if the warm fuzzy
feeling you get when you see "Coverage: 100%" leads to complacency. Even with
100% coverage and pass-rate, &lt;a href="http://www-128.ibm.com/developerworks/java/library/j-cq01316/"&gt;you don't necessarily have quality software&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Our high-level project architecture involved a .Net client talking to a suite
of web services written in Java. The .Net client, as an application with a GUI
and a web service proxy, contained a great deal of generated code and was my
main concern when the targets were set.&lt;/p&gt;
&lt;p&gt;Now, it's my belief that in most cases there's no benefit to writing tests for
generated code (unless you also wrote the generator). Unless you have a very,
very good reason not to, you should trust that the tools are doing their job
and generating sane code. That's what they're there for. If the tools are
flaky, you probably shouldn't use them at all - though I suppose that if you
sometimes fell foul of a particular bug you could write a test to detect
it&lt;sup id="fnref-1"&gt;&lt;a class="footnote-ref" href="#fn-1"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;The cause of my concern was that the UI and web reference code accounted for
about 30-35% of the &lt;a href="http://en.wikipedia.org/wiki/Source_lines_of_code"&gt;SLOC&lt;/a&gt; in the application, and so any coverage report
that covered the whole app would be way short of the targets we were set.
There are a number of ways to deal with this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Bite the bullet and write tests for &lt;em&gt;everything&lt;/em&gt;. That includes
InitializeComponent(), drag 'n' drop handlers, and the sync and async versions
of every web service stub. Best of luck, and see you in 2017&lt;sup id="fnref-2"&gt;&lt;a class="footnote-ref" href="#fn-2"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Explain patiently that some code does not need testing (or at least, is on
the wrong side of the productivity bell curve and subject to massively
diminishing returns in terms of effort/value). Of course, then you'll be asked
to prove that you're not pulling a fast one and that the delta of your target
and actual coverage percentage can be accounted for entirely by generated
code. This will be tricky if you count SLOC for the generated code and use
decision points for your test coverage, and maintaining this is another
administrative task that you probably don't want to do.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Separate your code such that some assemblies contain &lt;em&gt;only&lt;/em&gt; generated code,
and the rest contain &lt;em&gt;only&lt;/em&gt; business logic. Then exclude the former from your
test suite so they don't show on the coverage report. This is probably
achievable, though it can lead to some fairly hideous contortions to maintain
the boundary, and can even result in sensible design decisions being discarded
in favour of wacky ones that have no redeeming feature other than supporting
your arbitrary separation rules.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Swear indiscriminately and refuse. Then clear your desk, probably.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;None of those appealed, so we set out to find another approach. What we wanted
was a more flexible variant of option 3, where we could exclude methods or
classes without having to exclude the whole assembly. If we could exclude code
at a fairly granular level, then it became both more realistic and useful to
aim for 100% coverage of our actual business code.&lt;/p&gt;
&lt;p&gt;It turns out that code exclusion isn't so tough - &lt;a href="http://www.ncover.com/"&gt;NCover&lt;/a&gt; will ignore
methods and classes tagged with an &lt;a href="http://www.ericsink.com/articles/Code_Coverage.html"&gt;attribute named CoverageExclude in the
global namespace&lt;/a&gt;&lt;sup id="fnref-3"&gt;&lt;a class="footnote-ref" href="#fn-3"&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;This still requires a little discipline - for example making sure that if Joe
marks a class as excluded, Jim doesn't add some business logic to that class a
week later without removing the attribute - but nothing that can't easily be
dealt with in regular code reviews.&lt;/p&gt;
&lt;p&gt;The Powers That Be are wily, alas, and when we pitched the idea to them they
approved in principle but were wary of allowing bits of code to be arbitrarily
dropped off the coverage reports. If a class was excluded, who excluded it and
why?&lt;/p&gt;
&lt;p&gt;This seemed reasonable for accountability - the information would be available
in the source check-in notes, but that's a bit fiddly since you don't know
&lt;em&gt;when&lt;/em&gt; the attribute was added; our source control system doesn't have
anything analogous to subversion's 'blame' so you have to go rummaging through
a potentially very long version history. A better solution would be to find a
way to add the information directly to the coverage report, so that it's right
there for all to see. So, how?&lt;/p&gt;
&lt;p&gt;The first step was to get the appropriate metadata into the code. The
&lt;a href="http://weblogs.asp.net/nunitaddin/archive/2006/10/04/CoverageExclude.aspx"&gt;reference implementation&lt;/a&gt; for the CoverageExclude attribute is as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CoverageExcludeAttribute&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Attribute&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We wanted to capture additional information when the attribute was used,
however, so we added a couple of read-only properties and did away with the
default constructor.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CoverageExcludeAttribute&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Attribute&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;m_author&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;m_reason&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;CoverageExcludeAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;reason&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;m_reason&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reason&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;m_author&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Author&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;get&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;m_author&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Reason&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;get&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;m_reason&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, when anyone uses the attribute, the compiler forces them to add some
additional data.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="na"&gt;[CoverageExclude(&amp;quot;John Q Dev&amp;quot;, &amp;quot;No testable code here, buster&amp;quot;)]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;MethodToBeExcluded&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;NCover can be told to pay attention to this attribute with the
excludeAttributes parameter, as explained &lt;a href="http://www.kiwidude.com/blog/2006/07/nant-and-msbuild-tasks-for-ncover.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With the easy bit out of the way, the next task was to report on these
exclusions. Our build system, after running the test suite, used
NCoverExplorer to generate a summary report. You can tell NCoverExplorer to
list exclusions in reports, so we figured that would be a good place to start.
The appropriate NAnt incantation is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;ncoverexplorer&lt;/span&gt; &lt;span class="na"&gt;failonerror=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;false&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;program=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;C:\NCoverExplorer\NCoverExplorer.Console.exe&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;projectName=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Atmosphere Processor::LV426&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;reportType=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;4&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;xmlReportName=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Report.xml&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;mergeFileName=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;CoverageMerge.xml&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;showExcluded=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;True&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;satisfactoryCoverage=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;80&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;fileset&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;include&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Coverage.xml&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/fileset&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;exclusions&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;exclusion&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Assembly&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;pattern=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;*Tests&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;exclusion&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Assembly&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;pattern=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;*Fixtures*&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/exclusions&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ncoverexplorer&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note the reportType and showExcluded attributes, which specify the summary
report we want, with details of excluded code appended to the report. Note
also the exclusion nodes, which specify that we want our test assemblies
excluded from coverage metrics. The report will include a table like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="image" src="http://localhost:8000/images/ncoverexplorer-report-unmodified.png"&gt;&lt;/p&gt;
&lt;p&gt;Our goal was to somehow get our custom properties (Author and Reason) into
this report. To do so, firstly we needed to modify the above table with two
extra columns to hold this custom data. NCoverExplorer ships with stylesheet
called CoverageReport.xsl; the table modification was achieved by tweaking the
'exclusions summary' section as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- Exclusions Summary --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;xsl:template&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;exclusionsSummary&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;td&lt;/span&gt; &lt;span class="na"&gt;colspan=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;5&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;#160;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;td&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;exclusionTable mainTableHeaderLeft&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;colspan=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            Excluded From Coverage Results&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;td&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;exclusionTable mainTableGraphHeader&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;colspan=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            All Code Within&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;td&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;exclusionTable mainTableGraphHeader&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;colspan=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            Reason For Exclusion&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;td&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;exclusionTable mainTableGraphHeader&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;colspan=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            Developer&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;xsl:for-each&lt;/span&gt; &lt;span class="na"&gt;select=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;./exclusions/exclusion&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;td&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mainTableCellBottom exclusionTableCellItem&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;colspan=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;xsl:value-of&lt;/span&gt; &lt;span class="na"&gt;select=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@name&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;td&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mainTableCellBottom mainTableCellGraph&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;colspan=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;xsl:value-of&lt;/span&gt; &lt;span class="na"&gt;select=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@category&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;td&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mainTableCellBottom mainTableCellGraph&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;colspan=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;xsl:value-of&lt;/span&gt; &lt;span class="na"&gt;select=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@reason&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;td&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mainTableCellBottom mainTableCellGraph&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;colspan=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;xsl:value-of&lt;/span&gt; &lt;span class="na"&gt;select=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@author&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/xsl:for-each&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/xsl:template&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The next step was to actually inject our custom data into the report.
This was a two-stage process:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Use reflection to iterate through the application assemblies, looking for
anything tagged with our attribute&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open the report data file generated by NCoverExplorer and shoehorn our new
data into it.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We created a simple little post-processor application to perform this work. To
complete stage 1, we needed to iterate through a directory of assemblies,
loading each one in turn. In each assembly, we iterated through the types
contained therein, and looked for our custom attribute on each one. Then, we
iterated through the methods on each type, and looked for the custom attribute
there too. This is actually very simple - the code skeleton looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FileInfo&lt;/span&gt; &lt;span class="n"&gt;assemblyFile&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;assemblies&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Attempt to load the file as an assembly, and grab  &lt;/span&gt;
        &lt;span class="c1"&gt;// all the types defined therein&lt;/span&gt;
        &lt;span class="n"&gt;Assembly&lt;/span&gt; &lt;span class="n"&gt;assembly&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Assembly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LoadFrom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;assemblyFile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FullName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;types&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;assembly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetTypes&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="c1"&gt;// Spin through the types, looking for classes and &lt;/span&gt;
        &lt;span class="c1"&gt;// methods tagged with CoverageExclude&lt;/span&gt;
        &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;classAttributes&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetCustomAttributes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CoverageExcludeAttribute&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CoverageExcludeAttribute&lt;/span&gt; &lt;span class="n"&gt;classAttribute&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;classAttributes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// ...&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="n"&gt;MethodInfo&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetMethods&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;BindingFlags&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Public&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
                &lt;span class="n"&gt;BindingFlags&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NonPublic&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
                &lt;span class="n"&gt;BindingFlags&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Instance&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
                &lt;span class="n"&gt;BindingFlags&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Static&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MethodInfo&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;methodAttributes&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
                    &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetCustomAttributes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CoverageExcludeAttribute&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CoverageExcludeAttribute&lt;/span&gt; &lt;span class="n"&gt;methodAttribute&lt;/span&gt;
                    &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;methodAttributes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="c1"&gt;// ...&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Probably not a .Net assembly, do some appropriate &lt;/span&gt;
        &lt;span class="c1"&gt;// complaining to the user&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the loops, we cached the fully-qualified names of the types and
methods tagged with the attribute.&lt;/p&gt;
&lt;p&gt;Stage 2 was implemented by tweaking the XML data file NCoverExplorer
generates for the report. This is straightforward too - suck the report
into an XmlDocument, grab the exclusion nodes, and add a couple of
attributes to each one. All the types and methods were already listed
since we'd set the excludeAttributes parameter in the NAnt configuration
(see above).&lt;/p&gt;
&lt;p&gt;Therefore, all we needed to do was match up the FQNs we cached in stage
1 with the nodes already in the report:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;XmlDocument&lt;/span&gt; &lt;span class="n"&gt;doc&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;XmlDocument&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;coverageFile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FullName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Go through all the exclusion nodes and try to match &lt;/span&gt;
&lt;span class="c1"&gt;// them up against the exclusion data we have sucked &lt;/span&gt;
&lt;span class="c1"&gt;// out of the assemblies&lt;/span&gt;
&lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;XmlNode&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SelectNodes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;//exclusion&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Attributes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;category&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Class&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;// Find and remove the first exclusion reason for &lt;/span&gt;
            &lt;span class="c1"&gt;// this class&lt;/span&gt;
            &lt;span class="n"&gt;FindExclusionAndModifyNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exclusions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ClassExclusions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Method&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;// Find and remove the first exclusion reason for&lt;/span&gt;
            &lt;span class="c1"&gt;// this method&lt;/span&gt;
            &lt;span class="n"&gt;FindExclusionAndModifyNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exclusions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MethodExclusions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;// Exclusion at either assembly or namespace level&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The implementation of FindExclusionAndModifyNode simply loops through
the cached FQNs to see if we have data that corresponds to the current
node, and if so it creates two new attributes - one containing the name
of the developer that added the CoverageExcludeAttribute to the code,
and another containing their justification for doing so. Then the
modified XmlDocument is written out to disk, overriding the original.&lt;/p&gt;
&lt;p&gt;The end result is a report that looks something like &lt;a href="https://gist.github.com/russgray/5871d545f24a12fafc00"&gt;this&lt;/a&gt;, with all the
excluded code neatly documented to keep suspicious managers happy.&lt;/p&gt;
&lt;p&gt;Since the post-processor was written as a simple command-line
application, we could create a custom NAnt task for it and integrate the
whole process seamlessly with our continuous integration setup.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn-1"&gt;
&lt;p&gt;I've seen it happen a few times before, for example an XML generator
(which shall remain nameless) that occasionally 'forgot' our custom
namespace and used a default, which caused parsers of that XML to scream
in agony. It's rare though, unless you regularly dig up tools from
CodeProject and use them in your production code, in which case you
deserve everything you get ;-)&amp;#160;&lt;a class="footnote-backref" href="#fnref-1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-2"&gt;
&lt;p&gt;Written in 2008. So if you're reading this on December 31st 2016,
adjust accordingly and don't come crying to me.&amp;#160;&lt;a class="footnote-backref" href="#fnref-2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-3"&gt;
&lt;p&gt;Yes, I know that NCover 2.x has built-in regex-based exclusions that
do all this, but a) not everyone has an NCover 2.x pro licence, and b)
we weren't using NCover 2.x as it hadn't been released at the
time.&amp;#160;&lt;a class="footnote-backref" href="#fnref-3" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term=".net"></category><category term="coding"></category><category term="software engineering"></category></entry><entry><title>Descent Into Incompetence</title><link href="http://localhost:8000/descent-into-incompetence.html" rel="alternate"></link><published>2008-02-02T16:10:00+00:00</published><updated>2008-02-02T16:10:00+00:00</updated><author><name>Russell Gray</name></author><id>tag:localhost,2008-02-02:/descent-into-incompetence.html</id><summary type="html">&lt;p&gt;I am fairly heavily involved with recruitment where I work, being the
author of the technical test and phone screen questions we use for
evaluating candidates, and conducting face-to-face interviews with many
of the hopefuls that get over these early hurdles.&lt;/p&gt;
&lt;p&gt;Naturally, in order to gain these responsibilities I have â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;I am fairly heavily involved with recruitment where I work, being the
author of the technical test and phone screen questions we use for
evaluating candidates, and conducting face-to-face interviews with many
of the hopefuls that get over these early hurdles.&lt;/p&gt;
&lt;p&gt;Naturally, in order to gain these responsibilities I have gone through a
number of required HR ass-covering exercises in which it was drilled
into me that I am legally forbidden from asking questions about
sexuality, marital status, family-planning, and anything else which
might lead me into rejecting a candidate on grounds our beloved
government considers discriminatory.&lt;/p&gt;
&lt;p&gt;Never mind that I have never shown the least inclination to discriminate
against someone because they might want to possibly think about maybe
taking some [mp]aternity leave in the next 30 years, or (gasp) prefer
the company of their own gender, or whatever; I have to go through all
this training so that the company can throw me to the wolves if a
candidate claims to have been discriminated against. "Not our fault,
guvnor; we explained the rules".&lt;/p&gt;
&lt;p&gt;Still, fair enough I suppose; we live in litigious times, and not being
a bigot I have no particular fears of transgressing.&lt;/p&gt;
&lt;p&gt;But what if the rules are changed? And what if they're changed in
horribly unexpected ways? A &lt;a href="http://news.bbc.co.uk/1/hi/business/7187032.stm"&gt;recent article&lt;/a&gt; on the BBC
News site contained, quite without fanfare, some shocking intelligence.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Previously standard questions about age, length of experience and
religious views are now illegal, Which? points out.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Wait, what? Length of experience is now a forbidden topic? So if I'm
recruiting a senior developer or team lead, I now have to waste valuable
time interviewing fresh-out-of-college tyros who haven't written a
single line of commercial code or spent a single day working in a
professional team?&lt;/p&gt;
&lt;p&gt;I can kind of see what is trying to be achieved here, but it is an
unavoidable fact that experience is a &lt;em&gt;vital&lt;/em&gt; attribute for many senior
roles, and needs to be taken into consideration when trying to fill
those roles. It's not just me either - a quick trawl through the endless
agency emails I seem to get every day (despite telling them I'm not on
the market) reveals that most tech jobs are still specifying &lt;em&gt;n&lt;/em&gt; years
of experience; this seems somewhat pointless now that candidates can't
be asked about it. I wonder if they know?&lt;/p&gt;
&lt;p&gt;Even more interesting is the fact that many contract positions are still
paid at 'rates negotiable on experience'. Hah, how does that work when
experience is a forbidden subject? If I were graduating from university
this year I'd be whoring myself around the City applying for
Â£500-per-day contracting gigs and suing any bank that dared ask me to
justify my rate.&lt;/p&gt;
&lt;p&gt;Rob Grant's novel &lt;em&gt;&lt;a href="http://www.amazon.co.uk/Incompetence-Gollancz-Rob-Grant/dp/0575074493/"&gt;Incompetence&lt;/a&gt;&lt;/em&gt; just became slightly less hysterical.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Article 13199 of the Pan-European Constitution: "No person shall be
prejudiced from employment in any capacity, at any level, by reason of
age, race, creed or incompitence (&lt;em&gt;sic&lt;/em&gt;).&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="rants"></category></entry><entry><title>Freedom Zero: The All-Or-Nothing Fallacy</title><link href="http://localhost:8000/freedom-zero-all-or-nothing-fallacy.html" rel="alternate"></link><published>2008-01-29T13:10:00+00:00</published><updated>2008-01-29T13:10:00+00:00</updated><author><name>Russell Gray</name></author><id>tag:localhost,2008-01-29:/freedom-zero-all-or-nothing-fallacy.html</id><summary type="html">&lt;p&gt;&lt;a href="http://www.codinghorror.com/blog/"&gt;Jeff Atwood&lt;/a&gt; has an &lt;a href="http://www.codinghorror.com/blog/archives/001044.html"&gt;article&lt;/a&gt; up today bemoaning the fact that
seemingly nobody "gives a crap about freedom zero". Well, my initial reaction
was that surely nobody could care about something with such a thoroughly
ridiculous name. Freedom Zero? Really? I know this is the &lt;a href="http://www.gnu.org/philosophy/free-sw.html"&gt;FSF&lt;/a&gt;'s first
freedom, and â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://www.codinghorror.com/blog/"&gt;Jeff Atwood&lt;/a&gt; has an &lt;a href="http://www.codinghorror.com/blog/archives/001044.html"&gt;article&lt;/a&gt; up today bemoaning the fact that
seemingly nobody "gives a crap about freedom zero". Well, my initial reaction
was that surely nobody could care about something with such a thoroughly
ridiculous name. Freedom Zero? Really? I know this is the &lt;a href="http://www.gnu.org/philosophy/free-sw.html"&gt;FSF&lt;/a&gt;'s first
freedom, and programmers &lt;a href="http://en.wikipedia.org/wiki/0_(number)#Numbering_from_1_or_0.3F..."&gt;count from 0&lt;/a&gt; don'tcha know, but it's still
rubbish.&lt;/p&gt;
&lt;p&gt;But the real reason is that it simply isn't important enough to override
everything else.&lt;/p&gt;
&lt;p&gt;Certainly, for some things you want the freedom and reliability of open
source. I write my essays in OpenOffice, I use Vim as my text editor for all
programming languages other than C#, and I write maths papers with LaTeX. I
want my personal output to remain usable and not at the whim of some company
somewhere, I agree with all that.&lt;/p&gt;
&lt;p&gt;But do I need my MP3 player to be open? No. My videogame console? No. My
phone? No. My movie editor? No (though only because I always archive the
source material). The irony is that people do indeed care about freedom - the
freedom to &lt;em&gt;choose&lt;/em&gt;, and the sad fact is that there is a certain type of
zealot who only espouses freedom as long as it's &lt;em&gt;their type of freedom&lt;/em&gt;. And
that isn't freedom at all.&lt;/p&gt;
&lt;p&gt;Now, as it happens, Linux is my operating system of choice. I don't own any
Apple computers, though I do have a first-gen iPod Mini, which is distinctly
showing its age. I use Vista for .Net development, but I don't think anyone
could reasonably call me an Apple zealot or an anti-freedom capitalist
whatever.&lt;/p&gt;
&lt;p&gt;But you won't catch me criticising Apple for their closed platform. If it
results in a decent product, I'm all for it. I used to have a G4 iBook and
liked it a lot. When I'm in the market for an ultraportable later this year, I
will give due consideration to the Mac Air.&lt;/p&gt;
&lt;p&gt;A Mac is a product - calling the hardware nothing more than a dongle is a
ridiculous argument. You can run Linux on Mac hardware, and OSX on non-Mac
hardware (suboptimally, granted). Would you call a Ferrari Enzo a dongle
because you need one in order to run the Enzo engine management software?&lt;/p&gt;
&lt;p&gt;And it should be said that Apple isn't &lt;em&gt;quite&lt;/em&gt; as closed as some people
suggest - I can still install Firefox, Thunderbird, and other open source
tools if I want to tackle the hostile internet with a trusted armoury. And OSX
comes with things like Apache and SSH installed out of the box.&lt;/p&gt;
&lt;p&gt;So do I give a crap about freedom zero? Only in as far as it suits my needs.
If a piece of closed software does a better job, &lt;em&gt;and the risk of losing data
forever is within my tolerances&lt;/em&gt;, then sure I'll use it and I won't let
ideology get in my way.&lt;/p&gt;
&lt;p&gt;On the flip side, I care about interoperability, and I contribute or donate to
a few open source projects, and will strongly oppose anything - legal or
technological - that attempts to muscle open source out of existence. An open
source tool deserves the right to compete. I use &lt;a href="http://amarok.kde.org/"&gt;Amarok&lt;/a&gt; not because it's
open, but because I like it more than &lt;a href="http://www.apple.com/itunes/"&gt;iTunes&lt;/a&gt;. Conversely, I use &lt;a href="http://msdn.microsoft.com/vstudio/"&gt;Visual
Studio&lt;/a&gt; not because it's proprietary, but because I prefer it to
&lt;a href="http://www.icsharpcode.net/OpenSource/SD/"&gt;SharpDevelop&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Use the best tool for the job.&lt;/p&gt;</content><category term="rants"></category></entry><entry><title>Technical Book Club: Object Oriented Analysis &amp; Design, Chapter 1</title><link href="http://localhost:8000/technical-book-club-object-oriented.html" rel="alternate"></link><published>2008-01-27T23:31:00+00:00</published><updated>2008-01-27T23:31:00+00:00</updated><author><name>Russell Gray</name></author><id>tag:localhost,2008-01-27:/technical-book-club-object-oriented.html</id><summary type="html">&lt;p&gt;&lt;img alt="image" src="http://ecx.images-amazon.com/images/I/51-uo4HUPCL._AA240_.jpg"&gt;&lt;/p&gt;
&lt;p&gt;So, as &lt;a href="http://localhost:8000/technical-book-club.html"&gt;previously mentioned&lt;/a&gt;, we'll start with the basics. This material
is probably very familiar to most coders with even a small amount of
experience, but it never hurts to refresh the fundamentals. You may even find
that there's some material that seems so obvious you don't even actively think â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="image" src="http://ecx.images-amazon.com/images/I/51-uo4HUPCL._AA240_.jpg"&gt;&lt;/p&gt;
&lt;p&gt;So, as &lt;a href="http://localhost:8000/technical-book-club.html"&gt;previously mentioned&lt;/a&gt;, we'll start with the basics. This material
is probably very familiar to most coders with even a small amount of
experience, but it never hurts to refresh the fundamentals. You may even find
that there's some material that seems so obvious you don't even actively think
about it any more - which is good if it has become habit, but may be bad if
you've grown complacent in certain areas.&lt;/p&gt;
&lt;p&gt;The overarching theme of the first chapter is &lt;strong&gt;complexity&lt;/strong&gt;. Complexity
is the enemy of the software developer, and it is vital to understand
this fact. If you don't identify complexity as the enemy, you will find
it harder to remain vigilant against it.&lt;/p&gt;
&lt;p&gt;Anyone who has worked as a developer for more than a year or two will
almost certainly have exposure to the problems caused by complexity, but
quite often complexity itself will not be pinpointed as the root cause.
It may be a case of not seeing the wood for the trees - when trying to
understand a system it's very easy to get bogged down wondering why some
particular section of code does things a certain way, and not see the
problems with the big picture. Of course, since complexity obscures the
big picture, this is common and self-perpetuating.&lt;/p&gt;
&lt;p&gt;Object-oriented design, then, is a tool for managing complexity. Of
course, it is many other things too, but this is one of the
fundamentals. In particular, OOD is a natural way to represent
&lt;strong&gt;hierarchies&lt;/strong&gt;, and hierarchies are the primary tool Booch presents for
making complexity manageable. A number of examples from nature are
provided; for example, you can view a plant simply as a plant, or as a
collection of structures (leaves, stem, roots).&lt;/p&gt;
&lt;p&gt;Importantly, the overall hierarchical view of a plant can be broken down into
many interacting sub-hierarchies, each of which may be considered in terms of
its own structure and its &lt;strong&gt;interactions&lt;/strong&gt;. This is an example of
&lt;strong&gt;decomposition&lt;/strong&gt;. If you want to study roots in detail, you can study the
branch roots, the root apex, and the root cap - and break that down further if
you like to consider roots as a collection of cells. To study roots in this
sort of detail, however, you do not have to go to the same lengths with leaves
and stems - it is enough to understand the interactions between the higher-
level components.&lt;/p&gt;
&lt;p&gt;Complexity, therefore, is more manageable if it is divided into
interacting components, each of which can be further divided into
interacting subcomponents. At different levels of abstraction there are
clear boundaries - it shouldn't be necessary to understand the epidermis
of a leaf to examine a root, and likewise the study of a leaf should not
need to consider the role of the root apex. This is known as
&lt;strong&gt;separation of concerns&lt;/strong&gt;, and allows you to ignore the parts of the
system that you are not interested in at the time.&lt;/p&gt;
&lt;p&gt;In software, these principles are captured by OOD. Broadly, hierarchies
can be modelled with inheritance, components can be modelled with
modules, intercomponent interactions can be modelled with interfaces and
method calls, and intracomponent interactions can be modelled with
aggregation. These interactions are key, as they form part of the
'value' of a system - in layman's terms, the whole is greater than the
sum of its parts.&lt;/p&gt;
&lt;p&gt;Inheritance and aggregation are, respectively, 'is-a' and 'part-of'
relationships. In both cases, these represent separate but overlapping
hierarchies. Booch's example is that of an aeroplane. An aeroplane can be
thought of as an aggregation of systems - propulsion, flight control, etc.
Each of those can potentially be modelled as specilaised types too - for
instance a jet engine is a particular type of propulsion, and a turbofan
engine is a particular type of jet engine.&lt;/p&gt;
&lt;p&gt;In OO terms, the 'is-a' relationships are expressed as &lt;strong&gt;class
structures&lt;/strong&gt; utilising inheritance, and 'part-of' relationships are
expressed as &lt;strong&gt;object structures&lt;/strong&gt; utilising aggregation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Relative primitives&lt;/strong&gt; are an interesting concept, and refer as much as
anything to the benefit of having a sensible and appropriate vocabulary
at each level of abstraction. With plants, for instance, if you are
working at the cellular level your primitives are nuclei, chloroplasts
etc. If, however, you are at the top level your primitives should be
leaves and stems - something is wrong if you are concerning yourself
with the nucleus of a cell at this level of abstraction. Relative
primitives are a natural consequence of hierarchies and decomposition,
if your hierarchies are sane.&lt;/p&gt;
&lt;p&gt;Even with all these tools for managing complexity at our disposal, it is
still extraordinarily hard - if not nigh-on impossible - to construct a
large complex system in one fell swoop. Booch identifies that a key
characteristic of successful complex systems is that they evolve from
simpler systems, whilst always being useful during that evolution - they
have &lt;strong&gt;stable intermediate forms&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Contemporary development processes, such as agile development,
explicitly recognise this with the mantra of 'deliver early, deliver
often'. The idea is that functionality should be delivered iteratively,
with each iteration being functional and testable. This is in contrast
to more traditional waterfall methodologies, which are notoriously
associated with failed projects, often due to attempting to design a
large complex system up-front and develop it all at once.&lt;/p&gt;
&lt;p&gt;In summary, then, Booch argues that the characteristics of a manageable
complex system are as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hierarchic&lt;/li&gt;
&lt;li&gt;Uses relative primitives&lt;/li&gt;
&lt;li&gt;Has robust separation of concerns&lt;/li&gt;
&lt;li&gt;Has stable intermediate forms&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It is important to note in passing that, since OOA&amp;amp;D is an unashamed
champion of object-orientation as a mechanism for managing complexity,
OO is by no means the only approach - functional and procedural
languages have their own techniques, and in some cases may be more
suitable, depending on the problem to be solved. Even so, many of these
principles are common and are useful things to bear in mind when
designing a system.&lt;/p&gt;
&lt;p&gt;Next week we look at chapter 2, which covers the object model in greater
detail.&lt;/p&gt;</content><category term="book club"></category><category term="software engineering"></category></entry><entry><title>Fab Fib</title><link href="http://localhost:8000/fab-fib.html" rel="alternate"></link><published>2008-01-26T15:49:00+00:00</published><updated>2008-01-26T15:49:00+00:00</updated><author><name>Russell Gray</name></author><id>tag:localhost,2008-01-26:/fab-fib.html</id><summary type="html">&lt;p&gt;&lt;a href="http://www.hanselman.com/blog/"&gt;Scott Hanselman&lt;/a&gt; continues his &lt;a href="http://www.hanselman.com/blog/CategoryView.aspx?category=Source+Code"&gt;Weekly Source Code&lt;/a&gt; series with a look
at algorithms for generating the &lt;a href="http://en.wikipedia.org/wiki/Fibonacci_number"&gt;Fibonacci sequence&lt;/a&gt; in a &lt;a href="http://www.hanselman.com/blog/TheWeeklySourceCode13FibonacciEdition.aspx"&gt;variety of
different languages&lt;/a&gt;. He misses my favourite implementation, though
fortunately a wise commenter has already sought to correct such an egregious
error. As is so often the case, it â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://www.hanselman.com/blog/"&gt;Scott Hanselman&lt;/a&gt; continues his &lt;a href="http://www.hanselman.com/blog/CategoryView.aspx?category=Source+Code"&gt;Weekly Source Code&lt;/a&gt; series with a look
at algorithms for generating the &lt;a href="http://en.wikipedia.org/wiki/Fibonacci_number"&gt;Fibonacci sequence&lt;/a&gt; in a &lt;a href="http://www.hanselman.com/blog/TheWeeklySourceCode13FibonacciEdition.aspx"&gt;variety of
different languages&lt;/a&gt;. He misses my favourite implementation, though
fortunately a wise commenter has already sought to correct such an egregious
error. As is so often the case, it is Haskell that provides the most elegant
yet mind-bending alternative:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;fibonacci&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;
    &lt;span class="kr"&gt;where&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="kt"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="kt"&gt;:&lt;/span&gt; &lt;span class="n"&gt;zipWith&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This little beauty appends a list with its own tail &lt;em&gt;while it's still being
generated&lt;/em&gt; and lazily sums the elements. On top of that, it's &lt;em&gt;fast&lt;/em&gt;, since
unlike most naive recursive Fibonacci generators it doesn't waste time
recalculating previous values. In fact, it runs in linear time, that is
&lt;em&gt;O(n)&lt;/em&gt;, and on a fairly modest 2GHz Athlon XP will calculate the 50,000th
Fibonacci number in around 600 milliseconds. By contrast, the naive recursive
implementation in C# (see below, adapted and corrected from the code Scott
posted) takes 28 seconds to calculate the 45th number, on a much more powerful
Core Duo machine.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;time&lt;/span&gt; ./Fibs.exe
&lt;span class="m"&gt;1134903170&lt;/span&gt;
Execution time: &lt;span class="m"&gt;00&lt;/span&gt;:00:28.2930000

real    0m28.382s
user    0m0.000s
sys     0m0.031s
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As implemented, you can't go much higher than this since the 47th number in
the sequence (2971215073) is too big to store in a 32-bit signed int. Asking
for the 50,000th number results in an immediate stack overflow, which is the
runtime's way of saying "don't be ridiculous, mate".&lt;/p&gt;
&lt;p&gt;Of course, the C# version could be made many times faster and more efficient
by implementing it iteratively (i.e. with a for loop), but this is less
natural since the Fibonacci sequence is a recurrence relation and therefore
best expressed recursively. The beauty of the Haskell version is that it
combines expressiveness with performance, always a happy combination.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;Fibs&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Program&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;DateTime&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Now&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Fibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;45&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
            &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Execution time: {0}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Subtract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;Fibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;||&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;Fibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Fibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="coding"></category><category term="software engineering"></category></entry><entry><title>Turbocharging .Net Webservice Clients</title><link href="http://localhost:8000/turbocharging-net-webservice-clients.html" rel="alternate"></link><published>2007-12-15T19:51:00+00:00</published><updated>2007-12-15T19:51:00+00:00</updated><author><name>Russell Gray</name></author><id>tag:localhost,2007-12-15:/turbocharging-net-webservice-clients.html</id><summary type="html">&lt;p&gt;Since the first version of .Net and its associated toolset, Microsoft have
sought to make it easy to write &lt;a href="http://en.wikipedia.org/wiki/SOAP"&gt;SOAP&lt;/a&gt; services and SOAP clients. And,
generally, they have succeeded quite well. Whilst the open-source world has
tended to prefer the simpler &lt;a href="http://en.wikipedia.org/wiki/Representational_State_Transfer"&gt;REST&lt;/a&gt; approach, MS (and Sun, and Apache) have
done â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Since the first version of .Net and its associated toolset, Microsoft have
sought to make it easy to write &lt;a href="http://en.wikipedia.org/wiki/SOAP"&gt;SOAP&lt;/a&gt; services and SOAP clients. And,
generally, they have succeeded quite well. Whilst the open-source world has
tended to prefer the simpler &lt;a href="http://en.wikipedia.org/wiki/Representational_State_Transfer"&gt;REST&lt;/a&gt; approach, MS (and Sun, and Apache) have
done an admirable job of taking the large, complex SOAP protocol and making it
reasonably straightforward to work with most of the time.&lt;/p&gt;
&lt;p&gt;One of the areas in which things get somewhat less straightforward is high
performance. Granted, most web services don't have particularly eye-popping
requirements in terms of hits or transactions, but occasionally you find an
exception. &lt;a href="http://www.betfair.com"&gt;Betfair&lt;/a&gt;, for instance, have an &lt;a href="http://bdp.betfair.com"&gt;API&lt;/a&gt; that has peak rates in
excess of 13,000 requests &lt;em&gt;per second&lt;/em&gt;, many of which hit the database, with
individual users making tens or even hundreds of requests per second.
Betfair's data changes at a breathtaking rate and there is a perceived
advantage to getting hold of up-to- the-millisecond information.&lt;/p&gt;
&lt;p&gt;To put that in context, the &lt;a href="http://en.wikipedia.org/wiki/Digg_effect"&gt;Digg Effect&lt;/a&gt; is estimated to peak at around
6K-8K hits per hour as I write in December 2007, which translates to
a piffling couple of hits per second (8000 / 60 / 60 = 2.2). Even a more
extreme prediction of &lt;a href="http://creativebits.org/webdev/surviving_the_digg_effect"&gt;50K hits per hour&lt;/a&gt; is only around 14 hits per
second, so we're talking about handling three orders of magnitude more
requests than Digg generates.&lt;/p&gt;
&lt;p&gt;If you are writing a .Net client and want to get the best out of this sort of
situation, you are hamstrung unless you learn a few tricks. Read on to learn
five of the best. I'll be using the Betfair API as an example throughout, but
the techniques apply to any high-performance web service where the usage
profile involves frequent small (&amp;lt;1KB) SOAP requests.&lt;/p&gt;
&lt;p&gt;For those who normally turn to the back of the book for answers and don't
really care about the whys and wherefores, here's the executive summary:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Switch off Expect 100 Continue&lt;/strong&gt;. This should be done in your App.config
file (see below).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Switch off Nagle's Algorithm&lt;/strong&gt;. This should be done in your App.config
file (see below).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Use multithreading&lt;/strong&gt;. Unfortunately this is not a simple configuration
file setting, it is a fundamental part of your application design.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Remove the maximum connection bottleneck&lt;/strong&gt;. This should be done in your
App.config file (see below). This is &lt;em&gt;vital&lt;/em&gt; if your application is
multithreaded.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Use gzip compression&lt;/strong&gt;. .Net 2 has this built-in if you switch it on;
.Net 1.1 needs a helping hand.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The XML snippet that configures these settings is shown below, and
should be added to your App.config file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;system.net&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;connectionManagement&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;add&lt;/span&gt; &lt;span class="na"&gt;address=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;*&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;maxconnection=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;20&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/connectionManagement&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;settings&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;servicePointManager&lt;/span&gt; &lt;span class="na"&gt;expect100Continue=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;false&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;servicePointManager&lt;/span&gt; &lt;span class="na"&gt;useNagleAlgorithm=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;false&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/settings&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/system.net&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For those who share my distrust of &lt;a href="http://localhost:8000/coding-by-convention.html"&gt;unexplained sorcery&lt;/a&gt;, here's the gory
details.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Expect-100 the Unexpected&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.ietf.org/rfc/rfc2616.txt"&gt;RFC 2616&lt;/a&gt; (the specification for HTTP 1.1) includes a request header and
response code that together are known as 'Expect 100 Continue'. When using the
Expect header, the client will send the request headers and wait for the
server to respond with a response code of 100 &lt;em&gt;before&lt;/em&gt; sending the request
body, i.e. splitting the request into two parts with a whole round-trip in-
between.&lt;/p&gt;
&lt;p&gt;Why would you ever want to do this? Well, imagine you are trying to upload a
101MB file to a web server with a 100MB file size limit. If you just submit
the whole thing as one request, you'll sit there for ages waiting for the
upload to complete, only to have it fail right at the last minute when you hit
the 100MB limit. Using Expect 100 Continue, you submit just the headers
initially, and wait for the server's permission to continue; in our example,
this gives the server a chance to look at the Content-Length parameter and
identify that your file is too big, and return an error code instead of
permission to continue. This way you know the upload will fail, without
needlessly transmitting a single byte of the large file.&lt;/p&gt;
&lt;p&gt;By default, the .Net Framework uses the Expect 100 Continue approach. Most
SOAP requests are not, however, anywhere near 101MB in size, and a server
designed to deal with thousands of requests per second is not likely to be
returning anything other than 100 Continue if the Expect header is sent.
Depending on latency, the round-trip penalty may be unacceptable.&lt;/p&gt;
&lt;p&gt;For example, Betfair's Australian exchange (physically located in Australia)
contains all their Australian markets, so if you're in the UK and want to
trade on the Australian Open tennis you're subject to a round-trip time of
about 350ms. If you allow your requests to be split into two, then you have
two round-trips, so your request will take 700ms plus processing time.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Expect-100 on" src="http://localhost:8000/images/expect100_on.png"&gt;&lt;/p&gt;
&lt;p&gt;You don't want that, so switch it off. Note that the request headers and body
are still sent separately, but the latter is no longer dependent on the
response to the former (so they are shown as sent together in this diagram).&lt;/p&gt;
&lt;p&gt;&lt;img alt="Expect-100 off" src="http://localhost:8000/images/expect100_off.png"&gt;&lt;/p&gt;
&lt;p&gt;The setting corresponding to this in the XML snippet above is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;servicePointManager&lt;/span&gt; &lt;span class="na"&gt;expect100Continue=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;false&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;&lt;em&gt;Nagle's Algorithm&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Nagle%27s_algorithm"&gt;Nagle's algorithm&lt;/a&gt; is a low-level algorithm that tries to minimise the
number of TCP packets on the network, by trying to fill a TCP packet before
sending it. TCP packets have a 40-byte header, so if you try to send a single
byte you incur a lot of overhead as you are sending 41 bytes to represent 1
byte of information. This 4000% overhead causes chaos on congested networks. A
TCP packet size is configurable, but is often set to 1500 bytes, and so
Nagle's algorithm will buffer outgoing data in an attempt to send a small
number of full packets rather than a huge amount of mostly empty packets.&lt;/p&gt;
&lt;p&gt;Nagle's algorithm can be paraphrased in English like this:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;If I have less than a full packet's worth of data, and I have not yet
received an acknowledgement from the server for the last data I sent, I will
buffer new outbound data. When I get a server acknowledgement or have enough
data to fill a whole packet, I will send the data across the network.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Now, with our use case (frequent SOAP requests, each &amp;lt;1KB) a request doesn't
fill a packet, so requests are subject to buffering. Furthermore, as explained
above, even with Expect 100 Continue switched off the request headers are
still sent separately from the request body, so the body of the first request
is buffered until the request headers reach their destination and the server
sends back a TCP ACK.&lt;/p&gt;
&lt;p&gt;Let us again consider a UK client communicating with Betfair's Australian API.
Your application issues two requests one for current prices and one for your
current market position (Req1 and Req2 in the diagram below). Together, both
these requests are less than 1500 bytes. The headers for the first request are
transmitted, but Nagle's algorithm buffers the request body, plus the whole
second request, since they don't fill a TCP packet.&lt;/p&gt;
&lt;p&gt;Due to the round trip latency, the acknowledgment of the first request's
headers is not received for 350ms, so that is how long the requests are
buffered for. When the requests do get sent, they too are subject to 350ms
latency around the world, so again you end up with around 700ms added to each
of your Australian API calls.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Nagle on" src="http://localhost:8000/images/nagle_on.png"&gt;&lt;/p&gt;
&lt;p&gt;Without Nagle, we dispense with the buffering and send out our smaller
packets immediately, saving a round-trip.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Nagle off" src="http://localhost:8000/images/nagle_off.png"&gt;&lt;/p&gt;
&lt;p&gt;One word of warning - disabling Nagle can cause problems if you are on a
highly-congested network or have overworked routers and switches, since it
increases the number of network packets flying around. If you don't own your
network, or are deploying your web service client to a large number of users,
you might want to think about this carefully as you won't be popular if your
software saturates the network. The setting corresponding to this in the XML
snippet above is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;servicePointManager&lt;/span&gt; &lt;span class="na"&gt;useNagleAlgorithm=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;false&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;&lt;em&gt;Happenin' Threads&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This one should be pretty obvious. A single-threaded application can
only do one thing at a time. A multi-threaded application can do
multiple things at a time. So if, for example, you want to display some
information and need to collate the results from four web service
requests to build your view, calling them one after another is going to
be slower than calling them all simultaneously (not to mention freezing
your UI if you're writing a WinForms application and making calls on the
UI thread).&lt;/p&gt;
&lt;p&gt;Explaining how to design and write multi-threaded .Net applications is
way out of scope for this blog post, but any time you spend reading and
learning about it either online or in books is going to be time
well-spent. Go on, do it now. &lt;strong&gt;Also read the next section&lt;/strong&gt;, otherwise
your application will not get as much benefit as you expect.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Walk and Chew Gum&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;.Net, by default, has a bottleneck on simultaneous web service calls
against the same host. This one catches loads of people out - they write
clever multi-threaded applications that issue many, many requests, and
never realise that beneath the application layer a lot of their requests
are called in sequence rather than in parallel.&lt;/p&gt;
&lt;p&gt;Tsk, damn Microsoft for unnecessarily crippling their framework, right?
Well no, actually, since this is an example of Microsoft following
standards and recommendations and is to be applauded, lest they go back
to their old ways of "embrace and extend". The recommendation in
question is from &lt;a href="http://www.ietf.org/rfc/rfc2616.txt"&gt;RFC 2616&lt;/a&gt; again,
and states:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A single-user client SHOULD NOT maintain more than 2 connections with
any server or proxy.&lt;/p&gt;
&lt;p&gt;&lt;cite&gt;(&lt;em&gt;RFC 2616&lt;/em&gt;, section 8.1.4)&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;.Net uses HTTP 1.1 persistent connections by default (this is a good
thing - you don't want to incur the cost of establishing a TCP
connection with every request,&lt;em&gt;especially&lt;/em&gt; if you have long round-trip
times as well since it involves multiple round-trips), so MS have done
the right thing and restricted processes to two simultaneous connections
by default.&lt;/p&gt;
&lt;p&gt;What does this mean for your application? It means that if you want to
make 20 requests, and do so on 20 threads as recommended above, under
the hood .Net only makes two at a time and queues the rest up. Therefore
your 20 threads are wasted, as your throughput is no better than if
you'd only created two threads, and innocent web servers are protected
from overzealous clients.&lt;/p&gt;
&lt;p&gt;When we know that we're talking to an insane city-flattening
Godzilla-on-steroids of a server, however, the two-connection limit is
unreasonable and we can ramp-up safely. The corresponding setting in the
XML snippet above is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;connectionManagement&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;add&lt;/span&gt; &lt;span class="na"&gt;address=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;*&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;maxconnection=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;20&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/connectionManagement&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Sorted. You can, of course, change the number 20 to whatever is
appropriate for your application.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; Do not, under any circumstances, get into the habit of
configuring this for all your web service applications. With all 20
threads issuing one request per second, you are exceeding the
14-request-per-second Digg Effect example I used above; with this
technique and enough bandwidth your application will be quite capable of
taking a lot of websites down, and those that manage to weather the
storm will probably blacklist your IP address and/or close your account.
&lt;em&gt;Only use this if you are absolutely sure the server is up to it and
such aggressive behaviour is permitted by the owners&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Small is Beautiful&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The last step is to enable compression on your responses. Depending on
the nature of the service you are using, the value of this tip may vary,
but it's likely to be of some benefit given the number of requests per
second we are issuing. Of course, it is dependent on the web service
actually supporting compression, but it's been a standard feature of
just about every web server for years, so this shouldn't be a problem.&lt;/p&gt;
&lt;p&gt;Lets look at a worked example. The getMarketPrices response from the
Betfair API is about 30KB of XML. If, as above, we have 20 threads
issuing one request per second, and each thread is interested in prices
from a different market, that's about 600KB of data per second, which
will quite easily saturate a lot of home broadband connections.&lt;/p&gt;
&lt;p&gt;With gzip compression, however, each response comes down to about 5KB
(XML compresses very well, generally, since it is just text with a lot
of repetition and whitespace), so the 20 threads now demand a more
manageable 100KB per second.&lt;/p&gt;
&lt;p&gt;Great. So how do we use it? In .Net 2.0 and above it's very easy - just set
the EnableDecompression property of your web service proxy object (ignore
IntelliSense, which incorrectly claims the value is true by default; it's
actually false by default, &lt;a href="http://msdn2.microsoft.com/en-us/library/system.web.services.protocols.httpwebclientprotocol.enabledecompression.aspx"&gt;as stated on MSDN&lt;/a&gt;. For example, to get
compressed responses from Betfair's &lt;a href="https://api.betfair.com/global/v3/BFGlobalService.wsdl"&gt;global server&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;BFGlobalService&lt;/span&gt; &lt;span class="n"&gt;service&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;BFGlobalService&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EnableDecompression&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you're still using .Net 1.1, you have a bit more work to do, since
support for gzip was inexplicably left out of the framework. First, you
need to subclass the generated BFGlobalService proxy class, and override
some key methods so you can a) include the Accept-Encoding header to
tell the server that you understand gzip, and b) decompress the gzipped
response before the XML deserializer sees it, otherwise it'll choke.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BFGlobalWithGzip&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;BFGlobalService&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// Adds compression header to request header&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Net&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WebRequest&lt;/span&gt;  &lt;span class="n"&gt;GetWebRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Uri&lt;/span&gt; &lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;HttpWebRequest&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HttpWebRequest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetWebRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Turn on compression&lt;/span&gt;
        &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Headers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Accept-Encoding&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;gzip, deflate&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// Decompress response before the Xml serializer gets&lt;/span&gt;
    &lt;span class="c1"&gt;/// its hands on it&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="n"&gt;WebResponse&lt;/span&gt; &lt;span class="nf"&gt;GetWebResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;WebRequest&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;HttpWebResponseDecompressed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// Need to override this method if performing&lt;/span&gt;
    &lt;span class="c1"&gt;/// asynchronous calls, otherwise de-compression&lt;/span&gt;
    &lt;span class="c1"&gt;/// will not be performed and will throw an error&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="n"&gt;WebResponse&lt;/span&gt; &lt;span class="nf"&gt;GetWebResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WebRequest&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IAsyncResult&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;HttpWebResponseDecompressed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next, implement the HttpWebResponseDecompressed class. This subclasses
.Net's WebResponse class and knows how to decompress a response if it
has ContentEncoding 'gzip':&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HttpWebResponseDecompressed&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;WebResponse&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;HttpWebResponse&lt;/span&gt; &lt;span class="n"&gt;m_response&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;MemoryStream&lt;/span&gt; &lt;span class="n"&gt;m_decompressedStream&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;HttpWebResponseDecompressed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WebRequest&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;m_response&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HttpWebResponse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetResponse&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;HttpWebResponseDecompressed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WebRequest&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;IAsyncResult&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;m_response&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HttpWebResponse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EndGetResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;ContentLength&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;get&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m_decompressedStream&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;
                &lt;span class="p"&gt;||&lt;/span&gt; &lt;span class="n"&gt;m_decompressedStream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;m_response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ContentLength&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;m_decompressedStream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;m_response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ContentLength&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;ContentType&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;get&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;m_response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ContentType&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;m_response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ContentType&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="n"&gt;Uri&lt;/span&gt; &lt;span class="n"&gt;ResponseUri&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;get&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;m_response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseUri&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="n"&gt;WebHeaderCollection&lt;/span&gt; &lt;span class="n"&gt;Headers&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;get&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;m_response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Headers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IO&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Stream&lt;/span&gt; &lt;span class="n"&gt;GetResponseStream&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Stream&lt;/span&gt; &lt;span class="n"&gt;compressedStream&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m_response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ContentEncoding&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;gzip&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;compressedStream&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;GZipInputStream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;m_response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetResponseStream&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nf"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m_response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ContentEncoding&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;deflate&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;compressedStream&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;InflaterInputStream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;m_response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetResponseStream&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;compressedStream&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;m_decompressedStream&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MemoryStream&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;4096&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;buffer&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;compressedStream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="n"&gt;m_decompressedStream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                        &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="n"&gt;m_decompressedStream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Seek&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SeekOrigin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Begin&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;compressedStream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;m_decompressedStream&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;m_response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetResponseStream&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To decompress the data, we need a decompression library since .Net 1.1 doesn't
provide one. In most cases, &lt;a href="http://www.icsharpcode.net/OpenSource/SharpZipLib/"&gt;SharpZipLib&lt;/a&gt; will do the business:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;ICSharpCode.SharpZipLib.GZip&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;ICSharpCode.SharpZipLib.Zip.Compression.Streams&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, when creating an instance of BFGlobalService you can use the
gzip-supporting subclass and everything else happens automatically.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;BFGlobalService&lt;/span&gt; &lt;span class="n"&gt;service&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;BFGlobalServiceWithGzip&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;&lt;em&gt;Fin&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Jebus, that went on for a bit. Now, go forth and write high-performance
clients at will - but heed the warnings about only doing this when you
know the server is on-the-ball, because these tips really can cause
havoc if used irresponsibly.&lt;/p&gt;</content><category term=".net"></category><category term="coding"></category><category term="software engineering"></category></entry><entry><title>Legacy Code, Refactoring, and Ownership</title><link href="http://localhost:8000/legacy-code-refactoring-and-ownership.html" rel="alternate"></link><published>2007-12-13T17:26:00+00:00</published><updated>2007-12-13T17:26:00+00:00</updated><author><name>Russell Gray</name></author><id>tag:localhost,2007-12-13:/legacy-code-refactoring-and-ownership.html</id><summary type="html">&lt;p&gt;Refactoring is good. Everyone knows that. Since Fowler popularised the concept
with the seminal &lt;a href="http://www.amazon.co.uk/Refactoring-Improving-Design-Existing-Technology/dp/0201485672/"&gt;&lt;em&gt;Refactoring&lt;/em&gt;&lt;/a&gt; it's become a staple of the industry, and
has pride of place on many a bookshelf. In the many, many articles and
discussions of the subject, the key goals and benefits of refactoring are
generally â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Refactoring is good. Everyone knows that. Since Fowler popularised the concept
with the seminal &lt;a href="http://www.amazon.co.uk/Refactoring-Improving-Design-Existing-Technology/dp/0201485672/"&gt;&lt;em&gt;Refactoring&lt;/em&gt;&lt;/a&gt; it's become a staple of the industry, and
has pride of place on many a bookshelf. In the many, many articles and
discussions of the subject, the key goals and benefits of refactoring are
generally taken to be the improvement of readability, testability, decoupling,
and other similar worthy ideals. For me, however, there is another very
distinct benefit, often overlooked. Fowler touches upon it, but doesn't really
develop it, early on in &lt;em&gt;Refactoring&lt;/em&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I use refactoring to help me understand unfamiliar code. When I look at
unfamiliar code, I have to try to understand what it does. I look at a couple
of lines and say to myself, oh yes, that's what this bit of code is doing.
With refactoring I don't stop at the mental note. I actually change the code
to better reflect my understanding, and then I test that understanding by
rerunning the code to see if it still works.&lt;/p&gt;
&lt;p&gt;&lt;cite&gt;(Fowler, &lt;em&gt;Refactoring&lt;/em&gt;, 1999)&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;By investigating a piece of code thoroughly enough to understand how it works,
refactoring it to map directly on to your understanding, and reinforcing
everything with good unit tests, you take &lt;em&gt;ownership&lt;/em&gt; of the code. It's yours
now.&lt;/p&gt;
&lt;p&gt;This is very important, psychologically. Almost every developer feels more at
home with their own code than somebody else's. That's why you feel
uncomfortable and deflated when, 20 minutes into deciphering a nasty bit of
opaque gibberish, you realise it was something you yourself wrote a year
earlier and subsequently forgot about.&lt;/p&gt;
&lt;p&gt;When you refactor, you rewrite code to a greater or lesser extent. Having done
so, the resulting feeling of ownership (alongside increased understanding, of
course) makes the code much less scary. The benefit of this is less marked in
agile methodologies or TDD, of course, since in those cases quite often the
code you are refactoring was written by you anyway. Working with legacy code,
though, it's a big deal.&lt;/p&gt;
&lt;p&gt;In the preface to &lt;a href="http://www.amazon.co.uk/Working-Effectively-Legacy-Robert-Martin/dp/0131177052/"&gt;&lt;em&gt;Working Effectively With Legacy Code&lt;/em&gt;&lt;/a&gt;, Feathers asks
"what do you think about when you hear the term &lt;em&gt;legacy code&lt;/em&gt;?" (Feathers,
2004). He answers by stating that the standard definition is "difficult-to-
change code that we don't understand" and adds his own preferred definition
which is, in essence, "code without tests".&lt;/p&gt;
&lt;p&gt;My own definition of legacy code would include, in many cases, code that
&lt;em&gt;isn't mine&lt;/em&gt;. By 'mine' I don't exclusively mean code I wrote personally; I
also mean code written by my team, or even code written by people who sit a
couple of desks down who I can go and pester about it (which is stretching the
definition a bit, admittedly).&lt;/p&gt;
&lt;p&gt;In short, legacy code for me is code that no longer has any accessible owner.
Like a stray cat or dog, code without an owner goes feral. Refactoring is the
process of taming feral code, but as with stray cats much of the benefit comes
from re-homing. This is a vital process, even if a fairly unconscious one.
When you first come face to face with some hideous 5000-line spaghetti monster
of a function your heart sinks - how can anyone ever hope to understand that,
let alone modify it safely? Especially if the only people that ever worked
with it left the company 3 years ago?&lt;/p&gt;
&lt;p&gt;Refactoring allows you to split this code up, create classes to better
represent the problem domain, improve abstraction, add tests, and all that
other good stuff; at the same time, the process of doing so makes the code
yours. You make the decisions about the classes to create and the abstractions
to introduce. You write the tests that ferret out all the little
idiosyncrasies, and uncover the unwritten assumptions. By the end of the
process, the code feels like yours. And that means that the next time you have
to make a change there, you benefit from the double whammy of code that is not
only well-written and tested, but recognisably &lt;em&gt;yours&lt;/em&gt;; and that's the kind of
code that you won't mind working with.&lt;/p&gt;</content><category term="coding"></category><category term="refactoring"></category><category term="software engineering"></category></entry><entry><title>Coding by Convention</title><link href="http://localhost:8000/coding-by-convention.html" rel="alternate"></link><published>2007-12-09T20:00:00+00:00</published><updated>2007-12-09T20:00:00+00:00</updated><author><name>Russell Gray</name></author><id>tag:localhost,2007-12-09:/coding-by-convention.html</id><summary type="html">&lt;p&gt;I've been meaning for a while to have a play around with &lt;a href="http://www.rubyonrails.org/"&gt;Ruby on Rails&lt;/a&gt;,
on the basis that anything generating so much hype over the last year or two
deserves some level of investigation, if only to see whether the hype is
justified. So, I spent a couple of â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've been meaning for a while to have a play around with &lt;a href="http://www.rubyonrails.org/"&gt;Ruby on Rails&lt;/a&gt;,
on the basis that anything generating so much hype over the last year or two
deserves some level of investigation, if only to see whether the hype is
justified. So, I spent a couple of days working through &lt;a href="http://www.amazon.co.uk/Agile-Development-Rails-Pragmatic-Programmers/dp/0977616630/"&gt;&lt;em&gt;Agile Web
Development with Rails&lt;/em&gt;&lt;/a&gt; and, well, it's pretty nice. I can certainly
appreciate a development environment that goes to such endearing effort to do
work for you without getting in the way - a fairly tricky balancing act. I
came to the book with a working knowledge of Ruby but zero practical exposure
to Rails, and on top of that I'm not a web developer so could not bring much
contextual experience to the table. Despite this, I worked through the book
and ended up with a functional book-store application in about 15 hours. Not
too shabby.&lt;/p&gt;
&lt;p&gt;So how does Rails achieve such power and productivity? The answer is largely
that Rails, more so than pretty much any other development environment I've
used, leverages the power of convention. That is, if you stay 'on rails' and
behave the way Rails wants you to, then in return you get a great deal of
functionality for free. A kind of technological "you scratch my back, and I'll
scratch yours". If you structure your application as Rails expects, then Rails
will automatically hook everything up for you. If you name your database
tables as Rails wants you to, and create the primary/foreign key id columns
that Rails expects, then Rails will take care of all your object-relational-
mapping needs for you. Sounds like a good deal, yes?&lt;/p&gt;
&lt;p&gt;Rails doesn't expect you to jump through all these hoops yourself though. It
provides a number of useful scripts that you can use to perform the common
tasks you want to do, in the way that Rails wants you to do them. Probably the
best example of this is when you first start a new project. You ask Rails to
create an application for you, with the name you specify, then off it goes -
and creates 45 files in 37 directories, without you having to lift a finger.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ rails dummy
      create
      create  app/controllers
      ...
      ...
      create  log/development.log
      create  log/test.log
$ find dummy/ -type f &lt;span class="p"&gt;|&lt;/span&gt;wc -l
&lt;span class="m"&gt;45&lt;/span&gt;
$ find dummy/ -type d &lt;span class="p"&gt;|&lt;/span&gt;wc -l
&lt;span class="m"&gt;37&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Compare this to a newborn ASP.Net application created using the Web Site
wizard in Visual Studio 2005:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ find WebSite1/ -type f &lt;span class="p"&gt;|&lt;/span&gt;wc -l
&lt;span class="m"&gt;2&lt;/span&gt;
$ find WebSite1/ -type d &lt;span class="p"&gt;|&lt;/span&gt;wc -l
&lt;span class="m"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A pretty substantial difference. And if you stay within the confines of Rails'
expectations when adding to the project - which is very easy to do since you
are provided with more generators for creating models, controllers, and
migrations (basically incremental DB deployment scripts) - then you end up
with a nicely structured application in accordance with the hallowed
principles of MVC design, and everything is glued together automatically.
Create a new data model, and your controller is immediately able to load it
from the database along with all its relational buddies in a nice aggregated
object structure with just one line of code (as long as you remembered to add
all the &lt;code&gt;has_many&lt;/code&gt; and &lt;code&gt;belongs_to&lt;/code&gt; calls, of course). Store that data object
in a controller member variable, and your views can access it for display. Use
one of the magical rake incantations and get a DB-backed session management
system which will horizontally scale in a load-balanced environment. Run the
script/console script and you are dropped into a fully interactive command-
line environment similar to irb, where you can instantiate and interact with
all your objects dynamically. Tail the development log and you can see all the
generated SQL as it is executed, and even get indicated performance in terms
of theoretical request-per-second capacity. It's all just fab. Nothing
spectacularly new, of course; each individual feature has been done before,
but Rails pulls them all together very nicely indeed.&lt;/p&gt;
&lt;p&gt;As I worked through the aforementioned book, however, it was very clear that
without the guiding instruction of the esteemed Dave Thomas and DHH I'd be up
the creek without a paddle, and that got me thinking. Programming by
convention is all great and frictionless and wonderful &lt;em&gt;as long as you know
the conventions&lt;/em&gt;. Imagine, if you will, the sheer blank incomprehension of a
maintenance programmer who's never heard of Rails, sitting down to tweak a
Rails application.&lt;/p&gt;
&lt;p&gt;Wait, what? How can this happen? Surely everyone has heard of Rails by now?
Nope, sorry, but the truth is that the &lt;a href="http://www.codinghorror.com/blog/archives/001002.html"&gt;majority of programmers&lt;/a&gt; are clock-
punchers living in a single-language world who don't read blogs, or play
around with tech in their own time, and haven't even heard of Linux, let alone
Rails. Their single language will likely be an everyday static language like
Java or C#, which will leave them ill-prepared for many of the dynamic tricks
in idiomatic Ruby.&lt;/p&gt;
&lt;p&gt;Ah, but surely the kind of forward-thinking proto-company that builds its
product on RoR would never hire non-Ruby-savvy developers anyway? That might
be the case if you drink the &lt;a href="http://www.37signals.com/"&gt;37signals&lt;/a&gt; Kool-Aid and think that any RoR
company is by default Ã¼ber-smart and infallible, but in the real world it
doesn't work like that; there are countless tiny non-technical companies out
there with just one or two developers - I know, because I spent a few years
working at one - and maybe their current developers are cool enough to use
RoR, but when they inevitably leave and the tech-illiterate management hire a
replacement, you can guarantee that the job spec will not include minor
details like "must have at least heard of Ruby on Rails".&lt;/p&gt;
&lt;p&gt;So, our imaginary maintenance guy - let's call him Ted - hired by a non-
technical company to look after a web application, peers for the first time
into the 37 directories (assuming no new ones have been added) and &amp;gt;45 files
(since new ones will most certainly have been added), and nothing makes any
sense. Even assuming Ted is smart enough to make reasonable guesses about Ruby
syntax, and knows what MVC is, there's no visible link between the different
layers of the application. It isn't clear how data is shuttled to and from the
database. It isn't clear why things don't always work as expected when Ted
tries to manually add new things, rather than using the Rails scripts (which
he doesn't know about), even when diligently trying to emulate the structure
and layout of existing code. It all seems like sorcery. What is Ted to do?&lt;/p&gt;
&lt;p&gt;The correct answer is to go and by a Rails book of course, or at least try and
pick out the decent tutorials on the web (unfortunately, there's a lot more
chaff than wheat in this area, maybe a sign that Rails is becoming a bit more
mainstream?). A few days of getting up-to-speed, and Ted achieves
enlightenment and becomes mega-productive, and lives happily ever after. So
coding by convention is a good thing, right?&lt;/p&gt;
&lt;p&gt;Maybe.&lt;/p&gt;
&lt;p&gt;I'm still uneasy about sorcery, and Rails is some of the most effective
sorcery I've seen. The main problem is that, well, it's sorcery. A couple of
times in the 15 hours I spent going through &lt;a href="http://www.amazon.co.uk/Agile-Development-Rails-Pragmatic-Programmers/dp/0977616630/"&gt;&lt;em&gt;Agile Web Development with
Rails&lt;/em&gt;&lt;/a&gt; I hit problems. Not major ones, and always of my own making - some
silly typo, or mistake coming from only having a working knowledge of Ruby
rather than cosy familiarity. As is my wont, failure to spot the error after a
cursory glance through the code led to a quick google search to see if I've
hit a common problem, before resigning myself to going through the code in
detail to sort it out (like all good programmers I'm a lazy devil).&lt;/p&gt;
&lt;p&gt;On these periodic google jaunts I found lots and lots of forum posts and blog
entries from people who, and let's not mince words here, hadn't the first clue
what they were doing. People that had heard the Rails hype, bought the book
(and probably the t-shirt), hit problems, and were now running around like a
cargo cult expecting magic spells to solve all their problems. Restart
WEBrick. rake db:sessions:clear. Roll the most recent migration back then
forward again. None of these work? Sorry, can't help. It reminds me of &lt;a href="http://en.wikipedia.org/wiki/The_IT_Crowd"&gt;The IT
Crowd&lt;/a&gt;'s "have you tried turning it off and on again?".&lt;/p&gt;
&lt;p&gt;I shouldn't be harsh on these folks; at least they're getting excited by Rails
and are rolling up their sleeves and having a go, and no doubt some of them
will succeed wildly and become far better, richer, more attractive programmers
than I can ever hope to be. Also let me be clear that I think the productivity
gains of software like Rails is a good thing, and Rails is certain to account
for a good chunk of my tinkering time for the next few months. It worries me,
however, when people try to run before they can walk, and the magic of coding
by convention tends to encourage it.&lt;/p&gt;
&lt;p&gt;I'll leave it as an exercise for the reader to consider the implications of
the fact that the sample application being conjured here by all these
sorcerers' apprentices is an e-commerce site, at a time when online fraud is
&lt;a href="http://news.bbc.co.uk/1/hi/business/6298641.stm"&gt;skyrocketing&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I don't mean to single out Ruby on Rails specifically, by the way, it's just
handy as an example due to its profile. Coding by convention is not new; if
you want an older example of what happens when people are given programming
tools that allow them to get something working - for fairly loose definitions
of 'working' - without knowing much about what's happening under the hood,
then look at the atrocities committed with VB and databinding over the years.&lt;/p&gt;
&lt;p&gt;Steve Yegge has a characteristically long and insightful &lt;a href="http://steve.yegge.googlepages.com/practical-magic"&gt;rant&lt;/a&gt; on this
subject, and is troubled by the difficulty of working out where to draw the
line. The line, in this case, being the level of abstraction at which a
programmer should understand a system - high enough not to be bogged down in
insane detail (e.g. knowing how semiconductors work) but not so high that the
role of programmer is reduced to that of sideshow conjurer, waving a cheap
trick-shop wand and trusting to a higher power that everything will work out
OK.&lt;/p&gt;
&lt;p&gt;Maybe it's just a generational disease. Maybe in ten years' time all the
apprentices who have graduated to fully-fledged sorcerers will be looking on
in dismay at the young scamps creating Web 5.0 applications using Ruby on
MagLev simply by burping commands into their Skype headsets, and writing
cautionary blogs about the dangers of not knowing how to write a partial web
template.&lt;/p&gt;
&lt;p&gt;Theoretically, a perfect system - perhaps a descendant of Rails in the dim and
distant future - would contain such exquisitely crafted assumptions and such
frictionless conventions that it would never go wrong and always do the right
thing. Thus, the need to understand anything at the lower level of abstraction
required to sort out any problems is obviated, unless you are one of the very
few Grand High Wizards who keep everything running smoothly. I don't know
whether it's fortunate or unfortunate that such a system is unlikely to appear
within my lifetime.&lt;/p&gt;</content><category term="ruby"></category><category term="coding"></category></entry><entry><title>Reindenting a File in Vim</title><link href="http://localhost:8000/reindenting-file-in-vim.html" rel="alternate"></link><published>2007-12-07T18:19:00+00:00</published><updated>2007-12-07T18:19:00+00:00</updated><author><name>Russell Gray</name></author><id>tag:localhost,2007-12-07:/reindenting-file-in-vim.html</id><summary type="html">&lt;p&gt;I'm going to post a series of helpful Vim snippets here, particularly for
features that I don't necessarily use every day and hence forget about after a
while. By posting them here, I've got a nice easy one-stop-shop for finding
them.&lt;/p&gt;
&lt;p&gt;The first tip is reindenting source code. Hitting &lt;code&gt;=&lt;/code&gt; will â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;I'm going to post a series of helpful Vim snippets here, particularly for
features that I don't necessarily use every day and hence forget about after a
while. By posting them here, I've got a nice easy one-stop-shop for finding
them.&lt;/p&gt;
&lt;p&gt;The first tip is reindenting source code. Hitting &lt;code&gt;=&lt;/code&gt; will reindent visually-
selected code , or you can also use a motion to constrain the affected area.
&lt;code&gt;gg=G&lt;/code&gt; will reindent the entire file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;IndentExample&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Indent&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;badgerbadgerbadger&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;IndentExample&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Indent&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;badgerbadgerbadger&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;More info:
&lt;a href="http://www.vim.org/tips/tip.php?tip_id=83"&gt;http://www.vim.org/tips/tip.php?tip_id=83&lt;/a&gt;&lt;/p&gt;</content><category term="vim"></category><category term="software engineering"></category></entry><entry><title>Technical Book Club</title><link href="http://localhost:8000/technical-book-club.html" rel="alternate"></link><published>2007-12-05T18:27:00+00:00</published><updated>2007-12-05T18:27:00+00:00</updated><author><name>Russell Gray</name></author><id>tag:localhost,2007-12-05:/technical-book-club.html</id><summary type="html">&lt;p&gt;Back in October, personal finance blogger Trent at &lt;a href="http://www.thesimpledollar.com" title="The Simple Dollar"&gt;The Simple Dollar&lt;/a&gt;
started an &lt;a href="http://www.thesimpledollar.com/2007/10/30/your-money-or-your-life-final-reflections/" title="Your Money Or Your Life Book Club"&gt;online book club&lt;/a&gt; for one of his favourite finance books. Good
idea, I thought, so I'm nicking it. Starting in January, I'm running a
technical book club at work with a few .Net devs, and I'll write â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Back in October, personal finance blogger Trent at &lt;a href="http://www.thesimpledollar.com" title="The Simple Dollar"&gt;The Simple Dollar&lt;/a&gt;
started an &lt;a href="http://www.thesimpledollar.com/2007/10/30/your-money-or-your-life-final-reflections/" title="Your Money Or Your Life Book Club"&gt;online book club&lt;/a&gt; for one of his favourite finance books. Good
idea, I thought, so I'm nicking it. Starting in January, I'm running a
technical book club at work with a few .Net devs, and I'll write everything up
and post it here, so if you're so inclined you can follow along at home.&lt;/p&gt;
&lt;p&gt;To start with, we'll be reading language-agnostic books covering the
fundamentals of software development in the real world, since it's always
valuable to refresh knowledge on the cornerstones of modern professional
coding; later on this can diversify into specific technologies and subjects
with more arcane, academic, or abstract overtones. Another benefit of starting
with the basics is that we can concentrate on getting the format right without
feeling overwhelmed by unfamiliar material.&lt;/p&gt;
&lt;p&gt;So, the initial batch of texts will cover object-oriented design, design
patterns, refactoring, code quality, and so on. Later, the idea is to study
less immediate (but still vital) subjects like functional programming,
compiler design, operating systems, etc.; and also to gain deeper knowledge of
common specific technologies, e.g. the inner workings of the &lt;a href="http://en.wikipedia.org/wiki/Common_Language_Runtime" title="Common Language Runtime"&gt;CLR&lt;/a&gt; or a
&lt;a href="http://en.wikipedia.org/wiki/Jvm" title="Java Virtual Machine"&gt;JVM&lt;/a&gt;. I suspect people like &lt;a href="http://steve-yegge.blogspot.com/" title="Drunken Blog Rants"&gt;stevey&lt;/a&gt; will &lt;a href="http://steve.yegge.googlepages.com/blog-rants" title="Drunken Blog Rants 2004/5"&gt;argue&lt;/a&gt; that these latter
subjects are more important than the others and should be done first, and they
might even be right, but I've picked my approach and I'm sticking with it, so
nuts to you stevey.&lt;/p&gt;
&lt;p&gt;So, here's the early schedule and probable books. The order we do these books
might change - in fact the books themselves might change if, for example, we
decide that Fowler's &lt;em&gt;&lt;a href="http://www.amazon.co.uk/Enterprise-Application-Architecture-Addison-Wesley-Signature/dp/0321127420/ref=pd_sim_b_njs_title_4"&gt;Enterprise Patterns&lt;/a&gt;&lt;/em&gt; is more appropriate than the
GoF's &lt;em&gt;&lt;a href="http://www.amazon.co.uk/Design-patterns-elements-reusable-object-oriented/dp/0201633612/ref=pd_sim_b_njs_title_1"&gt;Design Patterns&lt;/a&gt;&lt;/em&gt;. Each book will be agreed for certain in good
time for it to be ordered and delivered before the scheduled start date,
obviously.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Topic&lt;/th&gt;
&lt;th&gt;Book&lt;/th&gt;
&lt;th&gt;Start Date&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;OO Design&lt;/td&gt;
&lt;td&gt;&lt;em&gt;&lt;a href="http://www.amazon.co.uk/Oriented-Analysis-Applications-Addison-Wesley-Technology/dp/020189551X/ref=ed_oe_h"&gt;Object-Oriented Analysis and Design with Applications&lt;/a&gt;&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;14/01/2008&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Design Patterns&lt;/td&gt;
&lt;td&gt;&lt;em&gt;&lt;a href="http://www.amazon.co.uk/Design-patterns-elements-reusable-object-oriented/dp/0201633612/ref=pd_sim_b_njs_title_1"&gt;Design Patterns&lt;/a&gt;&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;03/03/2008&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Refactoring&lt;/td&gt;
&lt;td&gt;&lt;em&gt;&lt;a href="http://www.amazon.co.uk/Refactoring-Improving-Design-Existing-Technology/dp/0201485672/ref=pd_bxgy_b_text_b"&gt;Refactoring&lt;/a&gt;&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;05/05/2008&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Code Quality&lt;/td&gt;
&lt;td&gt;&lt;em&gt;&lt;a href="http://www.amazon.co.uk/Pragmatic-Programmer-Andrew-Hunt/dp/020161622X/ref=cm_lmf_tit_3_rlrsrs2"&gt;Pragmatic Programmer&lt;/a&gt;&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;07/07/2008&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Legacy Code&lt;/td&gt;
&lt;td&gt;&lt;em&gt;&lt;a href="http://www.amazon.co.uk/Working-Effectively-Legacy-Robert-Martin/dp/0131177052/ref=sr_1_1?ie=UTF8&amp;amp;s=books&amp;amp;qid=1196701867&amp;amp;sr=1-1"&gt;Working Effectively With Legacy Code&lt;/a&gt;&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;01/09/2008&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;In addition to these, we'll also cover one chapter of &lt;em&gt;&lt;a href="http://www.amazon.co.uk/Code-Complete-Practical-Handbook-Construction/dp/0735619670/ref=sr_1_1?ie=UTF8&amp;amp;s=books&amp;amp;qid=1196701436&amp;amp;sr=1-1"&gt;Code Complete&lt;/a&gt;&lt;/em&gt;
per week. So, there it is. If you want to tag along, get yourself a copy of
Booch's &lt;em&gt;&lt;a href="http://www.amazon.co.uk/Oriented-Analysis-Applications-Addison-Wesley-Technology/dp/020189551X/ref=ed_oe_h"&gt;Object-Oriented Analysis and Design with Applications&lt;/a&gt;&lt;/em&gt; and
McConnell's seminal &lt;em&gt;&lt;a href="http://www.amazon.co.uk/Code-Complete-Practical-Handbook-Construction/dp/0735619670/ref=sr_1_1?ie=UTF8&amp;amp;s=books&amp;amp;qid=1196701436&amp;amp;sr=1-1"&gt;Code Complete&lt;/a&gt;&lt;/em&gt;, and tune in next month.&lt;/p&gt;</content><category term="patterns"></category><category term="software engineering"></category><category term="coding"></category><category term="book club"></category></entry></feed>